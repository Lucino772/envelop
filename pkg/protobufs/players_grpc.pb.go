// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: players.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayersClient is the client API for Players service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayersClient interface {
	ListPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerList, error)
	StreamPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Players_StreamPlayersClient, error)
}

type playersClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayersClient(cc grpc.ClientConnInterface) PlayersClient {
	return &playersClient{cc}
}

func (c *playersClient) ListPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerList, error) {
	out := new(PlayerList)
	err := c.cc.Invoke(ctx, "/envelop.Players/ListPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playersClient) StreamPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Players_StreamPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Players_ServiceDesc.Streams[0], "/envelop.Players/StreamPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &playersStreamPlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Players_StreamPlayersClient interface {
	Recv() (*PlayerList, error)
	grpc.ClientStream
}

type playersStreamPlayersClient struct {
	grpc.ClientStream
}

func (x *playersStreamPlayersClient) Recv() (*PlayerList, error) {
	m := new(PlayerList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayersServer is the server API for Players service.
// All implementations must embed UnimplementedPlayersServer
// for forward compatibility
type PlayersServer interface {
	ListPlayers(context.Context, *emptypb.Empty) (*PlayerList, error)
	StreamPlayers(*emptypb.Empty, Players_StreamPlayersServer) error
	mustEmbedUnimplementedPlayersServer()
}

// UnimplementedPlayersServer must be embedded to have forward compatible implementations.
type UnimplementedPlayersServer struct {
}

func (UnimplementedPlayersServer) ListPlayers(context.Context, *emptypb.Empty) (*PlayerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayers not implemented")
}
func (UnimplementedPlayersServer) StreamPlayers(*emptypb.Empty, Players_StreamPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlayers not implemented")
}
func (UnimplementedPlayersServer) mustEmbedUnimplementedPlayersServer() {}

// UnsafePlayersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayersServer will
// result in compilation errors.
type UnsafePlayersServer interface {
	mustEmbedUnimplementedPlayersServer()
}

func RegisterPlayersServer(s grpc.ServiceRegistrar, srv PlayersServer) {
	s.RegisterService(&Players_ServiceDesc, srv)
}

func _Players_ListPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayersServer).ListPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envelop.Players/ListPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayersServer).ListPlayers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Players_StreamPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayersServer).StreamPlayers(m, &playersStreamPlayersServer{stream})
}

type Players_StreamPlayersServer interface {
	Send(*PlayerList) error
	grpc.ServerStream
}

type playersStreamPlayersServer struct {
	grpc.ServerStream
}

func (x *playersStreamPlayersServer) Send(m *PlayerList) error {
	return x.ServerStream.SendMsg(m)
}

// Players_ServiceDesc is the grpc.ServiceDesc for Players service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Players_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envelop.Players",
	HandlerType: (*PlayersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlayers",
			Handler:    _Players_ListPlayers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPlayers",
			Handler:       _Players_StreamPlayers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "players.proto",
}
