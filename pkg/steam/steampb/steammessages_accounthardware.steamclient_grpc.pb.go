// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_accounthardware.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountHardwareClient is the client API for AccountHardware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountHardwareClient interface {
	RegisterSteamController(ctx context.Context, in *CAccountHardware_RegisterSteamController_Request, opts ...grpc.CallOption) (*CAccountHardware_RegisterSteamController_Response, error)
	CompleteSteamControllerRegistration(ctx context.Context, in *CAccountHardware_CompleteSteamControllerRegistration_Request, opts ...grpc.CallOption) (*CAccountHardware_CompleteSteamControllerRegistration_Response, error)
	QueryAccountsRegisteredToController(ctx context.Context, in *CAccountHardware_QueryAccountsRegisteredToSerial_Request, opts ...grpc.CallOption) (*CAccountHardware_QueryAccountsRegisteredToSerial_Response, error)
	SetDesiredControllerConfigForApp(ctx context.Context, in *CAccountHardware_SteamControllerSetConfig_Request, opts ...grpc.CallOption) (*CAccountHardware_SteamControllerSetConfig_Response, error)
	GetDesiredControllerConfigForApp(ctx context.Context, in *CAccountHardware_SteamControllerGetConfig_Request, opts ...grpc.CallOption) (*CAccountHardware_SteamControllerGetConfig_Response, error)
	DeRegisterSteamController(ctx context.Context, in *CAccountHardware_DeRegisterSteamController_Request, opts ...grpc.CallOption) (*CAccountHardware_DeRegisterSteamController_Response, error)
	SetControllerPersonalizationFile(ctx context.Context, in *CAccountHardware_SetPersonalizationFile_Request, opts ...grpc.CallOption) (*CAccountHardware_SetPersonalizationFile_Response, error)
	GetControllerPersonalizationFile(ctx context.Context, in *CAccountHardware_GetPersonalizationFile_Request, opts ...grpc.CallOption) (*CAccountHardware_GetPersonalizationFile_Response, error)
	VRCompatibilityCheck(ctx context.Context, in *CAccountHardware_VRCompatibilityCheck_Request, opts ...grpc.CallOption) (*CAccountHardware_VRCompatibilityCheck_Response, error)
	RegisterValveIndexComponent(ctx context.Context, in *CAccountHardware_RegisterValveIndexComponent_Request, opts ...grpc.CallOption) (*CAccountHardware_RegisterValveIndexComponent_Response, error)
	GetSteamDeckComponents(ctx context.Context, in *CAccountHardware_GetSteamDeckComponents_Request, opts ...grpc.CallOption) (*CAccountHardware_GetSteamDeckComponents_Response, error)
}

type accountHardwareClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountHardwareClient(cc grpc.ClientConnInterface) AccountHardwareClient {
	return &accountHardwareClient{cc}
}

func (c *accountHardwareClient) RegisterSteamController(ctx context.Context, in *CAccountHardware_RegisterSteamController_Request, opts ...grpc.CallOption) (*CAccountHardware_RegisterSteamController_Response, error) {
	out := new(CAccountHardware_RegisterSteamController_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/RegisterSteamController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) CompleteSteamControllerRegistration(ctx context.Context, in *CAccountHardware_CompleteSteamControllerRegistration_Request, opts ...grpc.CallOption) (*CAccountHardware_CompleteSteamControllerRegistration_Response, error) {
	out := new(CAccountHardware_CompleteSteamControllerRegistration_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/CompleteSteamControllerRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) QueryAccountsRegisteredToController(ctx context.Context, in *CAccountHardware_QueryAccountsRegisteredToSerial_Request, opts ...grpc.CallOption) (*CAccountHardware_QueryAccountsRegisteredToSerial_Response, error) {
	out := new(CAccountHardware_QueryAccountsRegisteredToSerial_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/QueryAccountsRegisteredToController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) SetDesiredControllerConfigForApp(ctx context.Context, in *CAccountHardware_SteamControllerSetConfig_Request, opts ...grpc.CallOption) (*CAccountHardware_SteamControllerSetConfig_Response, error) {
	out := new(CAccountHardware_SteamControllerSetConfig_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/SetDesiredControllerConfigForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) GetDesiredControllerConfigForApp(ctx context.Context, in *CAccountHardware_SteamControllerGetConfig_Request, opts ...grpc.CallOption) (*CAccountHardware_SteamControllerGetConfig_Response, error) {
	out := new(CAccountHardware_SteamControllerGetConfig_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/GetDesiredControllerConfigForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) DeRegisterSteamController(ctx context.Context, in *CAccountHardware_DeRegisterSteamController_Request, opts ...grpc.CallOption) (*CAccountHardware_DeRegisterSteamController_Response, error) {
	out := new(CAccountHardware_DeRegisterSteamController_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/DeRegisterSteamController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) SetControllerPersonalizationFile(ctx context.Context, in *CAccountHardware_SetPersonalizationFile_Request, opts ...grpc.CallOption) (*CAccountHardware_SetPersonalizationFile_Response, error) {
	out := new(CAccountHardware_SetPersonalizationFile_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/SetControllerPersonalizationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) GetControllerPersonalizationFile(ctx context.Context, in *CAccountHardware_GetPersonalizationFile_Request, opts ...grpc.CallOption) (*CAccountHardware_GetPersonalizationFile_Response, error) {
	out := new(CAccountHardware_GetPersonalizationFile_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/GetControllerPersonalizationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) VRCompatibilityCheck(ctx context.Context, in *CAccountHardware_VRCompatibilityCheck_Request, opts ...grpc.CallOption) (*CAccountHardware_VRCompatibilityCheck_Response, error) {
	out := new(CAccountHardware_VRCompatibilityCheck_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/VRCompatibilityCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) RegisterValveIndexComponent(ctx context.Context, in *CAccountHardware_RegisterValveIndexComponent_Request, opts ...grpc.CallOption) (*CAccountHardware_RegisterValveIndexComponent_Response, error) {
	out := new(CAccountHardware_RegisterValveIndexComponent_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/RegisterValveIndexComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHardwareClient) GetSteamDeckComponents(ctx context.Context, in *CAccountHardware_GetSteamDeckComponents_Request, opts ...grpc.CallOption) (*CAccountHardware_GetSteamDeckComponents_Response, error) {
	out := new(CAccountHardware_GetSteamDeckComponents_Response)
	err := c.cc.Invoke(ctx, "/AccountHardware/GetSteamDeckComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountHardwareServer is the server API for AccountHardware service.
// All implementations must embed UnimplementedAccountHardwareServer
// for forward compatibility
type AccountHardwareServer interface {
	RegisterSteamController(context.Context, *CAccountHardware_RegisterSteamController_Request) (*CAccountHardware_RegisterSteamController_Response, error)
	CompleteSteamControllerRegistration(context.Context, *CAccountHardware_CompleteSteamControllerRegistration_Request) (*CAccountHardware_CompleteSteamControllerRegistration_Response, error)
	QueryAccountsRegisteredToController(context.Context, *CAccountHardware_QueryAccountsRegisteredToSerial_Request) (*CAccountHardware_QueryAccountsRegisteredToSerial_Response, error)
	SetDesiredControllerConfigForApp(context.Context, *CAccountHardware_SteamControllerSetConfig_Request) (*CAccountHardware_SteamControllerSetConfig_Response, error)
	GetDesiredControllerConfigForApp(context.Context, *CAccountHardware_SteamControllerGetConfig_Request) (*CAccountHardware_SteamControllerGetConfig_Response, error)
	DeRegisterSteamController(context.Context, *CAccountHardware_DeRegisterSteamController_Request) (*CAccountHardware_DeRegisterSteamController_Response, error)
	SetControllerPersonalizationFile(context.Context, *CAccountHardware_SetPersonalizationFile_Request) (*CAccountHardware_SetPersonalizationFile_Response, error)
	GetControllerPersonalizationFile(context.Context, *CAccountHardware_GetPersonalizationFile_Request) (*CAccountHardware_GetPersonalizationFile_Response, error)
	VRCompatibilityCheck(context.Context, *CAccountHardware_VRCompatibilityCheck_Request) (*CAccountHardware_VRCompatibilityCheck_Response, error)
	RegisterValveIndexComponent(context.Context, *CAccountHardware_RegisterValveIndexComponent_Request) (*CAccountHardware_RegisterValveIndexComponent_Response, error)
	GetSteamDeckComponents(context.Context, *CAccountHardware_GetSteamDeckComponents_Request) (*CAccountHardware_GetSteamDeckComponents_Response, error)
	mustEmbedUnimplementedAccountHardwareServer()
}

// UnimplementedAccountHardwareServer must be embedded to have forward compatible implementations.
type UnimplementedAccountHardwareServer struct {
}

func (UnimplementedAccountHardwareServer) RegisterSteamController(context.Context, *CAccountHardware_RegisterSteamController_Request) (*CAccountHardware_RegisterSteamController_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSteamController not implemented")
}
func (UnimplementedAccountHardwareServer) CompleteSteamControllerRegistration(context.Context, *CAccountHardware_CompleteSteamControllerRegistration_Request) (*CAccountHardware_CompleteSteamControllerRegistration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSteamControllerRegistration not implemented")
}
func (UnimplementedAccountHardwareServer) QueryAccountsRegisteredToController(context.Context, *CAccountHardware_QueryAccountsRegisteredToSerial_Request) (*CAccountHardware_QueryAccountsRegisteredToSerial_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccountsRegisteredToController not implemented")
}
func (UnimplementedAccountHardwareServer) SetDesiredControllerConfigForApp(context.Context, *CAccountHardware_SteamControllerSetConfig_Request) (*CAccountHardware_SteamControllerSetConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDesiredControllerConfigForApp not implemented")
}
func (UnimplementedAccountHardwareServer) GetDesiredControllerConfigForApp(context.Context, *CAccountHardware_SteamControllerGetConfig_Request) (*CAccountHardware_SteamControllerGetConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesiredControllerConfigForApp not implemented")
}
func (UnimplementedAccountHardwareServer) DeRegisterSteamController(context.Context, *CAccountHardware_DeRegisterSteamController_Request) (*CAccountHardware_DeRegisterSteamController_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterSteamController not implemented")
}
func (UnimplementedAccountHardwareServer) SetControllerPersonalizationFile(context.Context, *CAccountHardware_SetPersonalizationFile_Request) (*CAccountHardware_SetPersonalizationFile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControllerPersonalizationFile not implemented")
}
func (UnimplementedAccountHardwareServer) GetControllerPersonalizationFile(context.Context, *CAccountHardware_GetPersonalizationFile_Request) (*CAccountHardware_GetPersonalizationFile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerPersonalizationFile not implemented")
}
func (UnimplementedAccountHardwareServer) VRCompatibilityCheck(context.Context, *CAccountHardware_VRCompatibilityCheck_Request) (*CAccountHardware_VRCompatibilityCheck_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VRCompatibilityCheck not implemented")
}
func (UnimplementedAccountHardwareServer) RegisterValveIndexComponent(context.Context, *CAccountHardware_RegisterValveIndexComponent_Request) (*CAccountHardware_RegisterValveIndexComponent_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValveIndexComponent not implemented")
}
func (UnimplementedAccountHardwareServer) GetSteamDeckComponents(context.Context, *CAccountHardware_GetSteamDeckComponents_Request) (*CAccountHardware_GetSteamDeckComponents_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteamDeckComponents not implemented")
}
func (UnimplementedAccountHardwareServer) mustEmbedUnimplementedAccountHardwareServer() {}

// UnsafeAccountHardwareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountHardwareServer will
// result in compilation errors.
type UnsafeAccountHardwareServer interface {
	mustEmbedUnimplementedAccountHardwareServer()
}

func RegisterAccountHardwareServer(s grpc.ServiceRegistrar, srv AccountHardwareServer) {
	s.RegisterService(&AccountHardware_ServiceDesc, srv)
}

func _AccountHardware_RegisterSteamController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_RegisterSteamController_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).RegisterSteamController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/RegisterSteamController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).RegisterSteamController(ctx, req.(*CAccountHardware_RegisterSteamController_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_CompleteSteamControllerRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_CompleteSteamControllerRegistration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).CompleteSteamControllerRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/CompleteSteamControllerRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).CompleteSteamControllerRegistration(ctx, req.(*CAccountHardware_CompleteSteamControllerRegistration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_QueryAccountsRegisteredToController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_QueryAccountsRegisteredToSerial_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).QueryAccountsRegisteredToController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/QueryAccountsRegisteredToController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).QueryAccountsRegisteredToController(ctx, req.(*CAccountHardware_QueryAccountsRegisteredToSerial_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_SetDesiredControllerConfigForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_SteamControllerSetConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).SetDesiredControllerConfigForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/SetDesiredControllerConfigForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).SetDesiredControllerConfigForApp(ctx, req.(*CAccountHardware_SteamControllerSetConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_GetDesiredControllerConfigForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_SteamControllerGetConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).GetDesiredControllerConfigForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/GetDesiredControllerConfigForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).GetDesiredControllerConfigForApp(ctx, req.(*CAccountHardware_SteamControllerGetConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_DeRegisterSteamController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_DeRegisterSteamController_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).DeRegisterSteamController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/DeRegisterSteamController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).DeRegisterSteamController(ctx, req.(*CAccountHardware_DeRegisterSteamController_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_SetControllerPersonalizationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_SetPersonalizationFile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).SetControllerPersonalizationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/SetControllerPersonalizationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).SetControllerPersonalizationFile(ctx, req.(*CAccountHardware_SetPersonalizationFile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_GetControllerPersonalizationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_GetPersonalizationFile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).GetControllerPersonalizationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/GetControllerPersonalizationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).GetControllerPersonalizationFile(ctx, req.(*CAccountHardware_GetPersonalizationFile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_VRCompatibilityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_VRCompatibilityCheck_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).VRCompatibilityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/VRCompatibilityCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).VRCompatibilityCheck(ctx, req.(*CAccountHardware_VRCompatibilityCheck_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_RegisterValveIndexComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_RegisterValveIndexComponent_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).RegisterValveIndexComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/RegisterValveIndexComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).RegisterValveIndexComponent(ctx, req.(*CAccountHardware_RegisterValveIndexComponent_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHardware_GetSteamDeckComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAccountHardware_GetSteamDeckComponents_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHardwareServer).GetSteamDeckComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountHardware/GetSteamDeckComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHardwareServer).GetSteamDeckComponents(ctx, req.(*CAccountHardware_GetSteamDeckComponents_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountHardware_ServiceDesc is the grpc.ServiceDesc for AccountHardware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountHardware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountHardware",
	HandlerType: (*AccountHardwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSteamController",
			Handler:    _AccountHardware_RegisterSteamController_Handler,
		},
		{
			MethodName: "CompleteSteamControllerRegistration",
			Handler:    _AccountHardware_CompleteSteamControllerRegistration_Handler,
		},
		{
			MethodName: "QueryAccountsRegisteredToController",
			Handler:    _AccountHardware_QueryAccountsRegisteredToController_Handler,
		},
		{
			MethodName: "SetDesiredControllerConfigForApp",
			Handler:    _AccountHardware_SetDesiredControllerConfigForApp_Handler,
		},
		{
			MethodName: "GetDesiredControllerConfigForApp",
			Handler:    _AccountHardware_GetDesiredControllerConfigForApp_Handler,
		},
		{
			MethodName: "DeRegisterSteamController",
			Handler:    _AccountHardware_DeRegisterSteamController_Handler,
		},
		{
			MethodName: "SetControllerPersonalizationFile",
			Handler:    _AccountHardware_SetControllerPersonalizationFile_Handler,
		},
		{
			MethodName: "GetControllerPersonalizationFile",
			Handler:    _AccountHardware_GetControllerPersonalizationFile_Handler,
		},
		{
			MethodName: "VRCompatibilityCheck",
			Handler:    _AccountHardware_VRCompatibilityCheck_Handler,
		},
		{
			MethodName: "RegisterValveIndexComponent",
			Handler:    _AccountHardware_RegisterValveIndexComponent_Handler,
		},
		{
			MethodName: "GetSteamDeckComponents",
			Handler:    _AccountHardware_GetSteamDeckComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_accounthardware.steamclient.proto",
}
