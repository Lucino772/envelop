// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_auth.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	GetPasswordRSAPublicKey(ctx context.Context, in *CAuthentication_GetPasswordRSAPublicKey_Request, opts ...grpc.CallOption) (*CAuthentication_GetPasswordRSAPublicKey_Response, error)
	BeginAuthSessionViaQR(ctx context.Context, in *CAuthentication_BeginAuthSessionViaQR_Request, opts ...grpc.CallOption) (*CAuthentication_BeginAuthSessionViaQR_Response, error)
	BeginAuthSessionViaCredentials(ctx context.Context, in *CAuthentication_BeginAuthSessionViaCredentials_Request, opts ...grpc.CallOption) (*CAuthentication_BeginAuthSessionViaCredentials_Response, error)
	PollAuthSessionStatus(ctx context.Context, in *CAuthentication_PollAuthSessionStatus_Request, opts ...grpc.CallOption) (*CAuthentication_PollAuthSessionStatus_Response, error)
	GetAuthSessionInfo(ctx context.Context, in *CAuthentication_GetAuthSessionInfo_Request, opts ...grpc.CallOption) (*CAuthentication_GetAuthSessionInfo_Response, error)
	UpdateAuthSessionWithMobileConfirmation(ctx context.Context, in *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request, opts ...grpc.CallOption) (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response, error)
	UpdateAuthSessionWithSteamGuardCode(ctx context.Context, in *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request, opts ...grpc.CallOption) (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response, error)
	GenerateAccessTokenForApp(ctx context.Context, in *CAuthentication_AccessToken_GenerateForApp_Request, opts ...grpc.CallOption) (*CAuthentication_AccessToken_GenerateForApp_Response, error)
	EnumerateTokens(ctx context.Context, in *CAuthentication_RefreshToken_Enumerate_Request, opts ...grpc.CallOption) (*CAuthentication_RefreshToken_Enumerate_Response, error)
	GetAuthSessionsForAccount(ctx context.Context, in *CAuthentication_GetAuthSessionsForAccount_Request, opts ...grpc.CallOption) (*CAuthentication_GetAuthSessionsForAccount_Response, error)
	MigrateMobileSession(ctx context.Context, in *CAuthentication_MigrateMobileSession_Request, opts ...grpc.CallOption) (*CAuthentication_MigrateMobileSession_Response, error)
	RevokeToken(ctx context.Context, in *CAuthentication_Token_Revoke_Request, opts ...grpc.CallOption) (*CAuthentication_Token_Revoke_Response, error)
	RevokeRefreshToken(ctx context.Context, in *CAuthentication_RefreshToken_Revoke_Request, opts ...grpc.CallOption) (*CAuthentication_RefreshToken_Revoke_Response, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) GetPasswordRSAPublicKey(ctx context.Context, in *CAuthentication_GetPasswordRSAPublicKey_Request, opts ...grpc.CallOption) (*CAuthentication_GetPasswordRSAPublicKey_Response, error) {
	out := new(CAuthentication_GetPasswordRSAPublicKey_Response)
	err := c.cc.Invoke(ctx, "/Authentication/GetPasswordRSAPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) BeginAuthSessionViaQR(ctx context.Context, in *CAuthentication_BeginAuthSessionViaQR_Request, opts ...grpc.CallOption) (*CAuthentication_BeginAuthSessionViaQR_Response, error) {
	out := new(CAuthentication_BeginAuthSessionViaQR_Response)
	err := c.cc.Invoke(ctx, "/Authentication/BeginAuthSessionViaQR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) BeginAuthSessionViaCredentials(ctx context.Context, in *CAuthentication_BeginAuthSessionViaCredentials_Request, opts ...grpc.CallOption) (*CAuthentication_BeginAuthSessionViaCredentials_Response, error) {
	out := new(CAuthentication_BeginAuthSessionViaCredentials_Response)
	err := c.cc.Invoke(ctx, "/Authentication/BeginAuthSessionViaCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) PollAuthSessionStatus(ctx context.Context, in *CAuthentication_PollAuthSessionStatus_Request, opts ...grpc.CallOption) (*CAuthentication_PollAuthSessionStatus_Response, error) {
	out := new(CAuthentication_PollAuthSessionStatus_Response)
	err := c.cc.Invoke(ctx, "/Authentication/PollAuthSessionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetAuthSessionInfo(ctx context.Context, in *CAuthentication_GetAuthSessionInfo_Request, opts ...grpc.CallOption) (*CAuthentication_GetAuthSessionInfo_Response, error) {
	out := new(CAuthentication_GetAuthSessionInfo_Response)
	err := c.cc.Invoke(ctx, "/Authentication/GetAuthSessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) UpdateAuthSessionWithMobileConfirmation(ctx context.Context, in *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request, opts ...grpc.CallOption) (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response, error) {
	out := new(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response)
	err := c.cc.Invoke(ctx, "/Authentication/UpdateAuthSessionWithMobileConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) UpdateAuthSessionWithSteamGuardCode(ctx context.Context, in *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request, opts ...grpc.CallOption) (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response, error) {
	out := new(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response)
	err := c.cc.Invoke(ctx, "/Authentication/UpdateAuthSessionWithSteamGuardCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GenerateAccessTokenForApp(ctx context.Context, in *CAuthentication_AccessToken_GenerateForApp_Request, opts ...grpc.CallOption) (*CAuthentication_AccessToken_GenerateForApp_Response, error) {
	out := new(CAuthentication_AccessToken_GenerateForApp_Response)
	err := c.cc.Invoke(ctx, "/Authentication/GenerateAccessTokenForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) EnumerateTokens(ctx context.Context, in *CAuthentication_RefreshToken_Enumerate_Request, opts ...grpc.CallOption) (*CAuthentication_RefreshToken_Enumerate_Response, error) {
	out := new(CAuthentication_RefreshToken_Enumerate_Response)
	err := c.cc.Invoke(ctx, "/Authentication/EnumerateTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetAuthSessionsForAccount(ctx context.Context, in *CAuthentication_GetAuthSessionsForAccount_Request, opts ...grpc.CallOption) (*CAuthentication_GetAuthSessionsForAccount_Response, error) {
	out := new(CAuthentication_GetAuthSessionsForAccount_Response)
	err := c.cc.Invoke(ctx, "/Authentication/GetAuthSessionsForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) MigrateMobileSession(ctx context.Context, in *CAuthentication_MigrateMobileSession_Request, opts ...grpc.CallOption) (*CAuthentication_MigrateMobileSession_Response, error) {
	out := new(CAuthentication_MigrateMobileSession_Response)
	err := c.cc.Invoke(ctx, "/Authentication/MigrateMobileSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RevokeToken(ctx context.Context, in *CAuthentication_Token_Revoke_Request, opts ...grpc.CallOption) (*CAuthentication_Token_Revoke_Response, error) {
	out := new(CAuthentication_Token_Revoke_Response)
	err := c.cc.Invoke(ctx, "/Authentication/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RevokeRefreshToken(ctx context.Context, in *CAuthentication_RefreshToken_Revoke_Request, opts ...grpc.CallOption) (*CAuthentication_RefreshToken_Revoke_Response, error) {
	out := new(CAuthentication_RefreshToken_Revoke_Response)
	err := c.cc.Invoke(ctx, "/Authentication/RevokeRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	GetPasswordRSAPublicKey(context.Context, *CAuthentication_GetPasswordRSAPublicKey_Request) (*CAuthentication_GetPasswordRSAPublicKey_Response, error)
	BeginAuthSessionViaQR(context.Context, *CAuthentication_BeginAuthSessionViaQR_Request) (*CAuthentication_BeginAuthSessionViaQR_Response, error)
	BeginAuthSessionViaCredentials(context.Context, *CAuthentication_BeginAuthSessionViaCredentials_Request) (*CAuthentication_BeginAuthSessionViaCredentials_Response, error)
	PollAuthSessionStatus(context.Context, *CAuthentication_PollAuthSessionStatus_Request) (*CAuthentication_PollAuthSessionStatus_Response, error)
	GetAuthSessionInfo(context.Context, *CAuthentication_GetAuthSessionInfo_Request) (*CAuthentication_GetAuthSessionInfo_Response, error)
	UpdateAuthSessionWithMobileConfirmation(context.Context, *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response, error)
	UpdateAuthSessionWithSteamGuardCode(context.Context, *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response, error)
	GenerateAccessTokenForApp(context.Context, *CAuthentication_AccessToken_GenerateForApp_Request) (*CAuthentication_AccessToken_GenerateForApp_Response, error)
	EnumerateTokens(context.Context, *CAuthentication_RefreshToken_Enumerate_Request) (*CAuthentication_RefreshToken_Enumerate_Response, error)
	GetAuthSessionsForAccount(context.Context, *CAuthentication_GetAuthSessionsForAccount_Request) (*CAuthentication_GetAuthSessionsForAccount_Response, error)
	MigrateMobileSession(context.Context, *CAuthentication_MigrateMobileSession_Request) (*CAuthentication_MigrateMobileSession_Response, error)
	RevokeToken(context.Context, *CAuthentication_Token_Revoke_Request) (*CAuthentication_Token_Revoke_Response, error)
	RevokeRefreshToken(context.Context, *CAuthentication_RefreshToken_Revoke_Request) (*CAuthentication_RefreshToken_Revoke_Response, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) GetPasswordRSAPublicKey(context.Context, *CAuthentication_GetPasswordRSAPublicKey_Request) (*CAuthentication_GetPasswordRSAPublicKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordRSAPublicKey not implemented")
}
func (UnimplementedAuthenticationServer) BeginAuthSessionViaQR(context.Context, *CAuthentication_BeginAuthSessionViaQR_Request) (*CAuthentication_BeginAuthSessionViaQR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginAuthSessionViaQR not implemented")
}
func (UnimplementedAuthenticationServer) BeginAuthSessionViaCredentials(context.Context, *CAuthentication_BeginAuthSessionViaCredentials_Request) (*CAuthentication_BeginAuthSessionViaCredentials_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginAuthSessionViaCredentials not implemented")
}
func (UnimplementedAuthenticationServer) PollAuthSessionStatus(context.Context, *CAuthentication_PollAuthSessionStatus_Request) (*CAuthentication_PollAuthSessionStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollAuthSessionStatus not implemented")
}
func (UnimplementedAuthenticationServer) GetAuthSessionInfo(context.Context, *CAuthentication_GetAuthSessionInfo_Request) (*CAuthentication_GetAuthSessionInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthSessionInfo not implemented")
}
func (UnimplementedAuthenticationServer) UpdateAuthSessionWithMobileConfirmation(context.Context, *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthSessionWithMobileConfirmation not implemented")
}
func (UnimplementedAuthenticationServer) UpdateAuthSessionWithSteamGuardCode(context.Context, *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthSessionWithSteamGuardCode not implemented")
}
func (UnimplementedAuthenticationServer) GenerateAccessTokenForApp(context.Context, *CAuthentication_AccessToken_GenerateForApp_Request) (*CAuthentication_AccessToken_GenerateForApp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessTokenForApp not implemented")
}
func (UnimplementedAuthenticationServer) EnumerateTokens(context.Context, *CAuthentication_RefreshToken_Enumerate_Request) (*CAuthentication_RefreshToken_Enumerate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateTokens not implemented")
}
func (UnimplementedAuthenticationServer) GetAuthSessionsForAccount(context.Context, *CAuthentication_GetAuthSessionsForAccount_Request) (*CAuthentication_GetAuthSessionsForAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthSessionsForAccount not implemented")
}
func (UnimplementedAuthenticationServer) MigrateMobileSession(context.Context, *CAuthentication_MigrateMobileSession_Request) (*CAuthentication_MigrateMobileSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateMobileSession not implemented")
}
func (UnimplementedAuthenticationServer) RevokeToken(context.Context, *CAuthentication_Token_Revoke_Request) (*CAuthentication_Token_Revoke_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedAuthenticationServer) RevokeRefreshToken(context.Context, *CAuthentication_RefreshToken_Revoke_Request) (*CAuthentication_RefreshToken_Revoke_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRefreshToken not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_GetPasswordRSAPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_GetPasswordRSAPublicKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetPasswordRSAPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GetPasswordRSAPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetPasswordRSAPublicKey(ctx, req.(*CAuthentication_GetPasswordRSAPublicKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_BeginAuthSessionViaQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_BeginAuthSessionViaQR_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).BeginAuthSessionViaQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/BeginAuthSessionViaQR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).BeginAuthSessionViaQR(ctx, req.(*CAuthentication_BeginAuthSessionViaQR_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_BeginAuthSessionViaCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_BeginAuthSessionViaCredentials_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).BeginAuthSessionViaCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/BeginAuthSessionViaCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).BeginAuthSessionViaCredentials(ctx, req.(*CAuthentication_BeginAuthSessionViaCredentials_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_PollAuthSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_PollAuthSessionStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).PollAuthSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/PollAuthSessionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).PollAuthSessionStatus(ctx, req.(*CAuthentication_PollAuthSessionStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetAuthSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_GetAuthSessionInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetAuthSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GetAuthSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetAuthSessionInfo(ctx, req.(*CAuthentication_GetAuthSessionInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_UpdateAuthSessionWithMobileConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).UpdateAuthSessionWithMobileConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/UpdateAuthSessionWithMobileConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).UpdateAuthSessionWithMobileConfirmation(ctx, req.(*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_UpdateAuthSessionWithSteamGuardCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).UpdateAuthSessionWithSteamGuardCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/UpdateAuthSessionWithSteamGuardCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).UpdateAuthSessionWithSteamGuardCode(ctx, req.(*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GenerateAccessTokenForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_AccessToken_GenerateForApp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GenerateAccessTokenForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GenerateAccessTokenForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GenerateAccessTokenForApp(ctx, req.(*CAuthentication_AccessToken_GenerateForApp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_EnumerateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_RefreshToken_Enumerate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).EnumerateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/EnumerateTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).EnumerateTokens(ctx, req.(*CAuthentication_RefreshToken_Enumerate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetAuthSessionsForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_GetAuthSessionsForAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetAuthSessionsForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GetAuthSessionsForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetAuthSessionsForAccount(ctx, req.(*CAuthentication_GetAuthSessionsForAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_MigrateMobileSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_MigrateMobileSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).MigrateMobileSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/MigrateMobileSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).MigrateMobileSession(ctx, req.(*CAuthentication_MigrateMobileSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_Token_Revoke_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RevokeToken(ctx, req.(*CAuthentication_Token_Revoke_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RevokeRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthentication_RefreshToken_Revoke_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RevokeRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/RevokeRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RevokeRefreshToken(ctx, req.(*CAuthentication_RefreshToken_Revoke_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPasswordRSAPublicKey",
			Handler:    _Authentication_GetPasswordRSAPublicKey_Handler,
		},
		{
			MethodName: "BeginAuthSessionViaQR",
			Handler:    _Authentication_BeginAuthSessionViaQR_Handler,
		},
		{
			MethodName: "BeginAuthSessionViaCredentials",
			Handler:    _Authentication_BeginAuthSessionViaCredentials_Handler,
		},
		{
			MethodName: "PollAuthSessionStatus",
			Handler:    _Authentication_PollAuthSessionStatus_Handler,
		},
		{
			MethodName: "GetAuthSessionInfo",
			Handler:    _Authentication_GetAuthSessionInfo_Handler,
		},
		{
			MethodName: "UpdateAuthSessionWithMobileConfirmation",
			Handler:    _Authentication_UpdateAuthSessionWithMobileConfirmation_Handler,
		},
		{
			MethodName: "UpdateAuthSessionWithSteamGuardCode",
			Handler:    _Authentication_UpdateAuthSessionWithSteamGuardCode_Handler,
		},
		{
			MethodName: "GenerateAccessTokenForApp",
			Handler:    _Authentication_GenerateAccessTokenForApp_Handler,
		},
		{
			MethodName: "EnumerateTokens",
			Handler:    _Authentication_EnumerateTokens_Handler,
		},
		{
			MethodName: "GetAuthSessionsForAccount",
			Handler:    _Authentication_GetAuthSessionsForAccount_Handler,
		},
		{
			MethodName: "MigrateMobileSession",
			Handler:    _Authentication_MigrateMobileSession_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _Authentication_RevokeToken_Handler,
		},
		{
			MethodName: "RevokeRefreshToken",
			Handler:    _Authentication_RevokeRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_auth.steamclient.proto",
}

// AuthenticationSupportClient is the client API for AuthenticationSupport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationSupportClient interface {
	QueryRefreshTokensByAccount(ctx context.Context, in *CAuthenticationSupport_QueryRefreshTokensByAccount_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response, error)
	QueryRefreshTokenByID(ctx context.Context, in *CAuthenticationSupport_QueryRefreshTokenByID_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_QueryRefreshTokenByID_Response, error)
	RevokeToken(ctx context.Context, in *CAuthenticationSupport_RevokeToken_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_RevokeToken_Response, error)
	GetTokenHistory(ctx context.Context, in *CAuthenticationSupport_GetTokenHistory_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_GetTokenHistory_Response, error)
}

type authenticationSupportClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationSupportClient(cc grpc.ClientConnInterface) AuthenticationSupportClient {
	return &authenticationSupportClient{cc}
}

func (c *authenticationSupportClient) QueryRefreshTokensByAccount(ctx context.Context, in *CAuthenticationSupport_QueryRefreshTokensByAccount_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response, error) {
	out := new(CAuthenticationSupport_QueryRefreshTokensByAccount_Response)
	err := c.cc.Invoke(ctx, "/AuthenticationSupport/QueryRefreshTokensByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationSupportClient) QueryRefreshTokenByID(ctx context.Context, in *CAuthenticationSupport_QueryRefreshTokenByID_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_QueryRefreshTokenByID_Response, error) {
	out := new(CAuthenticationSupport_QueryRefreshTokenByID_Response)
	err := c.cc.Invoke(ctx, "/AuthenticationSupport/QueryRefreshTokenByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationSupportClient) RevokeToken(ctx context.Context, in *CAuthenticationSupport_RevokeToken_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_RevokeToken_Response, error) {
	out := new(CAuthenticationSupport_RevokeToken_Response)
	err := c.cc.Invoke(ctx, "/AuthenticationSupport/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationSupportClient) GetTokenHistory(ctx context.Context, in *CAuthenticationSupport_GetTokenHistory_Request, opts ...grpc.CallOption) (*CAuthenticationSupport_GetTokenHistory_Response, error) {
	out := new(CAuthenticationSupport_GetTokenHistory_Response)
	err := c.cc.Invoke(ctx, "/AuthenticationSupport/GetTokenHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationSupportServer is the server API for AuthenticationSupport service.
// All implementations must embed UnimplementedAuthenticationSupportServer
// for forward compatibility
type AuthenticationSupportServer interface {
	QueryRefreshTokensByAccount(context.Context, *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response, error)
	QueryRefreshTokenByID(context.Context, *CAuthenticationSupport_QueryRefreshTokenByID_Request) (*CAuthenticationSupport_QueryRefreshTokenByID_Response, error)
	RevokeToken(context.Context, *CAuthenticationSupport_RevokeToken_Request) (*CAuthenticationSupport_RevokeToken_Response, error)
	GetTokenHistory(context.Context, *CAuthenticationSupport_GetTokenHistory_Request) (*CAuthenticationSupport_GetTokenHistory_Response, error)
	mustEmbedUnimplementedAuthenticationSupportServer()
}

// UnimplementedAuthenticationSupportServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationSupportServer struct {
}

func (UnimplementedAuthenticationSupportServer) QueryRefreshTokensByAccount(context.Context, *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshTokensByAccount not implemented")
}
func (UnimplementedAuthenticationSupportServer) QueryRefreshTokenByID(context.Context, *CAuthenticationSupport_QueryRefreshTokenByID_Request) (*CAuthenticationSupport_QueryRefreshTokenByID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshTokenByID not implemented")
}
func (UnimplementedAuthenticationSupportServer) RevokeToken(context.Context, *CAuthenticationSupport_RevokeToken_Request) (*CAuthenticationSupport_RevokeToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedAuthenticationSupportServer) GetTokenHistory(context.Context, *CAuthenticationSupport_GetTokenHistory_Request) (*CAuthenticationSupport_GetTokenHistory_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenHistory not implemented")
}
func (UnimplementedAuthenticationSupportServer) mustEmbedUnimplementedAuthenticationSupportServer() {}

// UnsafeAuthenticationSupportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationSupportServer will
// result in compilation errors.
type UnsafeAuthenticationSupportServer interface {
	mustEmbedUnimplementedAuthenticationSupportServer()
}

func RegisterAuthenticationSupportServer(s grpc.ServiceRegistrar, srv AuthenticationSupportServer) {
	s.RegisterService(&AuthenticationSupport_ServiceDesc, srv)
}

func _AuthenticationSupport_QueryRefreshTokensByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthenticationSupport_QueryRefreshTokensByAccount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSupportServer).QueryRefreshTokensByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSupport/QueryRefreshTokensByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSupportServer).QueryRefreshTokensByAccount(ctx, req.(*CAuthenticationSupport_QueryRefreshTokensByAccount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationSupport_QueryRefreshTokenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthenticationSupport_QueryRefreshTokenByID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSupportServer).QueryRefreshTokenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSupport/QueryRefreshTokenByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSupportServer).QueryRefreshTokenByID(ctx, req.(*CAuthenticationSupport_QueryRefreshTokenByID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationSupport_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthenticationSupport_RevokeToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSupportServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSupport/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSupportServer).RevokeToken(ctx, req.(*CAuthenticationSupport_RevokeToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationSupport_GetTokenHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAuthenticationSupport_GetTokenHistory_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSupportServer).GetTokenHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSupport/GetTokenHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSupportServer).GetTokenHistory(ctx, req.(*CAuthenticationSupport_GetTokenHistory_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationSupport_ServiceDesc is the grpc.ServiceDesc for AuthenticationSupport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationSupport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticationSupport",
	HandlerType: (*AuthenticationSupportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRefreshTokensByAccount",
			Handler:    _AuthenticationSupport_QueryRefreshTokensByAccount_Handler,
		},
		{
			MethodName: "QueryRefreshTokenByID",
			Handler:    _AuthenticationSupport_QueryRefreshTokenByID_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _AuthenticationSupport_RevokeToken_Handler,
		},
		{
			MethodName: "GetTokenHistory",
			Handler:    _AuthenticationSupport_GetTokenHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_auth.steamclient.proto",
}

// CloudGamingClient is the client API for CloudGaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudGamingClient interface {
	CreateNonce(ctx context.Context, in *CCloudGaming_CreateNonce_Request, opts ...grpc.CallOption) (*CCloudGaming_CreateNonce_Response, error)
	GetTimeRemaining(ctx context.Context, in *CCloudGaming_GetTimeRemaining_Request, opts ...grpc.CallOption) (*CCloudGaming_GetTimeRemaining_Response, error)
}

type cloudGamingClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudGamingClient(cc grpc.ClientConnInterface) CloudGamingClient {
	return &cloudGamingClient{cc}
}

func (c *cloudGamingClient) CreateNonce(ctx context.Context, in *CCloudGaming_CreateNonce_Request, opts ...grpc.CallOption) (*CCloudGaming_CreateNonce_Response, error) {
	out := new(CCloudGaming_CreateNonce_Response)
	err := c.cc.Invoke(ctx, "/CloudGaming/CreateNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudGamingClient) GetTimeRemaining(ctx context.Context, in *CCloudGaming_GetTimeRemaining_Request, opts ...grpc.CallOption) (*CCloudGaming_GetTimeRemaining_Response, error) {
	out := new(CCloudGaming_GetTimeRemaining_Response)
	err := c.cc.Invoke(ctx, "/CloudGaming/GetTimeRemaining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudGamingServer is the server API for CloudGaming service.
// All implementations must embed UnimplementedCloudGamingServer
// for forward compatibility
type CloudGamingServer interface {
	CreateNonce(context.Context, *CCloudGaming_CreateNonce_Request) (*CCloudGaming_CreateNonce_Response, error)
	GetTimeRemaining(context.Context, *CCloudGaming_GetTimeRemaining_Request) (*CCloudGaming_GetTimeRemaining_Response, error)
	mustEmbedUnimplementedCloudGamingServer()
}

// UnimplementedCloudGamingServer must be embedded to have forward compatible implementations.
type UnimplementedCloudGamingServer struct {
}

func (UnimplementedCloudGamingServer) CreateNonce(context.Context, *CCloudGaming_CreateNonce_Request) (*CCloudGaming_CreateNonce_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNonce not implemented")
}
func (UnimplementedCloudGamingServer) GetTimeRemaining(context.Context, *CCloudGaming_GetTimeRemaining_Request) (*CCloudGaming_GetTimeRemaining_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeRemaining not implemented")
}
func (UnimplementedCloudGamingServer) mustEmbedUnimplementedCloudGamingServer() {}

// UnsafeCloudGamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudGamingServer will
// result in compilation errors.
type UnsafeCloudGamingServer interface {
	mustEmbedUnimplementedCloudGamingServer()
}

func RegisterCloudGamingServer(s grpc.ServiceRegistrar, srv CloudGamingServer) {
	s.RegisterService(&CloudGaming_ServiceDesc, srv)
}

func _CloudGaming_CreateNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloudGaming_CreateNonce_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudGamingServer).CreateNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudGaming/CreateNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudGamingServer).CreateNonce(ctx, req.(*CCloudGaming_CreateNonce_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudGaming_GetTimeRemaining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloudGaming_GetTimeRemaining_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudGamingServer).GetTimeRemaining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudGaming/GetTimeRemaining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudGamingServer).GetTimeRemaining(ctx, req.(*CCloudGaming_GetTimeRemaining_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudGaming_ServiceDesc is the grpc.ServiceDesc for CloudGaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudGaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudGaming",
	HandlerType: (*CloudGamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNonce",
			Handler:    _CloudGaming_CreateNonce_Handler,
		},
		{
			MethodName: "GetTimeRemaining",
			Handler:    _CloudGaming_GetTimeRemaining_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_auth.steamclient.proto",
}
