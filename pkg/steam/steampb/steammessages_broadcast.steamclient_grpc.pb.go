// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_broadcast.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BroadcastClient is the client API for Broadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastClient interface {
	BeginBroadcastSession(ctx context.Context, in *CBroadcast_BeginBroadcastSession_Request, opts ...grpc.CallOption) (*CBroadcast_BeginBroadcastSession_Response, error)
	EndBroadcastSession(ctx context.Context, in *CBroadcast_EndBroadcastSession_Request, opts ...grpc.CallOption) (*CBroadcast_EndBroadcastSession_Response, error)
	StartBroadcastUpload(ctx context.Context, in *CBroadcast_StartBroadcastUpload_Request, opts ...grpc.CallOption) (*CBroadcast_StartBroadcastUpload_Response, error)
	NotifyBroadcastUploadStop(ctx context.Context, in *CBroadcast_NotifyBroadcastUploadStop_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	WatchBroadcast(ctx context.Context, in *CBroadcast_WatchBroadcast_Request, opts ...grpc.CallOption) (*CBroadcast_WatchBroadcast_Response, error)
	HeartbeatBroadcast(ctx context.Context, in *CBroadcast_HeartbeatBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	StopWatchingBroadcast(ctx context.Context, in *CBroadcast_StopWatchingBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetBroadcastStatus(ctx context.Context, in *CBroadcast_GetBroadcastStatus_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastStatus_Response, error)
	GetBroadcastThumbnail(ctx context.Context, in *CBroadcast_GetBroadcastThumbnail_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastThumbnail_Response, error)
	InviteToBroadcast(ctx context.Context, in *CBroadcast_InviteToBroadcast_Request, opts ...grpc.CallOption) (*CBroadcast_InviteToBroadcast_Response, error)
	SendBroadcastStateToServer(ctx context.Context, in *CBroadcast_SendBroadcastStateToServer_Request, opts ...grpc.CallOption) (*CBroadcast_SendBroadcastStateToServer_Response, error)
	NotifyBroadcastSessionHeartbeat(ctx context.Context, in *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetBroadcastChatInfo(ctx context.Context, in *CBroadcast_GetBroadcastChatInfo_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastChatInfo_Response, error)
	PostChatMessage(ctx context.Context, in *CBroadcast_PostChatMessage_Request, opts ...grpc.CallOption) (*CBroadcast_PostChatMessage_Response, error)
	UpdateChatMessageFlair(ctx context.Context, in *CBroadcast_UpdateChatMessageFlair_Request, opts ...grpc.CallOption) (*CBroadcast_UpdateChatMessageFlair_Response, error)
	MuteBroadcastChatUser(ctx context.Context, in *CBroadcast_MuteBroadcastChatUser_Request, opts ...grpc.CallOption) (*CBroadcast_MuteBroadcastChatUser_Response, error)
	RemoveUserChatText(ctx context.Context, in *CBroadcast_RemoveUserChatText_Request, opts ...grpc.CallOption) (*CBroadcast_RemoveUserChatText_Response, error)
	GetBroadcastChatUserNames(ctx context.Context, in *CBroadcast_GetBroadcastChatUserNames_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastChatUserNames_Response, error)
	StartBuildClip(ctx context.Context, in *CBroadcast_StartBuildClip_Request, opts ...grpc.CallOption) (*CBroadcast_StartBuildClip_Response, error)
	GetBuildClipStatus(ctx context.Context, in *CBroadcast_GetBuildClipStatus_Request, opts ...grpc.CallOption) (*CBroadcast_GetBuildClipStatus_Response, error)
	SetClipDetails(ctx context.Context, in *CBroadcast_SetClipDetails_Request, opts ...grpc.CallOption) (*CBroadcast_SetClipDetails_Response, error)
	GetClipDetails(ctx context.Context, in *CBroadcast_GetClipDetails_Request, opts ...grpc.CallOption) (*CBroadcast_GetClipDetails_Response, error)
	SetRTMPInfo(ctx context.Context, in *CBroadcast_SetRTMPInfo_Request, opts ...grpc.CallOption) (*CBroadcast_SetRTMPInfo_Response, error)
	GetRTMPInfo(ctx context.Context, in *CBroadcast_GetRTMPInfo_Request, opts ...grpc.CallOption) (*CBroadcast_GetRTMPInfo_Response, error)
	NotifyWebRTCHaveTURNServer(ctx context.Context, in *CBroadcast_WebRTCHaveTURNServer_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	WebRTCStartResult(ctx context.Context, in *CBroadcast_WebRTCStartResult_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCStartResult_Response, error)
	WebRTCStopped(ctx context.Context, in *CBroadcast_WebRTCStopped_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCStopped_Response, error)
	WebRTCSetAnswer(ctx context.Context, in *CBroadcast_WebRTCSetAnswer_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCSetAnswer_Response, error)
	WebRTCLookupTURNServer(ctx context.Context, in *CBroadcast_WebRTCLookupTURNServer_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCLookupTURNServer_Response, error)
	WebRTCAddHostCandidate(ctx context.Context, in *CBroadcast_WebRTCAddHostCandidate_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCAddHostCandidate_Response, error)
	WebRTCAddViewerCandidate(ctx context.Context, in *CBroadcast_WebRTCAddViewerCandidate_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCAddViewerCandidate_Response, error)
	WebRTCGetHostCandidates(ctx context.Context, in *CBroadcast_WebRTCGetHostCandidates_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCGetHostCandidates_Response, error)
	GetBroadcastUploadStats(ctx context.Context, in *CBroadcast_GetBroadcastUploadStats_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastUploadStats_Response, error)
	GetBroadcastViewerStats(ctx context.Context, in *CBroadcast_GetBroadcastViewerStats_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastViewerStats_Response, error)
}

type broadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastClient(cc grpc.ClientConnInterface) BroadcastClient {
	return &broadcastClient{cc}
}

func (c *broadcastClient) BeginBroadcastSession(ctx context.Context, in *CBroadcast_BeginBroadcastSession_Request, opts ...grpc.CallOption) (*CBroadcast_BeginBroadcastSession_Response, error) {
	out := new(CBroadcast_BeginBroadcastSession_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/BeginBroadcastSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) EndBroadcastSession(ctx context.Context, in *CBroadcast_EndBroadcastSession_Request, opts ...grpc.CallOption) (*CBroadcast_EndBroadcastSession_Response, error) {
	out := new(CBroadcast_EndBroadcastSession_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/EndBroadcastSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) StartBroadcastUpload(ctx context.Context, in *CBroadcast_StartBroadcastUpload_Request, opts ...grpc.CallOption) (*CBroadcast_StartBroadcastUpload_Response, error) {
	out := new(CBroadcast_StartBroadcastUpload_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/StartBroadcastUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) NotifyBroadcastUploadStop(ctx context.Context, in *CBroadcast_NotifyBroadcastUploadStop_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Broadcast/NotifyBroadcastUploadStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WatchBroadcast(ctx context.Context, in *CBroadcast_WatchBroadcast_Request, opts ...grpc.CallOption) (*CBroadcast_WatchBroadcast_Response, error) {
	out := new(CBroadcast_WatchBroadcast_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WatchBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) HeartbeatBroadcast(ctx context.Context, in *CBroadcast_HeartbeatBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Broadcast/HeartbeatBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) StopWatchingBroadcast(ctx context.Context, in *CBroadcast_StopWatchingBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Broadcast/StopWatchingBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastStatus(ctx context.Context, in *CBroadcast_GetBroadcastStatus_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastStatus_Response, error) {
	out := new(CBroadcast_GetBroadcastStatus_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastThumbnail(ctx context.Context, in *CBroadcast_GetBroadcastThumbnail_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastThumbnail_Response, error) {
	out := new(CBroadcast_GetBroadcastThumbnail_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) InviteToBroadcast(ctx context.Context, in *CBroadcast_InviteToBroadcast_Request, opts ...grpc.CallOption) (*CBroadcast_InviteToBroadcast_Response, error) {
	out := new(CBroadcast_InviteToBroadcast_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/InviteToBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) SendBroadcastStateToServer(ctx context.Context, in *CBroadcast_SendBroadcastStateToServer_Request, opts ...grpc.CallOption) (*CBroadcast_SendBroadcastStateToServer_Response, error) {
	out := new(CBroadcast_SendBroadcastStateToServer_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/SendBroadcastStateToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) NotifyBroadcastSessionHeartbeat(ctx context.Context, in *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Broadcast/NotifyBroadcastSessionHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastChatInfo(ctx context.Context, in *CBroadcast_GetBroadcastChatInfo_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastChatInfo_Response, error) {
	out := new(CBroadcast_GetBroadcastChatInfo_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) PostChatMessage(ctx context.Context, in *CBroadcast_PostChatMessage_Request, opts ...grpc.CallOption) (*CBroadcast_PostChatMessage_Response, error) {
	out := new(CBroadcast_PostChatMessage_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/PostChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) UpdateChatMessageFlair(ctx context.Context, in *CBroadcast_UpdateChatMessageFlair_Request, opts ...grpc.CallOption) (*CBroadcast_UpdateChatMessageFlair_Response, error) {
	out := new(CBroadcast_UpdateChatMessageFlair_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/UpdateChatMessageFlair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) MuteBroadcastChatUser(ctx context.Context, in *CBroadcast_MuteBroadcastChatUser_Request, opts ...grpc.CallOption) (*CBroadcast_MuteBroadcastChatUser_Response, error) {
	out := new(CBroadcast_MuteBroadcastChatUser_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/MuteBroadcastChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) RemoveUserChatText(ctx context.Context, in *CBroadcast_RemoveUserChatText_Request, opts ...grpc.CallOption) (*CBroadcast_RemoveUserChatText_Response, error) {
	out := new(CBroadcast_RemoveUserChatText_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/RemoveUserChatText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastChatUserNames(ctx context.Context, in *CBroadcast_GetBroadcastChatUserNames_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastChatUserNames_Response, error) {
	out := new(CBroadcast_GetBroadcastChatUserNames_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastChatUserNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) StartBuildClip(ctx context.Context, in *CBroadcast_StartBuildClip_Request, opts ...grpc.CallOption) (*CBroadcast_StartBuildClip_Response, error) {
	out := new(CBroadcast_StartBuildClip_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/StartBuildClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBuildClipStatus(ctx context.Context, in *CBroadcast_GetBuildClipStatus_Request, opts ...grpc.CallOption) (*CBroadcast_GetBuildClipStatus_Response, error) {
	out := new(CBroadcast_GetBuildClipStatus_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBuildClipStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) SetClipDetails(ctx context.Context, in *CBroadcast_SetClipDetails_Request, opts ...grpc.CallOption) (*CBroadcast_SetClipDetails_Response, error) {
	out := new(CBroadcast_SetClipDetails_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/SetClipDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetClipDetails(ctx context.Context, in *CBroadcast_GetClipDetails_Request, opts ...grpc.CallOption) (*CBroadcast_GetClipDetails_Response, error) {
	out := new(CBroadcast_GetClipDetails_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetClipDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) SetRTMPInfo(ctx context.Context, in *CBroadcast_SetRTMPInfo_Request, opts ...grpc.CallOption) (*CBroadcast_SetRTMPInfo_Response, error) {
	out := new(CBroadcast_SetRTMPInfo_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/SetRTMPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetRTMPInfo(ctx context.Context, in *CBroadcast_GetRTMPInfo_Request, opts ...grpc.CallOption) (*CBroadcast_GetRTMPInfo_Response, error) {
	out := new(CBroadcast_GetRTMPInfo_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetRTMPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) NotifyWebRTCHaveTURNServer(ctx context.Context, in *CBroadcast_WebRTCHaveTURNServer_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Broadcast/NotifyWebRTCHaveTURNServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCStartResult(ctx context.Context, in *CBroadcast_WebRTCStartResult_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCStartResult_Response, error) {
	out := new(CBroadcast_WebRTCStartResult_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCStartResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCStopped(ctx context.Context, in *CBroadcast_WebRTCStopped_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCStopped_Response, error) {
	out := new(CBroadcast_WebRTCStopped_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCSetAnswer(ctx context.Context, in *CBroadcast_WebRTCSetAnswer_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCSetAnswer_Response, error) {
	out := new(CBroadcast_WebRTCSetAnswer_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCSetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCLookupTURNServer(ctx context.Context, in *CBroadcast_WebRTCLookupTURNServer_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCLookupTURNServer_Response, error) {
	out := new(CBroadcast_WebRTCLookupTURNServer_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCLookupTURNServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCAddHostCandidate(ctx context.Context, in *CBroadcast_WebRTCAddHostCandidate_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCAddHostCandidate_Response, error) {
	out := new(CBroadcast_WebRTCAddHostCandidate_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCAddHostCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCAddViewerCandidate(ctx context.Context, in *CBroadcast_WebRTCAddViewerCandidate_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCAddViewerCandidate_Response, error) {
	out := new(CBroadcast_WebRTCAddViewerCandidate_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCAddViewerCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) WebRTCGetHostCandidates(ctx context.Context, in *CBroadcast_WebRTCGetHostCandidates_Request, opts ...grpc.CallOption) (*CBroadcast_WebRTCGetHostCandidates_Response, error) {
	out := new(CBroadcast_WebRTCGetHostCandidates_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/WebRTCGetHostCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastUploadStats(ctx context.Context, in *CBroadcast_GetBroadcastUploadStats_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastUploadStats_Response, error) {
	out := new(CBroadcast_GetBroadcastUploadStats_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastUploadStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) GetBroadcastViewerStats(ctx context.Context, in *CBroadcast_GetBroadcastViewerStats_Request, opts ...grpc.CallOption) (*CBroadcast_GetBroadcastViewerStats_Response, error) {
	out := new(CBroadcast_GetBroadcastViewerStats_Response)
	err := c.cc.Invoke(ctx, "/Broadcast/GetBroadcastViewerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServer is the server API for Broadcast service.
// All implementations must embed UnimplementedBroadcastServer
// for forward compatibility
type BroadcastServer interface {
	BeginBroadcastSession(context.Context, *CBroadcast_BeginBroadcastSession_Request) (*CBroadcast_BeginBroadcastSession_Response, error)
	EndBroadcastSession(context.Context, *CBroadcast_EndBroadcastSession_Request) (*CBroadcast_EndBroadcastSession_Response, error)
	StartBroadcastUpload(context.Context, *CBroadcast_StartBroadcastUpload_Request) (*CBroadcast_StartBroadcastUpload_Response, error)
	NotifyBroadcastUploadStop(context.Context, *CBroadcast_NotifyBroadcastUploadStop_Notification) (*NoResponse, error)
	WatchBroadcast(context.Context, *CBroadcast_WatchBroadcast_Request) (*CBroadcast_WatchBroadcast_Response, error)
	HeartbeatBroadcast(context.Context, *CBroadcast_HeartbeatBroadcast_Notification) (*NoResponse, error)
	StopWatchingBroadcast(context.Context, *CBroadcast_StopWatchingBroadcast_Notification) (*NoResponse, error)
	GetBroadcastStatus(context.Context, *CBroadcast_GetBroadcastStatus_Request) (*CBroadcast_GetBroadcastStatus_Response, error)
	GetBroadcastThumbnail(context.Context, *CBroadcast_GetBroadcastThumbnail_Request) (*CBroadcast_GetBroadcastThumbnail_Response, error)
	InviteToBroadcast(context.Context, *CBroadcast_InviteToBroadcast_Request) (*CBroadcast_InviteToBroadcast_Response, error)
	SendBroadcastStateToServer(context.Context, *CBroadcast_SendBroadcastStateToServer_Request) (*CBroadcast_SendBroadcastStateToServer_Response, error)
	NotifyBroadcastSessionHeartbeat(context.Context, *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) (*NoResponse, error)
	GetBroadcastChatInfo(context.Context, *CBroadcast_GetBroadcastChatInfo_Request) (*CBroadcast_GetBroadcastChatInfo_Response, error)
	PostChatMessage(context.Context, *CBroadcast_PostChatMessage_Request) (*CBroadcast_PostChatMessage_Response, error)
	UpdateChatMessageFlair(context.Context, *CBroadcast_UpdateChatMessageFlair_Request) (*CBroadcast_UpdateChatMessageFlair_Response, error)
	MuteBroadcastChatUser(context.Context, *CBroadcast_MuteBroadcastChatUser_Request) (*CBroadcast_MuteBroadcastChatUser_Response, error)
	RemoveUserChatText(context.Context, *CBroadcast_RemoveUserChatText_Request) (*CBroadcast_RemoveUserChatText_Response, error)
	GetBroadcastChatUserNames(context.Context, *CBroadcast_GetBroadcastChatUserNames_Request) (*CBroadcast_GetBroadcastChatUserNames_Response, error)
	StartBuildClip(context.Context, *CBroadcast_StartBuildClip_Request) (*CBroadcast_StartBuildClip_Response, error)
	GetBuildClipStatus(context.Context, *CBroadcast_GetBuildClipStatus_Request) (*CBroadcast_GetBuildClipStatus_Response, error)
	SetClipDetails(context.Context, *CBroadcast_SetClipDetails_Request) (*CBroadcast_SetClipDetails_Response, error)
	GetClipDetails(context.Context, *CBroadcast_GetClipDetails_Request) (*CBroadcast_GetClipDetails_Response, error)
	SetRTMPInfo(context.Context, *CBroadcast_SetRTMPInfo_Request) (*CBroadcast_SetRTMPInfo_Response, error)
	GetRTMPInfo(context.Context, *CBroadcast_GetRTMPInfo_Request) (*CBroadcast_GetRTMPInfo_Response, error)
	NotifyWebRTCHaveTURNServer(context.Context, *CBroadcast_WebRTCHaveTURNServer_Notification) (*NoResponse, error)
	WebRTCStartResult(context.Context, *CBroadcast_WebRTCStartResult_Request) (*CBroadcast_WebRTCStartResult_Response, error)
	WebRTCStopped(context.Context, *CBroadcast_WebRTCStopped_Request) (*CBroadcast_WebRTCStopped_Response, error)
	WebRTCSetAnswer(context.Context, *CBroadcast_WebRTCSetAnswer_Request) (*CBroadcast_WebRTCSetAnswer_Response, error)
	WebRTCLookupTURNServer(context.Context, *CBroadcast_WebRTCLookupTURNServer_Request) (*CBroadcast_WebRTCLookupTURNServer_Response, error)
	WebRTCAddHostCandidate(context.Context, *CBroadcast_WebRTCAddHostCandidate_Request) (*CBroadcast_WebRTCAddHostCandidate_Response, error)
	WebRTCAddViewerCandidate(context.Context, *CBroadcast_WebRTCAddViewerCandidate_Request) (*CBroadcast_WebRTCAddViewerCandidate_Response, error)
	WebRTCGetHostCandidates(context.Context, *CBroadcast_WebRTCGetHostCandidates_Request) (*CBroadcast_WebRTCGetHostCandidates_Response, error)
	GetBroadcastUploadStats(context.Context, *CBroadcast_GetBroadcastUploadStats_Request) (*CBroadcast_GetBroadcastUploadStats_Response, error)
	GetBroadcastViewerStats(context.Context, *CBroadcast_GetBroadcastViewerStats_Request) (*CBroadcast_GetBroadcastViewerStats_Response, error)
	mustEmbedUnimplementedBroadcastServer()
}

// UnimplementedBroadcastServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServer struct {
}

func (UnimplementedBroadcastServer) BeginBroadcastSession(context.Context, *CBroadcast_BeginBroadcastSession_Request) (*CBroadcast_BeginBroadcastSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginBroadcastSession not implemented")
}
func (UnimplementedBroadcastServer) EndBroadcastSession(context.Context, *CBroadcast_EndBroadcastSession_Request) (*CBroadcast_EndBroadcastSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBroadcastSession not implemented")
}
func (UnimplementedBroadcastServer) StartBroadcastUpload(context.Context, *CBroadcast_StartBroadcastUpload_Request) (*CBroadcast_StartBroadcastUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBroadcastUpload not implemented")
}
func (UnimplementedBroadcastServer) NotifyBroadcastUploadStop(context.Context, *CBroadcast_NotifyBroadcastUploadStop_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastUploadStop not implemented")
}
func (UnimplementedBroadcastServer) WatchBroadcast(context.Context, *CBroadcast_WatchBroadcast_Request) (*CBroadcast_WatchBroadcast_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchBroadcast not implemented")
}
func (UnimplementedBroadcastServer) HeartbeatBroadcast(context.Context, *CBroadcast_HeartbeatBroadcast_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatBroadcast not implemented")
}
func (UnimplementedBroadcastServer) StopWatchingBroadcast(context.Context, *CBroadcast_StopWatchingBroadcast_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatchingBroadcast not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastStatus(context.Context, *CBroadcast_GetBroadcastStatus_Request) (*CBroadcast_GetBroadcastStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastStatus not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastThumbnail(context.Context, *CBroadcast_GetBroadcastThumbnail_Request) (*CBroadcast_GetBroadcastThumbnail_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastThumbnail not implemented")
}
func (UnimplementedBroadcastServer) InviteToBroadcast(context.Context, *CBroadcast_InviteToBroadcast_Request) (*CBroadcast_InviteToBroadcast_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToBroadcast not implemented")
}
func (UnimplementedBroadcastServer) SendBroadcastStateToServer(context.Context, *CBroadcast_SendBroadcastStateToServer_Request) (*CBroadcast_SendBroadcastStateToServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBroadcastStateToServer not implemented")
}
func (UnimplementedBroadcastServer) NotifyBroadcastSessionHeartbeat(context.Context, *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastSessionHeartbeat not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastChatInfo(context.Context, *CBroadcast_GetBroadcastChatInfo_Request) (*CBroadcast_GetBroadcastChatInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChatInfo not implemented")
}
func (UnimplementedBroadcastServer) PostChatMessage(context.Context, *CBroadcast_PostChatMessage_Request) (*CBroadcast_PostChatMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatMessage not implemented")
}
func (UnimplementedBroadcastServer) UpdateChatMessageFlair(context.Context, *CBroadcast_UpdateChatMessageFlair_Request) (*CBroadcast_UpdateChatMessageFlair_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatMessageFlair not implemented")
}
func (UnimplementedBroadcastServer) MuteBroadcastChatUser(context.Context, *CBroadcast_MuteBroadcastChatUser_Request) (*CBroadcast_MuteBroadcastChatUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteBroadcastChatUser not implemented")
}
func (UnimplementedBroadcastServer) RemoveUserChatText(context.Context, *CBroadcast_RemoveUserChatText_Request) (*CBroadcast_RemoveUserChatText_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserChatText not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastChatUserNames(context.Context, *CBroadcast_GetBroadcastChatUserNames_Request) (*CBroadcast_GetBroadcastChatUserNames_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChatUserNames not implemented")
}
func (UnimplementedBroadcastServer) StartBuildClip(context.Context, *CBroadcast_StartBuildClip_Request) (*CBroadcast_StartBuildClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBuildClip not implemented")
}
func (UnimplementedBroadcastServer) GetBuildClipStatus(context.Context, *CBroadcast_GetBuildClipStatus_Request) (*CBroadcast_GetBuildClipStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildClipStatus not implemented")
}
func (UnimplementedBroadcastServer) SetClipDetails(context.Context, *CBroadcast_SetClipDetails_Request) (*CBroadcast_SetClipDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClipDetails not implemented")
}
func (UnimplementedBroadcastServer) GetClipDetails(context.Context, *CBroadcast_GetClipDetails_Request) (*CBroadcast_GetClipDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClipDetails not implemented")
}
func (UnimplementedBroadcastServer) SetRTMPInfo(context.Context, *CBroadcast_SetRTMPInfo_Request) (*CBroadcast_SetRTMPInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRTMPInfo not implemented")
}
func (UnimplementedBroadcastServer) GetRTMPInfo(context.Context, *CBroadcast_GetRTMPInfo_Request) (*CBroadcast_GetRTMPInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRTMPInfo not implemented")
}
func (UnimplementedBroadcastServer) NotifyWebRTCHaveTURNServer(context.Context, *CBroadcast_WebRTCHaveTURNServer_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWebRTCHaveTURNServer not implemented")
}
func (UnimplementedBroadcastServer) WebRTCStartResult(context.Context, *CBroadcast_WebRTCStartResult_Request) (*CBroadcast_WebRTCStartResult_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCStartResult not implemented")
}
func (UnimplementedBroadcastServer) WebRTCStopped(context.Context, *CBroadcast_WebRTCStopped_Request) (*CBroadcast_WebRTCStopped_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCStopped not implemented")
}
func (UnimplementedBroadcastServer) WebRTCSetAnswer(context.Context, *CBroadcast_WebRTCSetAnswer_Request) (*CBroadcast_WebRTCSetAnswer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCSetAnswer not implemented")
}
func (UnimplementedBroadcastServer) WebRTCLookupTURNServer(context.Context, *CBroadcast_WebRTCLookupTURNServer_Request) (*CBroadcast_WebRTCLookupTURNServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCLookupTURNServer not implemented")
}
func (UnimplementedBroadcastServer) WebRTCAddHostCandidate(context.Context, *CBroadcast_WebRTCAddHostCandidate_Request) (*CBroadcast_WebRTCAddHostCandidate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCAddHostCandidate not implemented")
}
func (UnimplementedBroadcastServer) WebRTCAddViewerCandidate(context.Context, *CBroadcast_WebRTCAddViewerCandidate_Request) (*CBroadcast_WebRTCAddViewerCandidate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCAddViewerCandidate not implemented")
}
func (UnimplementedBroadcastServer) WebRTCGetHostCandidates(context.Context, *CBroadcast_WebRTCGetHostCandidates_Request) (*CBroadcast_WebRTCGetHostCandidates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRTCGetHostCandidates not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastUploadStats(context.Context, *CBroadcast_GetBroadcastUploadStats_Request) (*CBroadcast_GetBroadcastUploadStats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastUploadStats not implemented")
}
func (UnimplementedBroadcastServer) GetBroadcastViewerStats(context.Context, *CBroadcast_GetBroadcastViewerStats_Request) (*CBroadcast_GetBroadcastViewerStats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastViewerStats not implemented")
}
func (UnimplementedBroadcastServer) mustEmbedUnimplementedBroadcastServer() {}

// UnsafeBroadcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServer will
// result in compilation errors.
type UnsafeBroadcastServer interface {
	mustEmbedUnimplementedBroadcastServer()
}

func RegisterBroadcastServer(s grpc.ServiceRegistrar, srv BroadcastServer) {
	s.RegisterService(&Broadcast_ServiceDesc, srv)
}

func _Broadcast_BeginBroadcastSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_BeginBroadcastSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).BeginBroadcastSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/BeginBroadcastSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).BeginBroadcastSession(ctx, req.(*CBroadcast_BeginBroadcastSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_EndBroadcastSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_EndBroadcastSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).EndBroadcastSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/EndBroadcastSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).EndBroadcastSession(ctx, req.(*CBroadcast_EndBroadcastSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_StartBroadcastUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_StartBroadcastUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).StartBroadcastUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/StartBroadcastUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).StartBroadcastUpload(ctx, req.(*CBroadcast_StartBroadcastUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_NotifyBroadcastUploadStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_NotifyBroadcastUploadStop_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).NotifyBroadcastUploadStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/NotifyBroadcastUploadStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).NotifyBroadcastUploadStop(ctx, req.(*CBroadcast_NotifyBroadcastUploadStop_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WatchBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WatchBroadcast_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WatchBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WatchBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WatchBroadcast(ctx, req.(*CBroadcast_WatchBroadcast_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_HeartbeatBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_HeartbeatBroadcast_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).HeartbeatBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/HeartbeatBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).HeartbeatBroadcast(ctx, req.(*CBroadcast_HeartbeatBroadcast_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_StopWatchingBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_StopWatchingBroadcast_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).StopWatchingBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/StopWatchingBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).StopWatchingBroadcast(ctx, req.(*CBroadcast_StopWatchingBroadcast_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastStatus(ctx, req.(*CBroadcast_GetBroadcastStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastThumbnail_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastThumbnail(ctx, req.(*CBroadcast_GetBroadcastThumbnail_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_InviteToBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_InviteToBroadcast_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).InviteToBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/InviteToBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).InviteToBroadcast(ctx, req.(*CBroadcast_InviteToBroadcast_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_SendBroadcastStateToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_SendBroadcastStateToServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).SendBroadcastStateToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/SendBroadcastStateToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).SendBroadcastStateToServer(ctx, req.(*CBroadcast_SendBroadcastStateToServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_NotifyBroadcastSessionHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).NotifyBroadcastSessionHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/NotifyBroadcastSessionHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).NotifyBroadcastSessionHeartbeat(ctx, req.(*CBroadcast_NotifyBroadcastSessionHeartbeat_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastChatInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastChatInfo(ctx, req.(*CBroadcast_GetBroadcastChatInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_PostChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_PostChatMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).PostChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/PostChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).PostChatMessage(ctx, req.(*CBroadcast_PostChatMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_UpdateChatMessageFlair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_UpdateChatMessageFlair_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).UpdateChatMessageFlair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/UpdateChatMessageFlair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).UpdateChatMessageFlair(ctx, req.(*CBroadcast_UpdateChatMessageFlair_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_MuteBroadcastChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_MuteBroadcastChatUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).MuteBroadcastChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/MuteBroadcastChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).MuteBroadcastChatUser(ctx, req.(*CBroadcast_MuteBroadcastChatUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_RemoveUserChatText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_RemoveUserChatText_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).RemoveUserChatText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/RemoveUserChatText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).RemoveUserChatText(ctx, req.(*CBroadcast_RemoveUserChatText_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastChatUserNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastChatUserNames_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastChatUserNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastChatUserNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastChatUserNames(ctx, req.(*CBroadcast_GetBroadcastChatUserNames_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_StartBuildClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_StartBuildClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).StartBuildClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/StartBuildClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).StartBuildClip(ctx, req.(*CBroadcast_StartBuildClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBuildClipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBuildClipStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBuildClipStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBuildClipStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBuildClipStatus(ctx, req.(*CBroadcast_GetBuildClipStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_SetClipDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_SetClipDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).SetClipDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/SetClipDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).SetClipDetails(ctx, req.(*CBroadcast_SetClipDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetClipDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetClipDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetClipDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetClipDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetClipDetails(ctx, req.(*CBroadcast_GetClipDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_SetRTMPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_SetRTMPInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).SetRTMPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/SetRTMPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).SetRTMPInfo(ctx, req.(*CBroadcast_SetRTMPInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetRTMPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetRTMPInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetRTMPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetRTMPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetRTMPInfo(ctx, req.(*CBroadcast_GetRTMPInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_NotifyWebRTCHaveTURNServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCHaveTURNServer_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).NotifyWebRTCHaveTURNServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/NotifyWebRTCHaveTURNServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).NotifyWebRTCHaveTURNServer(ctx, req.(*CBroadcast_WebRTCHaveTURNServer_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCStartResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCStartResult_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCStartResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCStartResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCStartResult(ctx, req.(*CBroadcast_WebRTCStartResult_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCStopped_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCStopped(ctx, req.(*CBroadcast_WebRTCStopped_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCSetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCSetAnswer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCSetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCSetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCSetAnswer(ctx, req.(*CBroadcast_WebRTCSetAnswer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCLookupTURNServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCLookupTURNServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCLookupTURNServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCLookupTURNServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCLookupTURNServer(ctx, req.(*CBroadcast_WebRTCLookupTURNServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCAddHostCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCAddHostCandidate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCAddHostCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCAddHostCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCAddHostCandidate(ctx, req.(*CBroadcast_WebRTCAddHostCandidate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCAddViewerCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCAddViewerCandidate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCAddViewerCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCAddViewerCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCAddViewerCandidate(ctx, req.(*CBroadcast_WebRTCAddViewerCandidate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_WebRTCGetHostCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCGetHostCandidates_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).WebRTCGetHostCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/WebRTCGetHostCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).WebRTCGetHostCandidates(ctx, req.(*CBroadcast_WebRTCGetHostCandidates_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastUploadStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastUploadStats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastUploadStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastUploadStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastUploadStats(ctx, req.(*CBroadcast_GetBroadcastUploadStats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_GetBroadcastViewerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_GetBroadcastViewerStats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).GetBroadcastViewerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Broadcast/GetBroadcastViewerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).GetBroadcastViewerStats(ctx, req.(*CBroadcast_GetBroadcastViewerStats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Broadcast_ServiceDesc is the grpc.ServiceDesc for Broadcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Broadcast",
	HandlerType: (*BroadcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginBroadcastSession",
			Handler:    _Broadcast_BeginBroadcastSession_Handler,
		},
		{
			MethodName: "EndBroadcastSession",
			Handler:    _Broadcast_EndBroadcastSession_Handler,
		},
		{
			MethodName: "StartBroadcastUpload",
			Handler:    _Broadcast_StartBroadcastUpload_Handler,
		},
		{
			MethodName: "NotifyBroadcastUploadStop",
			Handler:    _Broadcast_NotifyBroadcastUploadStop_Handler,
		},
		{
			MethodName: "WatchBroadcast",
			Handler:    _Broadcast_WatchBroadcast_Handler,
		},
		{
			MethodName: "HeartbeatBroadcast",
			Handler:    _Broadcast_HeartbeatBroadcast_Handler,
		},
		{
			MethodName: "StopWatchingBroadcast",
			Handler:    _Broadcast_StopWatchingBroadcast_Handler,
		},
		{
			MethodName: "GetBroadcastStatus",
			Handler:    _Broadcast_GetBroadcastStatus_Handler,
		},
		{
			MethodName: "GetBroadcastThumbnail",
			Handler:    _Broadcast_GetBroadcastThumbnail_Handler,
		},
		{
			MethodName: "InviteToBroadcast",
			Handler:    _Broadcast_InviteToBroadcast_Handler,
		},
		{
			MethodName: "SendBroadcastStateToServer",
			Handler:    _Broadcast_SendBroadcastStateToServer_Handler,
		},
		{
			MethodName: "NotifyBroadcastSessionHeartbeat",
			Handler:    _Broadcast_NotifyBroadcastSessionHeartbeat_Handler,
		},
		{
			MethodName: "GetBroadcastChatInfo",
			Handler:    _Broadcast_GetBroadcastChatInfo_Handler,
		},
		{
			MethodName: "PostChatMessage",
			Handler:    _Broadcast_PostChatMessage_Handler,
		},
		{
			MethodName: "UpdateChatMessageFlair",
			Handler:    _Broadcast_UpdateChatMessageFlair_Handler,
		},
		{
			MethodName: "MuteBroadcastChatUser",
			Handler:    _Broadcast_MuteBroadcastChatUser_Handler,
		},
		{
			MethodName: "RemoveUserChatText",
			Handler:    _Broadcast_RemoveUserChatText_Handler,
		},
		{
			MethodName: "GetBroadcastChatUserNames",
			Handler:    _Broadcast_GetBroadcastChatUserNames_Handler,
		},
		{
			MethodName: "StartBuildClip",
			Handler:    _Broadcast_StartBuildClip_Handler,
		},
		{
			MethodName: "GetBuildClipStatus",
			Handler:    _Broadcast_GetBuildClipStatus_Handler,
		},
		{
			MethodName: "SetClipDetails",
			Handler:    _Broadcast_SetClipDetails_Handler,
		},
		{
			MethodName: "GetClipDetails",
			Handler:    _Broadcast_GetClipDetails_Handler,
		},
		{
			MethodName: "SetRTMPInfo",
			Handler:    _Broadcast_SetRTMPInfo_Handler,
		},
		{
			MethodName: "GetRTMPInfo",
			Handler:    _Broadcast_GetRTMPInfo_Handler,
		},
		{
			MethodName: "NotifyWebRTCHaveTURNServer",
			Handler:    _Broadcast_NotifyWebRTCHaveTURNServer_Handler,
		},
		{
			MethodName: "WebRTCStartResult",
			Handler:    _Broadcast_WebRTCStartResult_Handler,
		},
		{
			MethodName: "WebRTCStopped",
			Handler:    _Broadcast_WebRTCStopped_Handler,
		},
		{
			MethodName: "WebRTCSetAnswer",
			Handler:    _Broadcast_WebRTCSetAnswer_Handler,
		},
		{
			MethodName: "WebRTCLookupTURNServer",
			Handler:    _Broadcast_WebRTCLookupTURNServer_Handler,
		},
		{
			MethodName: "WebRTCAddHostCandidate",
			Handler:    _Broadcast_WebRTCAddHostCandidate_Handler,
		},
		{
			MethodName: "WebRTCAddViewerCandidate",
			Handler:    _Broadcast_WebRTCAddViewerCandidate_Handler,
		},
		{
			MethodName: "WebRTCGetHostCandidates",
			Handler:    _Broadcast_WebRTCGetHostCandidates_Handler,
		},
		{
			MethodName: "GetBroadcastUploadStats",
			Handler:    _Broadcast_GetBroadcastUploadStats_Handler,
		},
		{
			MethodName: "GetBroadcastViewerStats",
			Handler:    _Broadcast_GetBroadcastViewerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_broadcast.steamclient.proto",
}

// BroadcastClientClient is the client API for BroadcastClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastClientClient interface {
	NotifyBroadcastViewerState(ctx context.Context, in *CBroadcast_BroadcastViewerState_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyWaitingBroadcastViewer(ctx context.Context, in *CBroadcast_WaitingBroadcastViewer_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyBroadcastUploadStarted(ctx context.Context, in *CBroadcast_BroadcastUploadStarted_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyStopBroadcastUpload(ctx context.Context, in *CBroadcast_StopBroadcastUpload_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifySessionClosed(ctx context.Context, in *CBroadcast_SessionClosed_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyViewerBroadcastInvite(ctx context.Context, in *CBroadcast_ViewerBroadcastInvite_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyBroadcastStatus(ctx context.Context, in *CBroadcast_BroadcastStatus_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyBroadcastChannelLive(ctx context.Context, in *CBroadcast_BroadcastChannelLive_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SendThumbnailToRelay(ctx context.Context, in *CBroadcast_SendThumbnailToRelay_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyWebRTCNeedTURNServer(ctx context.Context, in *CBroadcast_WebRTCNeedTURNServer_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyWebRTCStart(ctx context.Context, in *CBroadcast_WebRTCStart_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyWebRTCSetAnswer(ctx context.Context, in *CBroadcast_WebRTCSetAnswer_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyWebRTCAddViewerCandidate(ctx context.Context, in *CBroadcast_WebRTCAddViewerCandidate_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type broadcastClientClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastClientClient(cc grpc.ClientConnInterface) BroadcastClientClient {
	return &broadcastClientClient{cc}
}

func (c *broadcastClientClient) NotifyBroadcastViewerState(ctx context.Context, in *CBroadcast_BroadcastViewerState_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyBroadcastViewerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyWaitingBroadcastViewer(ctx context.Context, in *CBroadcast_WaitingBroadcastViewer_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyWaitingBroadcastViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyBroadcastUploadStarted(ctx context.Context, in *CBroadcast_BroadcastUploadStarted_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyBroadcastUploadStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyStopBroadcastUpload(ctx context.Context, in *CBroadcast_StopBroadcastUpload_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyStopBroadcastUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifySessionClosed(ctx context.Context, in *CBroadcast_SessionClosed_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifySessionClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyViewerBroadcastInvite(ctx context.Context, in *CBroadcast_ViewerBroadcastInvite_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyViewerBroadcastInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyBroadcastStatus(ctx context.Context, in *CBroadcast_BroadcastStatus_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyBroadcastStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyBroadcastChannelLive(ctx context.Context, in *CBroadcast_BroadcastChannelLive_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyBroadcastChannelLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) SendThumbnailToRelay(ctx context.Context, in *CBroadcast_SendThumbnailToRelay_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/SendThumbnailToRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyWebRTCNeedTURNServer(ctx context.Context, in *CBroadcast_WebRTCNeedTURNServer_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyWebRTCNeedTURNServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyWebRTCStart(ctx context.Context, in *CBroadcast_WebRTCStart_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyWebRTCStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyWebRTCSetAnswer(ctx context.Context, in *CBroadcast_WebRTCSetAnswer_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyWebRTCSetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClientClient) NotifyWebRTCAddViewerCandidate(ctx context.Context, in *CBroadcast_WebRTCAddViewerCandidate_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/BroadcastClient/NotifyWebRTCAddViewerCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastClientServer is the server API for BroadcastClient service.
// All implementations must embed UnimplementedBroadcastClientServer
// for forward compatibility
type BroadcastClientServer interface {
	NotifyBroadcastViewerState(context.Context, *CBroadcast_BroadcastViewerState_Notification) (*NoResponse, error)
	NotifyWaitingBroadcastViewer(context.Context, *CBroadcast_WaitingBroadcastViewer_Notification) (*NoResponse, error)
	NotifyBroadcastUploadStarted(context.Context, *CBroadcast_BroadcastUploadStarted_Notification) (*NoResponse, error)
	NotifyStopBroadcastUpload(context.Context, *CBroadcast_StopBroadcastUpload_Notification) (*NoResponse, error)
	NotifySessionClosed(context.Context, *CBroadcast_SessionClosed_Notification) (*NoResponse, error)
	NotifyViewerBroadcastInvite(context.Context, *CBroadcast_ViewerBroadcastInvite_Notification) (*NoResponse, error)
	NotifyBroadcastStatus(context.Context, *CBroadcast_BroadcastStatus_Notification) (*NoResponse, error)
	NotifyBroadcastChannelLive(context.Context, *CBroadcast_BroadcastChannelLive_Notification) (*NoResponse, error)
	SendThumbnailToRelay(context.Context, *CBroadcast_SendThumbnailToRelay_Notification) (*NoResponse, error)
	NotifyWebRTCNeedTURNServer(context.Context, *CBroadcast_WebRTCNeedTURNServer_Notification) (*NoResponse, error)
	NotifyWebRTCStart(context.Context, *CBroadcast_WebRTCStart_Notification) (*NoResponse, error)
	NotifyWebRTCSetAnswer(context.Context, *CBroadcast_WebRTCSetAnswer_Notification) (*NoResponse, error)
	NotifyWebRTCAddViewerCandidate(context.Context, *CBroadcast_WebRTCAddViewerCandidate_Notification) (*NoResponse, error)
	mustEmbedUnimplementedBroadcastClientServer()
}

// UnimplementedBroadcastClientServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastClientServer struct {
}

func (UnimplementedBroadcastClientServer) NotifyBroadcastViewerState(context.Context, *CBroadcast_BroadcastViewerState_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastViewerState not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyWaitingBroadcastViewer(context.Context, *CBroadcast_WaitingBroadcastViewer_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWaitingBroadcastViewer not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyBroadcastUploadStarted(context.Context, *CBroadcast_BroadcastUploadStarted_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastUploadStarted not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyStopBroadcastUpload(context.Context, *CBroadcast_StopBroadcastUpload_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStopBroadcastUpload not implemented")
}
func (UnimplementedBroadcastClientServer) NotifySessionClosed(context.Context, *CBroadcast_SessionClosed_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySessionClosed not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyViewerBroadcastInvite(context.Context, *CBroadcast_ViewerBroadcastInvite_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyViewerBroadcastInvite not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyBroadcastStatus(context.Context, *CBroadcast_BroadcastStatus_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastStatus not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyBroadcastChannelLive(context.Context, *CBroadcast_BroadcastChannelLive_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBroadcastChannelLive not implemented")
}
func (UnimplementedBroadcastClientServer) SendThumbnailToRelay(context.Context, *CBroadcast_SendThumbnailToRelay_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendThumbnailToRelay not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyWebRTCNeedTURNServer(context.Context, *CBroadcast_WebRTCNeedTURNServer_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWebRTCNeedTURNServer not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyWebRTCStart(context.Context, *CBroadcast_WebRTCStart_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWebRTCStart not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyWebRTCSetAnswer(context.Context, *CBroadcast_WebRTCSetAnswer_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWebRTCSetAnswer not implemented")
}
func (UnimplementedBroadcastClientServer) NotifyWebRTCAddViewerCandidate(context.Context, *CBroadcast_WebRTCAddViewerCandidate_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWebRTCAddViewerCandidate not implemented")
}
func (UnimplementedBroadcastClientServer) mustEmbedUnimplementedBroadcastClientServer() {}

// UnsafeBroadcastClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastClientServer will
// result in compilation errors.
type UnsafeBroadcastClientServer interface {
	mustEmbedUnimplementedBroadcastClientServer()
}

func RegisterBroadcastClientServer(s grpc.ServiceRegistrar, srv BroadcastClientServer) {
	s.RegisterService(&BroadcastClient_ServiceDesc, srv)
}

func _BroadcastClient_NotifyBroadcastViewerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_BroadcastViewerState_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyBroadcastViewerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyBroadcastViewerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyBroadcastViewerState(ctx, req.(*CBroadcast_BroadcastViewerState_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyWaitingBroadcastViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WaitingBroadcastViewer_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyWaitingBroadcastViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyWaitingBroadcastViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyWaitingBroadcastViewer(ctx, req.(*CBroadcast_WaitingBroadcastViewer_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyBroadcastUploadStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_BroadcastUploadStarted_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyBroadcastUploadStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyBroadcastUploadStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyBroadcastUploadStarted(ctx, req.(*CBroadcast_BroadcastUploadStarted_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyStopBroadcastUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_StopBroadcastUpload_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyStopBroadcastUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyStopBroadcastUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyStopBroadcastUpload(ctx, req.(*CBroadcast_StopBroadcastUpload_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifySessionClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_SessionClosed_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifySessionClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifySessionClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifySessionClosed(ctx, req.(*CBroadcast_SessionClosed_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyViewerBroadcastInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_ViewerBroadcastInvite_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyViewerBroadcastInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyViewerBroadcastInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyViewerBroadcastInvite(ctx, req.(*CBroadcast_ViewerBroadcastInvite_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyBroadcastStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_BroadcastStatus_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyBroadcastStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyBroadcastStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyBroadcastStatus(ctx, req.(*CBroadcast_BroadcastStatus_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyBroadcastChannelLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_BroadcastChannelLive_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyBroadcastChannelLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyBroadcastChannelLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyBroadcastChannelLive(ctx, req.(*CBroadcast_BroadcastChannelLive_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_SendThumbnailToRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_SendThumbnailToRelay_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).SendThumbnailToRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/SendThumbnailToRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).SendThumbnailToRelay(ctx, req.(*CBroadcast_SendThumbnailToRelay_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyWebRTCNeedTURNServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCNeedTURNServer_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyWebRTCNeedTURNServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyWebRTCNeedTURNServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyWebRTCNeedTURNServer(ctx, req.(*CBroadcast_WebRTCNeedTURNServer_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyWebRTCStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCStart_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyWebRTCStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyWebRTCStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyWebRTCStart(ctx, req.(*CBroadcast_WebRTCStart_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyWebRTCSetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCSetAnswer_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyWebRTCSetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyWebRTCSetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyWebRTCSetAnswer(ctx, req.(*CBroadcast_WebRTCSetAnswer_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastClient_NotifyWebRTCAddViewerCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBroadcast_WebRTCAddViewerCandidate_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastClientServer).NotifyWebRTCAddViewerCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BroadcastClient/NotifyWebRTCAddViewerCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastClientServer).NotifyWebRTCAddViewerCandidate(ctx, req.(*CBroadcast_WebRTCAddViewerCandidate_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadcastClient_ServiceDesc is the grpc.ServiceDesc for BroadcastClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BroadcastClient",
	HandlerType: (*BroadcastClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyBroadcastViewerState",
			Handler:    _BroadcastClient_NotifyBroadcastViewerState_Handler,
		},
		{
			MethodName: "NotifyWaitingBroadcastViewer",
			Handler:    _BroadcastClient_NotifyWaitingBroadcastViewer_Handler,
		},
		{
			MethodName: "NotifyBroadcastUploadStarted",
			Handler:    _BroadcastClient_NotifyBroadcastUploadStarted_Handler,
		},
		{
			MethodName: "NotifyStopBroadcastUpload",
			Handler:    _BroadcastClient_NotifyStopBroadcastUpload_Handler,
		},
		{
			MethodName: "NotifySessionClosed",
			Handler:    _BroadcastClient_NotifySessionClosed_Handler,
		},
		{
			MethodName: "NotifyViewerBroadcastInvite",
			Handler:    _BroadcastClient_NotifyViewerBroadcastInvite_Handler,
		},
		{
			MethodName: "NotifyBroadcastStatus",
			Handler:    _BroadcastClient_NotifyBroadcastStatus_Handler,
		},
		{
			MethodName: "NotifyBroadcastChannelLive",
			Handler:    _BroadcastClient_NotifyBroadcastChannelLive_Handler,
		},
		{
			MethodName: "SendThumbnailToRelay",
			Handler:    _BroadcastClient_SendThumbnailToRelay_Handler,
		},
		{
			MethodName: "NotifyWebRTCNeedTURNServer",
			Handler:    _BroadcastClient_NotifyWebRTCNeedTURNServer_Handler,
		},
		{
			MethodName: "NotifyWebRTCStart",
			Handler:    _BroadcastClient_NotifyWebRTCStart_Handler,
		},
		{
			MethodName: "NotifyWebRTCSetAnswer",
			Handler:    _BroadcastClient_NotifyWebRTCSetAnswer_Handler,
		},
		{
			MethodName: "NotifyWebRTCAddViewerCandidate",
			Handler:    _BroadcastClient_NotifyWebRTCAddViewerCandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_broadcast.steamclient.proto",
}
