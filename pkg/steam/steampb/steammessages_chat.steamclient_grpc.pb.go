// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_chat.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	RequestFriendPersonaStates(ctx context.Context, in *CChat_RequestFriendPersonaStates_Request, opts ...grpc.CallOption) (*CChat_RequestFriendPersonaStates_Response, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) RequestFriendPersonaStates(ctx context.Context, in *CChat_RequestFriendPersonaStates_Request, opts ...grpc.CallOption) (*CChat_RequestFriendPersonaStates_Response, error) {
	out := new(CChat_RequestFriendPersonaStates_Response)
	err := c.cc.Invoke(ctx, "/Chat/RequestFriendPersonaStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	RequestFriendPersonaStates(context.Context, *CChat_RequestFriendPersonaStates_Request) (*CChat_RequestFriendPersonaStates_Response, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) RequestFriendPersonaStates(context.Context, *CChat_RequestFriendPersonaStates_Request) (*CChat_RequestFriendPersonaStates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFriendPersonaStates not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_RequestFriendPersonaStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChat_RequestFriendPersonaStates_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RequestFriendPersonaStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/RequestFriendPersonaStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RequestFriendPersonaStates(ctx, req.(*CChat_RequestFriendPersonaStates_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFriendPersonaStates",
			Handler:    _Chat_RequestFriendPersonaStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}

// ChatRoomClient is the client API for ChatRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomClient interface {
	CreateChatRoomGroup(ctx context.Context, in *CChatRoom_CreateChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_CreateChatRoomGroup_Response, error)
	SaveChatRoomGroup(ctx context.Context, in *CChatRoom_SaveChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_SaveChatRoomGroup_Response, error)
	RenameChatRoomGroup(ctx context.Context, in *CChatRoom_RenameChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_RenameChatRoomGroup_Response, error)
	SetChatRoomGroupTagline(ctx context.Context, in *CChatRoom_SetChatRoomGroupTagline_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupTagline_Response, error)
	SetChatRoomGroupAvatar(ctx context.Context, in *CChatRoom_SetChatRoomGroupAvatar_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupAvatar_Response, error)
	SetChatRoomGroupWatchingBroadcast(ctx context.Context, in *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, error)
	JoinMiniGameForChatRoomGroup(ctx context.Context, in *CChatRoom_JoinMiniGameForChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_JoinMiniGameForChatRoomGroup_Response, error)
	EndMiniGameForChatRoomGroup(ctx context.Context, in *CChatRoom_EndMiniGameForChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_EndMiniGameForChatRoomGroup_Response, error)
	MuteUserInGroup(ctx context.Context, in *CChatRoom_MuteUser_Request, opts ...grpc.CallOption) (*CChatRoom_MuteUser_Response, error)
	KickUserFromGroup(ctx context.Context, in *CChatRoom_KickUser_Request, opts ...grpc.CallOption) (*CChatRoom_KickUser_Response, error)
	SetUserBanState(ctx context.Context, in *CChatRoom_SetUserBanState_Request, opts ...grpc.CallOption) (*CChatRoom_SetUserBanState_Response, error)
	RevokeInviteToGroup(ctx context.Context, in *CChatRoom_RevokeInvite_Request, opts ...grpc.CallOption) (*CChatRoom_RevokeInvite_Response, error)
	CreateRole(ctx context.Context, in *CChatRoom_CreateRole_Request, opts ...grpc.CallOption) (*CChatRoom_CreateRole_Response, error)
	GetRoles(ctx context.Context, in *CChatRoom_GetRoles_Request, opts ...grpc.CallOption) (*CChatRoom_GetRoles_Response, error)
	RenameRole(ctx context.Context, in *CChatRoom_RenameRole_Request, opts ...grpc.CallOption) (*CChatRoom_RenameRole_Response, error)
	ReorderRole(ctx context.Context, in *CChatRoom_ReorderRole_Request, opts ...grpc.CallOption) (*CChatRoom_ReorderRole_Response, error)
	DeleteRole(ctx context.Context, in *CChatRoom_DeleteRole_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteRole_Response, error)
	GetRoleActions(ctx context.Context, in *CChatRoom_GetRoleActions_Request, opts ...grpc.CallOption) (*CChatRoom_GetRoleActions_Response, error)
	ReplaceRoleActions(ctx context.Context, in *CChatRoom_ReplaceRoleActions_Request, opts ...grpc.CallOption) (*CChatRoom_ReplaceRoleActions_Response, error)
	AddRoleToUser(ctx context.Context, in *CChatRoom_AddRoleToUser_Request, opts ...grpc.CallOption) (*CChatRoom_AddRoleToUser_Response, error)
	GetRolesForUser(ctx context.Context, in *CChatRoom_GetRolesForUser_Request, opts ...grpc.CallOption) (*CChatRoom_GetRolesForUser_Response, error)
	DeleteRoleFromUser(ctx context.Context, in *CChatRoom_DeleteRoleFromUser_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteRoleFromUser_Response, error)
	JoinChatRoomGroup(ctx context.Context, in *CChatRoom_JoinChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_JoinChatRoomGroup_Response, error)
	InviteFriendToChatRoomGroup(ctx context.Context, in *CChatRoom_InviteFriendToChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_InviteFriendToChatRoomGroup_Response, error)
	LeaveChatRoomGroup(ctx context.Context, in *CChatRoom_LeaveChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_LeaveChatRoomGroup_Response, error)
	CreateChatRoom(ctx context.Context, in *CChatRoom_CreateChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_CreateChatRoom_Response, error)
	DeleteChatRoom(ctx context.Context, in *CChatRoom_DeleteChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteChatRoom_Response, error)
	RenameChatRoom(ctx context.Context, in *CChatRoom_RenameChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_RenameChatRoom_Response, error)
	ReorderChatRoom(ctx context.Context, in *CChatRoom_ReorderChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_ReorderChatRoom_Response, error)
	SendChatMessage(ctx context.Context, in *CChatRoom_SendChatMessage_Request, opts ...grpc.CallOption) (*CChatRoom_SendChatMessage_Response, error)
	JoinVoiceChat(ctx context.Context, in *CChatRoom_JoinVoiceChat_Request, opts ...grpc.CallOption) (*CChatRoom_JoinVoiceChat_Response, error)
	LeaveVoiceChat(ctx context.Context, in *CChatRoom_LeaveVoiceChat_Request, opts ...grpc.CallOption) (*CChatRoom_LeaveVoiceChat_Response, error)
	GetMessageHistory(ctx context.Context, in *CChatRoom_GetMessageHistory_Request, opts ...grpc.CallOption) (*CChatRoom_GetMessageHistory_Response, error)
	GetMyChatRoomGroups(ctx context.Context, in *CChatRoom_GetMyChatRoomGroups_Request, opts ...grpc.CallOption) (*CChatRoom_GetMyChatRoomGroups_Response, error)
	GetChatRoomGroupState(ctx context.Context, in *CChatRoom_GetChatRoomGroupState_Request, opts ...grpc.CallOption) (*CChatRoom_GetChatRoomGroupState_Response, error)
	GetChatRoomGroupSummary(ctx context.Context, in *CChatRoom_GetChatRoomGroupSummary_Request, opts ...grpc.CallOption) (*CChatRoom_GetChatRoomGroupSummary_Response, error)
	SetAppChatRoomGroupForceActive(ctx context.Context, in *CChatRoom_SetAppChatRoomGroupForceActive_Request, opts ...grpc.CallOption) (*CChatRoom_SetAppChatRoomGroupForceActive_Response, error)
	SetAppChatRoomGroupStopForceActive(ctx context.Context, in *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	AckChatMessage(ctx context.Context, in *CChatRoom_AckChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	CreateInviteLink(ctx context.Context, in *CChatRoom_CreateInviteLink_Request, opts ...grpc.CallOption) (*CChatRoom_CreateInviteLink_Response, error)
	GetInviteLinkInfo(ctx context.Context, in *CChatRoom_GetInviteLinkInfo_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteLinkInfo_Response, error)
	GetInviteInfo(ctx context.Context, in *CChatRoom_GetInviteInfo_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteInfo_Response, error)
	GetInviteLinksForGroup(ctx context.Context, in *CChatRoom_GetInviteLinksForGroup_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteLinksForGroup_Response, error)
	GetBanList(ctx context.Context, in *CChatRoom_GetBanList_Request, opts ...grpc.CallOption) (*CChatRoom_GetBanList_Response, error)
	GetInviteList(ctx context.Context, in *CChatRoom_GetInviteList_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteList_Response, error)
	DeleteInviteLink(ctx context.Context, in *CChatRoom_DeleteInviteLink_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteInviteLink_Response, error)
	SetSessionActiveChatRoomGroups(ctx context.Context, in *CChatRoom_SetSessionActiveChatRoomGroups_Request, opts ...grpc.CallOption) (*CChatRoom_SetSessionActiveChatRoomGroups_Response, error)
	SetUserChatGroupPreferences(ctx context.Context, in *CChatRoom_SetUserChatGroupPreferences_Request, opts ...grpc.CallOption) (*CChatRoom_SetUserChatGroupPreferences_Response, error)
	DeleteChatMessages(ctx context.Context, in *CChatRoom_DeleteChatMessages_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteChatMessages_Response, error)
	UpdateMemberListView(ctx context.Context, in *CChatRoom_UpdateMemberListView_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SearchMembers(ctx context.Context, in *CChatRoom_SearchMembers_Request, opts ...grpc.CallOption) (*CChatRoom_SearchMembers_Response, error)
	UpdateMessageReaction(ctx context.Context, in *CChatRoom_UpdateMessageReaction_Request, opts ...grpc.CallOption) (*CChatRoom_UpdateMessageReaction_Response, error)
	GetMessageReactionReactors(ctx context.Context, in *CChatRoom_GetMessageReactionReactors_Request, opts ...grpc.CallOption) (*CChatRoom_GetMessageReactionReactors_Response, error)
}

type chatRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomClient(cc grpc.ClientConnInterface) ChatRoomClient {
	return &chatRoomClient{cc}
}

func (c *chatRoomClient) CreateChatRoomGroup(ctx context.Context, in *CChatRoom_CreateChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_CreateChatRoomGroup_Response, error) {
	out := new(CChatRoom_CreateChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/CreateChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SaveChatRoomGroup(ctx context.Context, in *CChatRoom_SaveChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_SaveChatRoomGroup_Response, error) {
	out := new(CChatRoom_SaveChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SaveChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) RenameChatRoomGroup(ctx context.Context, in *CChatRoom_RenameChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_RenameChatRoomGroup_Response, error) {
	out := new(CChatRoom_RenameChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/RenameChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetChatRoomGroupTagline(ctx context.Context, in *CChatRoom_SetChatRoomGroupTagline_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupTagline_Response, error) {
	out := new(CChatRoom_SetChatRoomGroupTagline_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetChatRoomGroupTagline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetChatRoomGroupAvatar(ctx context.Context, in *CChatRoom_SetChatRoomGroupAvatar_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupAvatar_Response, error) {
	out := new(CChatRoom_SetChatRoomGroupAvatar_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetChatRoomGroupAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetChatRoomGroupWatchingBroadcast(ctx context.Context, in *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, opts ...grpc.CallOption) (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, error) {
	out := new(CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetChatRoomGroupWatchingBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinMiniGameForChatRoomGroup(ctx context.Context, in *CChatRoom_JoinMiniGameForChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_JoinMiniGameForChatRoomGroup_Response, error) {
	out := new(CChatRoom_JoinMiniGameForChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/JoinMiniGameForChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) EndMiniGameForChatRoomGroup(ctx context.Context, in *CChatRoom_EndMiniGameForChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_EndMiniGameForChatRoomGroup_Response, error) {
	out := new(CChatRoom_EndMiniGameForChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/EndMiniGameForChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) MuteUserInGroup(ctx context.Context, in *CChatRoom_MuteUser_Request, opts ...grpc.CallOption) (*CChatRoom_MuteUser_Response, error) {
	out := new(CChatRoom_MuteUser_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/MuteUserInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) KickUserFromGroup(ctx context.Context, in *CChatRoom_KickUser_Request, opts ...grpc.CallOption) (*CChatRoom_KickUser_Response, error) {
	out := new(CChatRoom_KickUser_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/KickUserFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetUserBanState(ctx context.Context, in *CChatRoom_SetUserBanState_Request, opts ...grpc.CallOption) (*CChatRoom_SetUserBanState_Response, error) {
	out := new(CChatRoom_SetUserBanState_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetUserBanState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) RevokeInviteToGroup(ctx context.Context, in *CChatRoom_RevokeInvite_Request, opts ...grpc.CallOption) (*CChatRoom_RevokeInvite_Response, error) {
	out := new(CChatRoom_RevokeInvite_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/RevokeInviteToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) CreateRole(ctx context.Context, in *CChatRoom_CreateRole_Request, opts ...grpc.CallOption) (*CChatRoom_CreateRole_Response, error) {
	out := new(CChatRoom_CreateRole_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetRoles(ctx context.Context, in *CChatRoom_GetRoles_Request, opts ...grpc.CallOption) (*CChatRoom_GetRoles_Response, error) {
	out := new(CChatRoom_GetRoles_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) RenameRole(ctx context.Context, in *CChatRoom_RenameRole_Request, opts ...grpc.CallOption) (*CChatRoom_RenameRole_Response, error) {
	out := new(CChatRoom_RenameRole_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/RenameRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) ReorderRole(ctx context.Context, in *CChatRoom_ReorderRole_Request, opts ...grpc.CallOption) (*CChatRoom_ReorderRole_Response, error) {
	out := new(CChatRoom_ReorderRole_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/ReorderRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteRole(ctx context.Context, in *CChatRoom_DeleteRole_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteRole_Response, error) {
	out := new(CChatRoom_DeleteRole_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetRoleActions(ctx context.Context, in *CChatRoom_GetRoleActions_Request, opts ...grpc.CallOption) (*CChatRoom_GetRoleActions_Response, error) {
	out := new(CChatRoom_GetRoleActions_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetRoleActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) ReplaceRoleActions(ctx context.Context, in *CChatRoom_ReplaceRoleActions_Request, opts ...grpc.CallOption) (*CChatRoom_ReplaceRoleActions_Response, error) {
	out := new(CChatRoom_ReplaceRoleActions_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/ReplaceRoleActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) AddRoleToUser(ctx context.Context, in *CChatRoom_AddRoleToUser_Request, opts ...grpc.CallOption) (*CChatRoom_AddRoleToUser_Response, error) {
	out := new(CChatRoom_AddRoleToUser_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/AddRoleToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetRolesForUser(ctx context.Context, in *CChatRoom_GetRolesForUser_Request, opts ...grpc.CallOption) (*CChatRoom_GetRolesForUser_Response, error) {
	out := new(CChatRoom_GetRolesForUser_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteRoleFromUser(ctx context.Context, in *CChatRoom_DeleteRoleFromUser_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteRoleFromUser_Response, error) {
	out := new(CChatRoom_DeleteRoleFromUser_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/DeleteRoleFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinChatRoomGroup(ctx context.Context, in *CChatRoom_JoinChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_JoinChatRoomGroup_Response, error) {
	out := new(CChatRoom_JoinChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/JoinChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) InviteFriendToChatRoomGroup(ctx context.Context, in *CChatRoom_InviteFriendToChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_InviteFriendToChatRoomGroup_Response, error) {
	out := new(CChatRoom_InviteFriendToChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/InviteFriendToChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) LeaveChatRoomGroup(ctx context.Context, in *CChatRoom_LeaveChatRoomGroup_Request, opts ...grpc.CallOption) (*CChatRoom_LeaveChatRoomGroup_Response, error) {
	out := new(CChatRoom_LeaveChatRoomGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/LeaveChatRoomGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) CreateChatRoom(ctx context.Context, in *CChatRoom_CreateChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_CreateChatRoom_Response, error) {
	out := new(CChatRoom_CreateChatRoom_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/CreateChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteChatRoom(ctx context.Context, in *CChatRoom_DeleteChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteChatRoom_Response, error) {
	out := new(CChatRoom_DeleteChatRoom_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/DeleteChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) RenameChatRoom(ctx context.Context, in *CChatRoom_RenameChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_RenameChatRoom_Response, error) {
	out := new(CChatRoom_RenameChatRoom_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/RenameChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) ReorderChatRoom(ctx context.Context, in *CChatRoom_ReorderChatRoom_Request, opts ...grpc.CallOption) (*CChatRoom_ReorderChatRoom_Response, error) {
	out := new(CChatRoom_ReorderChatRoom_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/ReorderChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SendChatMessage(ctx context.Context, in *CChatRoom_SendChatMessage_Request, opts ...grpc.CallOption) (*CChatRoom_SendChatMessage_Response, error) {
	out := new(CChatRoom_SendChatMessage_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SendChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinVoiceChat(ctx context.Context, in *CChatRoom_JoinVoiceChat_Request, opts ...grpc.CallOption) (*CChatRoom_JoinVoiceChat_Response, error) {
	out := new(CChatRoom_JoinVoiceChat_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/JoinVoiceChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) LeaveVoiceChat(ctx context.Context, in *CChatRoom_LeaveVoiceChat_Request, opts ...grpc.CallOption) (*CChatRoom_LeaveVoiceChat_Response, error) {
	out := new(CChatRoom_LeaveVoiceChat_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/LeaveVoiceChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetMessageHistory(ctx context.Context, in *CChatRoom_GetMessageHistory_Request, opts ...grpc.CallOption) (*CChatRoom_GetMessageHistory_Response, error) {
	out := new(CChatRoom_GetMessageHistory_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetMessageHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetMyChatRoomGroups(ctx context.Context, in *CChatRoom_GetMyChatRoomGroups_Request, opts ...grpc.CallOption) (*CChatRoom_GetMyChatRoomGroups_Response, error) {
	out := new(CChatRoom_GetMyChatRoomGroups_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetMyChatRoomGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetChatRoomGroupState(ctx context.Context, in *CChatRoom_GetChatRoomGroupState_Request, opts ...grpc.CallOption) (*CChatRoom_GetChatRoomGroupState_Response, error) {
	out := new(CChatRoom_GetChatRoomGroupState_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetChatRoomGroupState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetChatRoomGroupSummary(ctx context.Context, in *CChatRoom_GetChatRoomGroupSummary_Request, opts ...grpc.CallOption) (*CChatRoom_GetChatRoomGroupSummary_Response, error) {
	out := new(CChatRoom_GetChatRoomGroupSummary_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetChatRoomGroupSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetAppChatRoomGroupForceActive(ctx context.Context, in *CChatRoom_SetAppChatRoomGroupForceActive_Request, opts ...grpc.CallOption) (*CChatRoom_SetAppChatRoomGroupForceActive_Response, error) {
	out := new(CChatRoom_SetAppChatRoomGroupForceActive_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetAppChatRoomGroupForceActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetAppChatRoomGroupStopForceActive(ctx context.Context, in *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetAppChatRoomGroupStopForceActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) AckChatMessage(ctx context.Context, in *CChatRoom_AckChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoom/AckChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) CreateInviteLink(ctx context.Context, in *CChatRoom_CreateInviteLink_Request, opts ...grpc.CallOption) (*CChatRoom_CreateInviteLink_Response, error) {
	out := new(CChatRoom_CreateInviteLink_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/CreateInviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetInviteLinkInfo(ctx context.Context, in *CChatRoom_GetInviteLinkInfo_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteLinkInfo_Response, error) {
	out := new(CChatRoom_GetInviteLinkInfo_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetInviteLinkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetInviteInfo(ctx context.Context, in *CChatRoom_GetInviteInfo_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteInfo_Response, error) {
	out := new(CChatRoom_GetInviteInfo_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetInviteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetInviteLinksForGroup(ctx context.Context, in *CChatRoom_GetInviteLinksForGroup_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteLinksForGroup_Response, error) {
	out := new(CChatRoom_GetInviteLinksForGroup_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetInviteLinksForGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetBanList(ctx context.Context, in *CChatRoom_GetBanList_Request, opts ...grpc.CallOption) (*CChatRoom_GetBanList_Response, error) {
	out := new(CChatRoom_GetBanList_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetBanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetInviteList(ctx context.Context, in *CChatRoom_GetInviteList_Request, opts ...grpc.CallOption) (*CChatRoom_GetInviteList_Response, error) {
	out := new(CChatRoom_GetInviteList_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetInviteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteInviteLink(ctx context.Context, in *CChatRoom_DeleteInviteLink_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteInviteLink_Response, error) {
	out := new(CChatRoom_DeleteInviteLink_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/DeleteInviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetSessionActiveChatRoomGroups(ctx context.Context, in *CChatRoom_SetSessionActiveChatRoomGroups_Request, opts ...grpc.CallOption) (*CChatRoom_SetSessionActiveChatRoomGroups_Response, error) {
	out := new(CChatRoom_SetSessionActiveChatRoomGroups_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetSessionActiveChatRoomGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SetUserChatGroupPreferences(ctx context.Context, in *CChatRoom_SetUserChatGroupPreferences_Request, opts ...grpc.CallOption) (*CChatRoom_SetUserChatGroupPreferences_Response, error) {
	out := new(CChatRoom_SetUserChatGroupPreferences_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SetUserChatGroupPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteChatMessages(ctx context.Context, in *CChatRoom_DeleteChatMessages_Request, opts ...grpc.CallOption) (*CChatRoom_DeleteChatMessages_Response, error) {
	out := new(CChatRoom_DeleteChatMessages_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/DeleteChatMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) UpdateMemberListView(ctx context.Context, in *CChatRoom_UpdateMemberListView_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoom/UpdateMemberListView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) SearchMembers(ctx context.Context, in *CChatRoom_SearchMembers_Request, opts ...grpc.CallOption) (*CChatRoom_SearchMembers_Response, error) {
	out := new(CChatRoom_SearchMembers_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/SearchMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) UpdateMessageReaction(ctx context.Context, in *CChatRoom_UpdateMessageReaction_Request, opts ...grpc.CallOption) (*CChatRoom_UpdateMessageReaction_Response, error) {
	out := new(CChatRoom_UpdateMessageReaction_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/UpdateMessageReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetMessageReactionReactors(ctx context.Context, in *CChatRoom_GetMessageReactionReactors_Request, opts ...grpc.CallOption) (*CChatRoom_GetMessageReactionReactors_Response, error) {
	out := new(CChatRoom_GetMessageReactionReactors_Response)
	err := c.cc.Invoke(ctx, "/ChatRoom/GetMessageReactionReactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomServer is the server API for ChatRoom service.
// All implementations must embed UnimplementedChatRoomServer
// for forward compatibility
type ChatRoomServer interface {
	CreateChatRoomGroup(context.Context, *CChatRoom_CreateChatRoomGroup_Request) (*CChatRoom_CreateChatRoomGroup_Response, error)
	SaveChatRoomGroup(context.Context, *CChatRoom_SaveChatRoomGroup_Request) (*CChatRoom_SaveChatRoomGroup_Response, error)
	RenameChatRoomGroup(context.Context, *CChatRoom_RenameChatRoomGroup_Request) (*CChatRoom_RenameChatRoomGroup_Response, error)
	SetChatRoomGroupTagline(context.Context, *CChatRoom_SetChatRoomGroupTagline_Request) (*CChatRoom_SetChatRoomGroupTagline_Response, error)
	SetChatRoomGroupAvatar(context.Context, *CChatRoom_SetChatRoomGroupAvatar_Request) (*CChatRoom_SetChatRoomGroupAvatar_Response, error)
	SetChatRoomGroupWatchingBroadcast(context.Context, *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, error)
	JoinMiniGameForChatRoomGroup(context.Context, *CChatRoom_JoinMiniGameForChatRoomGroup_Request) (*CChatRoom_JoinMiniGameForChatRoomGroup_Response, error)
	EndMiniGameForChatRoomGroup(context.Context, *CChatRoom_EndMiniGameForChatRoomGroup_Request) (*CChatRoom_EndMiniGameForChatRoomGroup_Response, error)
	MuteUserInGroup(context.Context, *CChatRoom_MuteUser_Request) (*CChatRoom_MuteUser_Response, error)
	KickUserFromGroup(context.Context, *CChatRoom_KickUser_Request) (*CChatRoom_KickUser_Response, error)
	SetUserBanState(context.Context, *CChatRoom_SetUserBanState_Request) (*CChatRoom_SetUserBanState_Response, error)
	RevokeInviteToGroup(context.Context, *CChatRoom_RevokeInvite_Request) (*CChatRoom_RevokeInvite_Response, error)
	CreateRole(context.Context, *CChatRoom_CreateRole_Request) (*CChatRoom_CreateRole_Response, error)
	GetRoles(context.Context, *CChatRoom_GetRoles_Request) (*CChatRoom_GetRoles_Response, error)
	RenameRole(context.Context, *CChatRoom_RenameRole_Request) (*CChatRoom_RenameRole_Response, error)
	ReorderRole(context.Context, *CChatRoom_ReorderRole_Request) (*CChatRoom_ReorderRole_Response, error)
	DeleteRole(context.Context, *CChatRoom_DeleteRole_Request) (*CChatRoom_DeleteRole_Response, error)
	GetRoleActions(context.Context, *CChatRoom_GetRoleActions_Request) (*CChatRoom_GetRoleActions_Response, error)
	ReplaceRoleActions(context.Context, *CChatRoom_ReplaceRoleActions_Request) (*CChatRoom_ReplaceRoleActions_Response, error)
	AddRoleToUser(context.Context, *CChatRoom_AddRoleToUser_Request) (*CChatRoom_AddRoleToUser_Response, error)
	GetRolesForUser(context.Context, *CChatRoom_GetRolesForUser_Request) (*CChatRoom_GetRolesForUser_Response, error)
	DeleteRoleFromUser(context.Context, *CChatRoom_DeleteRoleFromUser_Request) (*CChatRoom_DeleteRoleFromUser_Response, error)
	JoinChatRoomGroup(context.Context, *CChatRoom_JoinChatRoomGroup_Request) (*CChatRoom_JoinChatRoomGroup_Response, error)
	InviteFriendToChatRoomGroup(context.Context, *CChatRoom_InviteFriendToChatRoomGroup_Request) (*CChatRoom_InviteFriendToChatRoomGroup_Response, error)
	LeaveChatRoomGroup(context.Context, *CChatRoom_LeaveChatRoomGroup_Request) (*CChatRoom_LeaveChatRoomGroup_Response, error)
	CreateChatRoom(context.Context, *CChatRoom_CreateChatRoom_Request) (*CChatRoom_CreateChatRoom_Response, error)
	DeleteChatRoom(context.Context, *CChatRoom_DeleteChatRoom_Request) (*CChatRoom_DeleteChatRoom_Response, error)
	RenameChatRoom(context.Context, *CChatRoom_RenameChatRoom_Request) (*CChatRoom_RenameChatRoom_Response, error)
	ReorderChatRoom(context.Context, *CChatRoom_ReorderChatRoom_Request) (*CChatRoom_ReorderChatRoom_Response, error)
	SendChatMessage(context.Context, *CChatRoom_SendChatMessage_Request) (*CChatRoom_SendChatMessage_Response, error)
	JoinVoiceChat(context.Context, *CChatRoom_JoinVoiceChat_Request) (*CChatRoom_JoinVoiceChat_Response, error)
	LeaveVoiceChat(context.Context, *CChatRoom_LeaveVoiceChat_Request) (*CChatRoom_LeaveVoiceChat_Response, error)
	GetMessageHistory(context.Context, *CChatRoom_GetMessageHistory_Request) (*CChatRoom_GetMessageHistory_Response, error)
	GetMyChatRoomGroups(context.Context, *CChatRoom_GetMyChatRoomGroups_Request) (*CChatRoom_GetMyChatRoomGroups_Response, error)
	GetChatRoomGroupState(context.Context, *CChatRoom_GetChatRoomGroupState_Request) (*CChatRoom_GetChatRoomGroupState_Response, error)
	GetChatRoomGroupSummary(context.Context, *CChatRoom_GetChatRoomGroupSummary_Request) (*CChatRoom_GetChatRoomGroupSummary_Response, error)
	SetAppChatRoomGroupForceActive(context.Context, *CChatRoom_SetAppChatRoomGroupForceActive_Request) (*CChatRoom_SetAppChatRoomGroupForceActive_Response, error)
	SetAppChatRoomGroupStopForceActive(context.Context, *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) (*NoResponse, error)
	AckChatMessage(context.Context, *CChatRoom_AckChatMessage_Notification) (*NoResponse, error)
	CreateInviteLink(context.Context, *CChatRoom_CreateInviteLink_Request) (*CChatRoom_CreateInviteLink_Response, error)
	GetInviteLinkInfo(context.Context, *CChatRoom_GetInviteLinkInfo_Request) (*CChatRoom_GetInviteLinkInfo_Response, error)
	GetInviteInfo(context.Context, *CChatRoom_GetInviteInfo_Request) (*CChatRoom_GetInviteInfo_Response, error)
	GetInviteLinksForGroup(context.Context, *CChatRoom_GetInviteLinksForGroup_Request) (*CChatRoom_GetInviteLinksForGroup_Response, error)
	GetBanList(context.Context, *CChatRoom_GetBanList_Request) (*CChatRoom_GetBanList_Response, error)
	GetInviteList(context.Context, *CChatRoom_GetInviteList_Request) (*CChatRoom_GetInviteList_Response, error)
	DeleteInviteLink(context.Context, *CChatRoom_DeleteInviteLink_Request) (*CChatRoom_DeleteInviteLink_Response, error)
	SetSessionActiveChatRoomGroups(context.Context, *CChatRoom_SetSessionActiveChatRoomGroups_Request) (*CChatRoom_SetSessionActiveChatRoomGroups_Response, error)
	SetUserChatGroupPreferences(context.Context, *CChatRoom_SetUserChatGroupPreferences_Request) (*CChatRoom_SetUserChatGroupPreferences_Response, error)
	DeleteChatMessages(context.Context, *CChatRoom_DeleteChatMessages_Request) (*CChatRoom_DeleteChatMessages_Response, error)
	UpdateMemberListView(context.Context, *CChatRoom_UpdateMemberListView_Notification) (*NoResponse, error)
	SearchMembers(context.Context, *CChatRoom_SearchMembers_Request) (*CChatRoom_SearchMembers_Response, error)
	UpdateMessageReaction(context.Context, *CChatRoom_UpdateMessageReaction_Request) (*CChatRoom_UpdateMessageReaction_Response, error)
	GetMessageReactionReactors(context.Context, *CChatRoom_GetMessageReactionReactors_Request) (*CChatRoom_GetMessageReactionReactors_Response, error)
	mustEmbedUnimplementedChatRoomServer()
}

// UnimplementedChatRoomServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomServer struct {
}

func (UnimplementedChatRoomServer) CreateChatRoomGroup(context.Context, *CChatRoom_CreateChatRoomGroup_Request) (*CChatRoom_CreateChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) SaveChatRoomGroup(context.Context, *CChatRoom_SaveChatRoomGroup_Request) (*CChatRoom_SaveChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) RenameChatRoomGroup(context.Context, *CChatRoom_RenameChatRoomGroup_Request) (*CChatRoom_RenameChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) SetChatRoomGroupTagline(context.Context, *CChatRoom_SetChatRoomGroupTagline_Request) (*CChatRoom_SetChatRoomGroupTagline_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatRoomGroupTagline not implemented")
}
func (UnimplementedChatRoomServer) SetChatRoomGroupAvatar(context.Context, *CChatRoom_SetChatRoomGroupAvatar_Request) (*CChatRoom_SetChatRoomGroupAvatar_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatRoomGroupAvatar not implemented")
}
func (UnimplementedChatRoomServer) SetChatRoomGroupWatchingBroadcast(context.Context, *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatRoomGroupWatchingBroadcast not implemented")
}
func (UnimplementedChatRoomServer) JoinMiniGameForChatRoomGroup(context.Context, *CChatRoom_JoinMiniGameForChatRoomGroup_Request) (*CChatRoom_JoinMiniGameForChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMiniGameForChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) EndMiniGameForChatRoomGroup(context.Context, *CChatRoom_EndMiniGameForChatRoomGroup_Request) (*CChatRoom_EndMiniGameForChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndMiniGameForChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) MuteUserInGroup(context.Context, *CChatRoom_MuteUser_Request) (*CChatRoom_MuteUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteUserInGroup not implemented")
}
func (UnimplementedChatRoomServer) KickUserFromGroup(context.Context, *CChatRoom_KickUser_Request) (*CChatRoom_KickUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUserFromGroup not implemented")
}
func (UnimplementedChatRoomServer) SetUserBanState(context.Context, *CChatRoom_SetUserBanState_Request) (*CChatRoom_SetUserBanState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserBanState not implemented")
}
func (UnimplementedChatRoomServer) RevokeInviteToGroup(context.Context, *CChatRoom_RevokeInvite_Request) (*CChatRoom_RevokeInvite_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInviteToGroup not implemented")
}
func (UnimplementedChatRoomServer) CreateRole(context.Context, *CChatRoom_CreateRole_Request) (*CChatRoom_CreateRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedChatRoomServer) GetRoles(context.Context, *CChatRoom_GetRoles_Request) (*CChatRoom_GetRoles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedChatRoomServer) RenameRole(context.Context, *CChatRoom_RenameRole_Request) (*CChatRoom_RenameRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameRole not implemented")
}
func (UnimplementedChatRoomServer) ReorderRole(context.Context, *CChatRoom_ReorderRole_Request) (*CChatRoom_ReorderRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderRole not implemented")
}
func (UnimplementedChatRoomServer) DeleteRole(context.Context, *CChatRoom_DeleteRole_Request) (*CChatRoom_DeleteRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedChatRoomServer) GetRoleActions(context.Context, *CChatRoom_GetRoleActions_Request) (*CChatRoom_GetRoleActions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleActions not implemented")
}
func (UnimplementedChatRoomServer) ReplaceRoleActions(context.Context, *CChatRoom_ReplaceRoleActions_Request) (*CChatRoom_ReplaceRoleActions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceRoleActions not implemented")
}
func (UnimplementedChatRoomServer) AddRoleToUser(context.Context, *CChatRoom_AddRoleToUser_Request) (*CChatRoom_AddRoleToUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToUser not implemented")
}
func (UnimplementedChatRoomServer) GetRolesForUser(context.Context, *CChatRoom_GetRolesForUser_Request) (*CChatRoom_GetRolesForUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedChatRoomServer) DeleteRoleFromUser(context.Context, *CChatRoom_DeleteRoleFromUser_Request) (*CChatRoom_DeleteRoleFromUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleFromUser not implemented")
}
func (UnimplementedChatRoomServer) JoinChatRoomGroup(context.Context, *CChatRoom_JoinChatRoomGroup_Request) (*CChatRoom_JoinChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) InviteFriendToChatRoomGroup(context.Context, *CChatRoom_InviteFriendToChatRoomGroup_Request) (*CChatRoom_InviteFriendToChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteFriendToChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) LeaveChatRoomGroup(context.Context, *CChatRoom_LeaveChatRoomGroup_Request) (*CChatRoom_LeaveChatRoomGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChatRoomGroup not implemented")
}
func (UnimplementedChatRoomServer) CreateChatRoom(context.Context, *CChatRoom_CreateChatRoom_Request) (*CChatRoom_CreateChatRoom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoom not implemented")
}
func (UnimplementedChatRoomServer) DeleteChatRoom(context.Context, *CChatRoom_DeleteChatRoom_Request) (*CChatRoom_DeleteChatRoom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRoom not implemented")
}
func (UnimplementedChatRoomServer) RenameChatRoom(context.Context, *CChatRoom_RenameChatRoom_Request) (*CChatRoom_RenameChatRoom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameChatRoom not implemented")
}
func (UnimplementedChatRoomServer) ReorderChatRoom(context.Context, *CChatRoom_ReorderChatRoom_Request) (*CChatRoom_ReorderChatRoom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderChatRoom not implemented")
}
func (UnimplementedChatRoomServer) SendChatMessage(context.Context, *CChatRoom_SendChatMessage_Request) (*CChatRoom_SendChatMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedChatRoomServer) JoinVoiceChat(context.Context, *CChatRoom_JoinVoiceChat_Request) (*CChatRoom_JoinVoiceChat_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinVoiceChat not implemented")
}
func (UnimplementedChatRoomServer) LeaveVoiceChat(context.Context, *CChatRoom_LeaveVoiceChat_Request) (*CChatRoom_LeaveVoiceChat_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveVoiceChat not implemented")
}
func (UnimplementedChatRoomServer) GetMessageHistory(context.Context, *CChatRoom_GetMessageHistory_Request) (*CChatRoom_GetMessageHistory_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHistory not implemented")
}
func (UnimplementedChatRoomServer) GetMyChatRoomGroups(context.Context, *CChatRoom_GetMyChatRoomGroups_Request) (*CChatRoom_GetMyChatRoomGroups_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyChatRoomGroups not implemented")
}
func (UnimplementedChatRoomServer) GetChatRoomGroupState(context.Context, *CChatRoom_GetChatRoomGroupState_Request) (*CChatRoom_GetChatRoomGroupState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoomGroupState not implemented")
}
func (UnimplementedChatRoomServer) GetChatRoomGroupSummary(context.Context, *CChatRoom_GetChatRoomGroupSummary_Request) (*CChatRoom_GetChatRoomGroupSummary_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoomGroupSummary not implemented")
}
func (UnimplementedChatRoomServer) SetAppChatRoomGroupForceActive(context.Context, *CChatRoom_SetAppChatRoomGroupForceActive_Request) (*CChatRoom_SetAppChatRoomGroupForceActive_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppChatRoomGroupForceActive not implemented")
}
func (UnimplementedChatRoomServer) SetAppChatRoomGroupStopForceActive(context.Context, *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppChatRoomGroupStopForceActive not implemented")
}
func (UnimplementedChatRoomServer) AckChatMessage(context.Context, *CChatRoom_AckChatMessage_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckChatMessage not implemented")
}
func (UnimplementedChatRoomServer) CreateInviteLink(context.Context, *CChatRoom_CreateInviteLink_Request) (*CChatRoom_CreateInviteLink_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteLink not implemented")
}
func (UnimplementedChatRoomServer) GetInviteLinkInfo(context.Context, *CChatRoom_GetInviteLinkInfo_Request) (*CChatRoom_GetInviteLinkInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteLinkInfo not implemented")
}
func (UnimplementedChatRoomServer) GetInviteInfo(context.Context, *CChatRoom_GetInviteInfo_Request) (*CChatRoom_GetInviteInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteInfo not implemented")
}
func (UnimplementedChatRoomServer) GetInviteLinksForGroup(context.Context, *CChatRoom_GetInviteLinksForGroup_Request) (*CChatRoom_GetInviteLinksForGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteLinksForGroup not implemented")
}
func (UnimplementedChatRoomServer) GetBanList(context.Context, *CChatRoom_GetBanList_Request) (*CChatRoom_GetBanList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanList not implemented")
}
func (UnimplementedChatRoomServer) GetInviteList(context.Context, *CChatRoom_GetInviteList_Request) (*CChatRoom_GetInviteList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteList not implemented")
}
func (UnimplementedChatRoomServer) DeleteInviteLink(context.Context, *CChatRoom_DeleteInviteLink_Request) (*CChatRoom_DeleteInviteLink_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInviteLink not implemented")
}
func (UnimplementedChatRoomServer) SetSessionActiveChatRoomGroups(context.Context, *CChatRoom_SetSessionActiveChatRoomGroups_Request) (*CChatRoom_SetSessionActiveChatRoomGroups_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionActiveChatRoomGroups not implemented")
}
func (UnimplementedChatRoomServer) SetUserChatGroupPreferences(context.Context, *CChatRoom_SetUserChatGroupPreferences_Request) (*CChatRoom_SetUserChatGroupPreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserChatGroupPreferences not implemented")
}
func (UnimplementedChatRoomServer) DeleteChatMessages(context.Context, *CChatRoom_DeleteChatMessages_Request) (*CChatRoom_DeleteChatMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatMessages not implemented")
}
func (UnimplementedChatRoomServer) UpdateMemberListView(context.Context, *CChatRoom_UpdateMemberListView_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberListView not implemented")
}
func (UnimplementedChatRoomServer) SearchMembers(context.Context, *CChatRoom_SearchMembers_Request) (*CChatRoom_SearchMembers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMembers not implemented")
}
func (UnimplementedChatRoomServer) UpdateMessageReaction(context.Context, *CChatRoom_UpdateMessageReaction_Request) (*CChatRoom_UpdateMessageReaction_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageReaction not implemented")
}
func (UnimplementedChatRoomServer) GetMessageReactionReactors(context.Context, *CChatRoom_GetMessageReactionReactors_Request) (*CChatRoom_GetMessageReactionReactors_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageReactionReactors not implemented")
}
func (UnimplementedChatRoomServer) mustEmbedUnimplementedChatRoomServer() {}

// UnsafeChatRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomServer will
// result in compilation errors.
type UnsafeChatRoomServer interface {
	mustEmbedUnimplementedChatRoomServer()
}

func RegisterChatRoomServer(s grpc.ServiceRegistrar, srv ChatRoomServer) {
	s.RegisterService(&ChatRoom_ServiceDesc, srv)
}

func _ChatRoom_CreateChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_CreateChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/CreateChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateChatRoomGroup(ctx, req.(*CChatRoom_CreateChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SaveChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SaveChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SaveChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SaveChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SaveChatRoomGroup(ctx, req.(*CChatRoom_SaveChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_RenameChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_RenameChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).RenameChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/RenameChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).RenameChatRoomGroup(ctx, req.(*CChatRoom_RenameChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetChatRoomGroupTagline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetChatRoomGroupTagline_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetChatRoomGroupTagline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetChatRoomGroupTagline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetChatRoomGroupTagline(ctx, req.(*CChatRoom_SetChatRoomGroupTagline_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetChatRoomGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetChatRoomGroupAvatar_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetChatRoomGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetChatRoomGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetChatRoomGroupAvatar(ctx, req.(*CChatRoom_SetChatRoomGroupAvatar_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetChatRoomGroupWatchingBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetChatRoomGroupWatchingBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetChatRoomGroupWatchingBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetChatRoomGroupWatchingBroadcast(ctx, req.(*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinMiniGameForChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_JoinMiniGameForChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).JoinMiniGameForChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/JoinMiniGameForChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).JoinMiniGameForChatRoomGroup(ctx, req.(*CChatRoom_JoinMiniGameForChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_EndMiniGameForChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_EndMiniGameForChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).EndMiniGameForChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/EndMiniGameForChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).EndMiniGameForChatRoomGroup(ctx, req.(*CChatRoom_EndMiniGameForChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_MuteUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_MuteUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).MuteUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/MuteUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).MuteUserInGroup(ctx, req.(*CChatRoom_MuteUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_KickUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_KickUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).KickUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/KickUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).KickUserFromGroup(ctx, req.(*CChatRoom_KickUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetUserBanState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetUserBanState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetUserBanState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetUserBanState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetUserBanState(ctx, req.(*CChatRoom_SetUserBanState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_RevokeInviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_RevokeInvite_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).RevokeInviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/RevokeInviteToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).RevokeInviteToGroup(ctx, req.(*CChatRoom_RevokeInvite_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_CreateRole_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateRole(ctx, req.(*CChatRoom_CreateRole_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetRoles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetRoles(ctx, req.(*CChatRoom_GetRoles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_RenameRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_RenameRole_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).RenameRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/RenameRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).RenameRole(ctx, req.(*CChatRoom_RenameRole_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_ReorderRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ReorderRole_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).ReorderRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/ReorderRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).ReorderRole(ctx, req.(*CChatRoom_ReorderRole_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_DeleteRole_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteRole(ctx, req.(*CChatRoom_DeleteRole_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetRoleActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetRoleActions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetRoleActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetRoleActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetRoleActions(ctx, req.(*CChatRoom_GetRoleActions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_ReplaceRoleActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ReplaceRoleActions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).ReplaceRoleActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/ReplaceRoleActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).ReplaceRoleActions(ctx, req.(*CChatRoom_ReplaceRoleActions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_AddRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_AddRoleToUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).AddRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/AddRoleToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).AddRoleToUser(ctx, req.(*CChatRoom_AddRoleToUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetRolesForUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetRolesForUser(ctx, req.(*CChatRoom_GetRolesForUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_DeleteRoleFromUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/DeleteRoleFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteRoleFromUser(ctx, req.(*CChatRoom_DeleteRoleFromUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_JoinChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).JoinChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/JoinChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).JoinChatRoomGroup(ctx, req.(*CChatRoom_JoinChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_InviteFriendToChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_InviteFriendToChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).InviteFriendToChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/InviteFriendToChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).InviteFriendToChatRoomGroup(ctx, req.(*CChatRoom_InviteFriendToChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_LeaveChatRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_LeaveChatRoomGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).LeaveChatRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/LeaveChatRoomGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).LeaveChatRoomGroup(ctx, req.(*CChatRoom_LeaveChatRoomGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_CreateChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_CreateChatRoom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/CreateChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateChatRoom(ctx, req.(*CChatRoom_CreateChatRoom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_DeleteChatRoom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/DeleteChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteChatRoom(ctx, req.(*CChatRoom_DeleteChatRoom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_RenameChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_RenameChatRoom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).RenameChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/RenameChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).RenameChatRoom(ctx, req.(*CChatRoom_RenameChatRoom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_ReorderChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ReorderChatRoom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).ReorderChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/ReorderChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).ReorderChatRoom(ctx, req.(*CChatRoom_ReorderChatRoom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SendChatMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SendChatMessage(ctx, req.(*CChatRoom_SendChatMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinVoiceChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_JoinVoiceChat_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).JoinVoiceChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/JoinVoiceChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).JoinVoiceChat(ctx, req.(*CChatRoom_JoinVoiceChat_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_LeaveVoiceChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_LeaveVoiceChat_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).LeaveVoiceChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/LeaveVoiceChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).LeaveVoiceChat(ctx, req.(*CChatRoom_LeaveVoiceChat_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetMessageHistory_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetMessageHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetMessageHistory(ctx, req.(*CChatRoom_GetMessageHistory_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetMyChatRoomGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetMyChatRoomGroups_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetMyChatRoomGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetMyChatRoomGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetMyChatRoomGroups(ctx, req.(*CChatRoom_GetMyChatRoomGroups_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetChatRoomGroupState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetChatRoomGroupState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetChatRoomGroupState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetChatRoomGroupState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetChatRoomGroupState(ctx, req.(*CChatRoom_GetChatRoomGroupState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetChatRoomGroupSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetChatRoomGroupSummary_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetChatRoomGroupSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetChatRoomGroupSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetChatRoomGroupSummary(ctx, req.(*CChatRoom_GetChatRoomGroupSummary_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetAppChatRoomGroupForceActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetAppChatRoomGroupForceActive_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetAppChatRoomGroupForceActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetAppChatRoomGroupForceActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetAppChatRoomGroupForceActive(ctx, req.(*CChatRoom_SetAppChatRoomGroupForceActive_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetAppChatRoomGroupStopForceActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetAppChatRoomGroupStopForceActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetAppChatRoomGroupStopForceActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetAppChatRoomGroupStopForceActive(ctx, req.(*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_AckChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_AckChatMessage_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).AckChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/AckChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).AckChatMessage(ctx, req.(*CChatRoom_AckChatMessage_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_CreateInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_CreateInviteLink_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/CreateInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateInviteLink(ctx, req.(*CChatRoom_CreateInviteLink_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetInviteLinkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetInviteLinkInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetInviteLinkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetInviteLinkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetInviteLinkInfo(ctx, req.(*CChatRoom_GetInviteLinkInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetInviteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetInviteInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetInviteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetInviteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetInviteInfo(ctx, req.(*CChatRoom_GetInviteInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetInviteLinksForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetInviteLinksForGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetInviteLinksForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetInviteLinksForGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetInviteLinksForGroup(ctx, req.(*CChatRoom_GetInviteLinksForGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetBanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetBanList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetBanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetBanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetBanList(ctx, req.(*CChatRoom_GetBanList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetInviteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetInviteList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetInviteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetInviteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetInviteList(ctx, req.(*CChatRoom_GetInviteList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_DeleteInviteLink_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/DeleteInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteInviteLink(ctx, req.(*CChatRoom_DeleteInviteLink_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetSessionActiveChatRoomGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetSessionActiveChatRoomGroups_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetSessionActiveChatRoomGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetSessionActiveChatRoomGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetSessionActiveChatRoomGroups(ctx, req.(*CChatRoom_SetSessionActiveChatRoomGroups_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SetUserChatGroupPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SetUserChatGroupPreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SetUserChatGroupPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SetUserChatGroupPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SetUserChatGroupPreferences(ctx, req.(*CChatRoom_SetUserChatGroupPreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_DeleteChatMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/DeleteChatMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteChatMessages(ctx, req.(*CChatRoom_DeleteChatMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_UpdateMemberListView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_UpdateMemberListView_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).UpdateMemberListView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/UpdateMemberListView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).UpdateMemberListView(ctx, req.(*CChatRoom_UpdateMemberListView_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_SearchMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_SearchMembers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).SearchMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/SearchMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).SearchMembers(ctx, req.(*CChatRoom_SearchMembers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_UpdateMessageReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_UpdateMessageReaction_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).UpdateMessageReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/UpdateMessageReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).UpdateMessageReaction(ctx, req.(*CChatRoom_UpdateMessageReaction_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetMessageReactionReactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_GetMessageReactionReactors_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetMessageReactionReactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoom/GetMessageReactionReactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetMessageReactionReactors(ctx, req.(*CChatRoom_GetMessageReactionReactors_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoom_ServiceDesc is the grpc.ServiceDesc for ChatRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRoom",
	HandlerType: (*ChatRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatRoomGroup",
			Handler:    _ChatRoom_CreateChatRoomGroup_Handler,
		},
		{
			MethodName: "SaveChatRoomGroup",
			Handler:    _ChatRoom_SaveChatRoomGroup_Handler,
		},
		{
			MethodName: "RenameChatRoomGroup",
			Handler:    _ChatRoom_RenameChatRoomGroup_Handler,
		},
		{
			MethodName: "SetChatRoomGroupTagline",
			Handler:    _ChatRoom_SetChatRoomGroupTagline_Handler,
		},
		{
			MethodName: "SetChatRoomGroupAvatar",
			Handler:    _ChatRoom_SetChatRoomGroupAvatar_Handler,
		},
		{
			MethodName: "SetChatRoomGroupWatchingBroadcast",
			Handler:    _ChatRoom_SetChatRoomGroupWatchingBroadcast_Handler,
		},
		{
			MethodName: "JoinMiniGameForChatRoomGroup",
			Handler:    _ChatRoom_JoinMiniGameForChatRoomGroup_Handler,
		},
		{
			MethodName: "EndMiniGameForChatRoomGroup",
			Handler:    _ChatRoom_EndMiniGameForChatRoomGroup_Handler,
		},
		{
			MethodName: "MuteUserInGroup",
			Handler:    _ChatRoom_MuteUserInGroup_Handler,
		},
		{
			MethodName: "KickUserFromGroup",
			Handler:    _ChatRoom_KickUserFromGroup_Handler,
		},
		{
			MethodName: "SetUserBanState",
			Handler:    _ChatRoom_SetUserBanState_Handler,
		},
		{
			MethodName: "RevokeInviteToGroup",
			Handler:    _ChatRoom_RevokeInviteToGroup_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ChatRoom_CreateRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _ChatRoom_GetRoles_Handler,
		},
		{
			MethodName: "RenameRole",
			Handler:    _ChatRoom_RenameRole_Handler,
		},
		{
			MethodName: "ReorderRole",
			Handler:    _ChatRoom_ReorderRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _ChatRoom_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleActions",
			Handler:    _ChatRoom_GetRoleActions_Handler,
		},
		{
			MethodName: "ReplaceRoleActions",
			Handler:    _ChatRoom_ReplaceRoleActions_Handler,
		},
		{
			MethodName: "AddRoleToUser",
			Handler:    _ChatRoom_AddRoleToUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _ChatRoom_GetRolesForUser_Handler,
		},
		{
			MethodName: "DeleteRoleFromUser",
			Handler:    _ChatRoom_DeleteRoleFromUser_Handler,
		},
		{
			MethodName: "JoinChatRoomGroup",
			Handler:    _ChatRoom_JoinChatRoomGroup_Handler,
		},
		{
			MethodName: "InviteFriendToChatRoomGroup",
			Handler:    _ChatRoom_InviteFriendToChatRoomGroup_Handler,
		},
		{
			MethodName: "LeaveChatRoomGroup",
			Handler:    _ChatRoom_LeaveChatRoomGroup_Handler,
		},
		{
			MethodName: "CreateChatRoom",
			Handler:    _ChatRoom_CreateChatRoom_Handler,
		},
		{
			MethodName: "DeleteChatRoom",
			Handler:    _ChatRoom_DeleteChatRoom_Handler,
		},
		{
			MethodName: "RenameChatRoom",
			Handler:    _ChatRoom_RenameChatRoom_Handler,
		},
		{
			MethodName: "ReorderChatRoom",
			Handler:    _ChatRoom_ReorderChatRoom_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _ChatRoom_SendChatMessage_Handler,
		},
		{
			MethodName: "JoinVoiceChat",
			Handler:    _ChatRoom_JoinVoiceChat_Handler,
		},
		{
			MethodName: "LeaveVoiceChat",
			Handler:    _ChatRoom_LeaveVoiceChat_Handler,
		},
		{
			MethodName: "GetMessageHistory",
			Handler:    _ChatRoom_GetMessageHistory_Handler,
		},
		{
			MethodName: "GetMyChatRoomGroups",
			Handler:    _ChatRoom_GetMyChatRoomGroups_Handler,
		},
		{
			MethodName: "GetChatRoomGroupState",
			Handler:    _ChatRoom_GetChatRoomGroupState_Handler,
		},
		{
			MethodName: "GetChatRoomGroupSummary",
			Handler:    _ChatRoom_GetChatRoomGroupSummary_Handler,
		},
		{
			MethodName: "SetAppChatRoomGroupForceActive",
			Handler:    _ChatRoom_SetAppChatRoomGroupForceActive_Handler,
		},
		{
			MethodName: "SetAppChatRoomGroupStopForceActive",
			Handler:    _ChatRoom_SetAppChatRoomGroupStopForceActive_Handler,
		},
		{
			MethodName: "AckChatMessage",
			Handler:    _ChatRoom_AckChatMessage_Handler,
		},
		{
			MethodName: "CreateInviteLink",
			Handler:    _ChatRoom_CreateInviteLink_Handler,
		},
		{
			MethodName: "GetInviteLinkInfo",
			Handler:    _ChatRoom_GetInviteLinkInfo_Handler,
		},
		{
			MethodName: "GetInviteInfo",
			Handler:    _ChatRoom_GetInviteInfo_Handler,
		},
		{
			MethodName: "GetInviteLinksForGroup",
			Handler:    _ChatRoom_GetInviteLinksForGroup_Handler,
		},
		{
			MethodName: "GetBanList",
			Handler:    _ChatRoom_GetBanList_Handler,
		},
		{
			MethodName: "GetInviteList",
			Handler:    _ChatRoom_GetInviteList_Handler,
		},
		{
			MethodName: "DeleteInviteLink",
			Handler:    _ChatRoom_DeleteInviteLink_Handler,
		},
		{
			MethodName: "SetSessionActiveChatRoomGroups",
			Handler:    _ChatRoom_SetSessionActiveChatRoomGroups_Handler,
		},
		{
			MethodName: "SetUserChatGroupPreferences",
			Handler:    _ChatRoom_SetUserChatGroupPreferences_Handler,
		},
		{
			MethodName: "DeleteChatMessages",
			Handler:    _ChatRoom_DeleteChatMessages_Handler,
		},
		{
			MethodName: "UpdateMemberListView",
			Handler:    _ChatRoom_UpdateMemberListView_Handler,
		},
		{
			MethodName: "SearchMembers",
			Handler:    _ChatRoom_SearchMembers_Handler,
		},
		{
			MethodName: "UpdateMessageReaction",
			Handler:    _ChatRoom_UpdateMessageReaction_Handler,
		},
		{
			MethodName: "GetMessageReactionReactors",
			Handler:    _ChatRoom_GetMessageReactionReactors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}

// ClanChatRoomsClient is the client API for ClanChatRooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClanChatRoomsClient interface {
	GetClanChatRoomInfo(ctx context.Context, in *CClanChatRooms_GetClanChatRoomInfo_Request, opts ...grpc.CallOption) (*CClanChatRooms_GetClanChatRoomInfo_Response, error)
	SetClanChatRoomPrivate(ctx context.Context, in *CClanChatRooms_SetClanChatRoomPrivate_Request, opts ...grpc.CallOption) (*CClanChatRooms_SetClanChatRoomPrivate_Response, error)
}

type clanChatRoomsClient struct {
	cc grpc.ClientConnInterface
}

func NewClanChatRoomsClient(cc grpc.ClientConnInterface) ClanChatRoomsClient {
	return &clanChatRoomsClient{cc}
}

func (c *clanChatRoomsClient) GetClanChatRoomInfo(ctx context.Context, in *CClanChatRooms_GetClanChatRoomInfo_Request, opts ...grpc.CallOption) (*CClanChatRooms_GetClanChatRoomInfo_Response, error) {
	out := new(CClanChatRooms_GetClanChatRoomInfo_Response)
	err := c.cc.Invoke(ctx, "/ClanChatRooms/GetClanChatRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clanChatRoomsClient) SetClanChatRoomPrivate(ctx context.Context, in *CClanChatRooms_SetClanChatRoomPrivate_Request, opts ...grpc.CallOption) (*CClanChatRooms_SetClanChatRoomPrivate_Response, error) {
	out := new(CClanChatRooms_SetClanChatRoomPrivate_Response)
	err := c.cc.Invoke(ctx, "/ClanChatRooms/SetClanChatRoomPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClanChatRoomsServer is the server API for ClanChatRooms service.
// All implementations must embed UnimplementedClanChatRoomsServer
// for forward compatibility
type ClanChatRoomsServer interface {
	GetClanChatRoomInfo(context.Context, *CClanChatRooms_GetClanChatRoomInfo_Request) (*CClanChatRooms_GetClanChatRoomInfo_Response, error)
	SetClanChatRoomPrivate(context.Context, *CClanChatRooms_SetClanChatRoomPrivate_Request) (*CClanChatRooms_SetClanChatRoomPrivate_Response, error)
	mustEmbedUnimplementedClanChatRoomsServer()
}

// UnimplementedClanChatRoomsServer must be embedded to have forward compatible implementations.
type UnimplementedClanChatRoomsServer struct {
}

func (UnimplementedClanChatRoomsServer) GetClanChatRoomInfo(context.Context, *CClanChatRooms_GetClanChatRoomInfo_Request) (*CClanChatRooms_GetClanChatRoomInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClanChatRoomInfo not implemented")
}
func (UnimplementedClanChatRoomsServer) SetClanChatRoomPrivate(context.Context, *CClanChatRooms_SetClanChatRoomPrivate_Request) (*CClanChatRooms_SetClanChatRoomPrivate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClanChatRoomPrivate not implemented")
}
func (UnimplementedClanChatRoomsServer) mustEmbedUnimplementedClanChatRoomsServer() {}

// UnsafeClanChatRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClanChatRoomsServer will
// result in compilation errors.
type UnsafeClanChatRoomsServer interface {
	mustEmbedUnimplementedClanChatRoomsServer()
}

func RegisterClanChatRoomsServer(s grpc.ServiceRegistrar, srv ClanChatRoomsServer) {
	s.RegisterService(&ClanChatRooms_ServiceDesc, srv)
}

func _ClanChatRooms_GetClanChatRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClanChatRooms_GetClanChatRoomInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClanChatRoomsServer).GetClanChatRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClanChatRooms/GetClanChatRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClanChatRoomsServer).GetClanChatRoomInfo(ctx, req.(*CClanChatRooms_GetClanChatRoomInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClanChatRooms_SetClanChatRoomPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClanChatRooms_SetClanChatRoomPrivate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClanChatRoomsServer).SetClanChatRoomPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClanChatRooms/SetClanChatRoomPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClanChatRoomsServer).SetClanChatRoomPrivate(ctx, req.(*CClanChatRooms_SetClanChatRoomPrivate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ClanChatRooms_ServiceDesc is the grpc.ServiceDesc for ClanChatRooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClanChatRooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClanChatRooms",
	HandlerType: (*ClanChatRoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClanChatRoomInfo",
			Handler:    _ClanChatRooms_GetClanChatRoomInfo_Handler,
		},
		{
			MethodName: "SetClanChatRoomPrivate",
			Handler:    _ClanChatRooms_SetClanChatRoomPrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}

// ChatRoomClientClient is the client API for ChatRoomClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomClientClient interface {
	NotifyIncomingChatMessage(ctx context.Context, in *CChatRoom_IncomingChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyChatMessageModified(ctx context.Context, in *CChatRoom_ChatMessageModified_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyMemberStateChange(ctx context.Context, in *CChatRoom_MemberStateChange_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyChatRoomHeaderStateChange(ctx context.Context, in *CChatRoom_ChatRoomHeaderState_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyChatRoomGroupRoomsChange(ctx context.Context, in *CChatRoom_ChatRoomGroupRoomsChange_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyShouldRejoinChatRoomVoiceChat(ctx context.Context, in *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyChatGroupUserStateChanged(ctx context.Context, in *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyAckChatMessageEcho(ctx context.Context, in *CChatRoom_AckChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyChatRoomDisconnect(ctx context.Context, in *ChatRoomClient_NotifyChatRoomDisconnect_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyMemberListViewUpdated(ctx context.Context, in *CChatRoomClient_MemberListViewUpdated_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyMessageReaction(ctx context.Context, in *CChatRoom_MessageReaction_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type chatRoomClientClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomClientClient(cc grpc.ClientConnInterface) ChatRoomClientClient {
	return &chatRoomClientClient{cc}
}

func (c *chatRoomClientClient) NotifyIncomingChatMessage(ctx context.Context, in *CChatRoom_IncomingChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyIncomingChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyChatMessageModified(ctx context.Context, in *CChatRoom_ChatMessageModified_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyChatMessageModified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyMemberStateChange(ctx context.Context, in *CChatRoom_MemberStateChange_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyMemberStateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyChatRoomHeaderStateChange(ctx context.Context, in *CChatRoom_ChatRoomHeaderState_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyChatRoomHeaderStateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyChatRoomGroupRoomsChange(ctx context.Context, in *CChatRoom_ChatRoomGroupRoomsChange_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyChatRoomGroupRoomsChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyShouldRejoinChatRoomVoiceChat(ctx context.Context, in *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyShouldRejoinChatRoomVoiceChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyChatGroupUserStateChanged(ctx context.Context, in *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyChatGroupUserStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyAckChatMessageEcho(ctx context.Context, in *CChatRoom_AckChatMessage_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyAckChatMessageEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyChatRoomDisconnect(ctx context.Context, in *ChatRoomClient_NotifyChatRoomDisconnect_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyChatRoomDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyMemberListViewUpdated(ctx context.Context, in *CChatRoomClient_MemberListViewUpdated_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyMemberListViewUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClientClient) NotifyMessageReaction(ctx context.Context, in *CChatRoom_MessageReaction_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatRoomClient/NotifyMessageReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomClientServer is the server API for ChatRoomClient service.
// All implementations must embed UnimplementedChatRoomClientServer
// for forward compatibility
type ChatRoomClientServer interface {
	NotifyIncomingChatMessage(context.Context, *CChatRoom_IncomingChatMessage_Notification) (*NoResponse, error)
	NotifyChatMessageModified(context.Context, *CChatRoom_ChatMessageModified_Notification) (*NoResponse, error)
	NotifyMemberStateChange(context.Context, *CChatRoom_MemberStateChange_Notification) (*NoResponse, error)
	NotifyChatRoomHeaderStateChange(context.Context, *CChatRoom_ChatRoomHeaderState_Notification) (*NoResponse, error)
	NotifyChatRoomGroupRoomsChange(context.Context, *CChatRoom_ChatRoomGroupRoomsChange_Notification) (*NoResponse, error)
	NotifyShouldRejoinChatRoomVoiceChat(context.Context, *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) (*NoResponse, error)
	NotifyChatGroupUserStateChanged(context.Context, *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) (*NoResponse, error)
	NotifyAckChatMessageEcho(context.Context, *CChatRoom_AckChatMessage_Notification) (*NoResponse, error)
	NotifyChatRoomDisconnect(context.Context, *ChatRoomClient_NotifyChatRoomDisconnect_Notification) (*NoResponse, error)
	NotifyMemberListViewUpdated(context.Context, *CChatRoomClient_MemberListViewUpdated_Notification) (*NoResponse, error)
	NotifyMessageReaction(context.Context, *CChatRoom_MessageReaction_Notification) (*NoResponse, error)
	mustEmbedUnimplementedChatRoomClientServer()
}

// UnimplementedChatRoomClientServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomClientServer struct {
}

func (UnimplementedChatRoomClientServer) NotifyIncomingChatMessage(context.Context, *CChatRoom_IncomingChatMessage_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyIncomingChatMessage not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyChatMessageModified(context.Context, *CChatRoom_ChatMessageModified_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChatMessageModified not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyMemberStateChange(context.Context, *CChatRoom_MemberStateChange_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMemberStateChange not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyChatRoomHeaderStateChange(context.Context, *CChatRoom_ChatRoomHeaderState_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChatRoomHeaderStateChange not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyChatRoomGroupRoomsChange(context.Context, *CChatRoom_ChatRoomGroupRoomsChange_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChatRoomGroupRoomsChange not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyShouldRejoinChatRoomVoiceChat(context.Context, *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyShouldRejoinChatRoomVoiceChat not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyChatGroupUserStateChanged(context.Context, *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChatGroupUserStateChanged not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyAckChatMessageEcho(context.Context, *CChatRoom_AckChatMessage_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAckChatMessageEcho not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyChatRoomDisconnect(context.Context, *ChatRoomClient_NotifyChatRoomDisconnect_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChatRoomDisconnect not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyMemberListViewUpdated(context.Context, *CChatRoomClient_MemberListViewUpdated_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMemberListViewUpdated not implemented")
}
func (UnimplementedChatRoomClientServer) NotifyMessageReaction(context.Context, *CChatRoom_MessageReaction_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMessageReaction not implemented")
}
func (UnimplementedChatRoomClientServer) mustEmbedUnimplementedChatRoomClientServer() {}

// UnsafeChatRoomClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomClientServer will
// result in compilation errors.
type UnsafeChatRoomClientServer interface {
	mustEmbedUnimplementedChatRoomClientServer()
}

func RegisterChatRoomClientServer(s grpc.ServiceRegistrar, srv ChatRoomClientServer) {
	s.RegisterService(&ChatRoomClient_ServiceDesc, srv)
}

func _ChatRoomClient_NotifyIncomingChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_IncomingChatMessage_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyIncomingChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyIncomingChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyIncomingChatMessage(ctx, req.(*CChatRoom_IncomingChatMessage_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyChatMessageModified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ChatMessageModified_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyChatMessageModified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyChatMessageModified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyChatMessageModified(ctx, req.(*CChatRoom_ChatMessageModified_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyMemberStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_MemberStateChange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyMemberStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyMemberStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyMemberStateChange(ctx, req.(*CChatRoom_MemberStateChange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyChatRoomHeaderStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ChatRoomHeaderState_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyChatRoomHeaderStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyChatRoomHeaderStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyChatRoomHeaderStateChange(ctx, req.(*CChatRoom_ChatRoomHeaderState_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyChatRoomGroupRoomsChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_ChatRoomGroupRoomsChange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyChatRoomGroupRoomsChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyChatRoomGroupRoomsChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyChatRoomGroupRoomsChange(ctx, req.(*CChatRoom_ChatRoomGroupRoomsChange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyShouldRejoinChatRoomVoiceChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyShouldRejoinChatRoomVoiceChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyShouldRejoinChatRoomVoiceChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyShouldRejoinChatRoomVoiceChat(ctx, req.(*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyChatGroupUserStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyChatGroupUserStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyChatGroupUserStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyChatGroupUserStateChanged(ctx, req.(*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyAckChatMessageEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_AckChatMessage_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyAckChatMessageEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyAckChatMessageEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyAckChatMessageEcho(ctx, req.(*CChatRoom_AckChatMessage_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyChatRoomDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRoomClient_NotifyChatRoomDisconnect_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyChatRoomDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyChatRoomDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyChatRoomDisconnect(ctx, req.(*ChatRoomClient_NotifyChatRoomDisconnect_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyMemberListViewUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoomClient_MemberListViewUpdated_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyMemberListViewUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyMemberListViewUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyMemberListViewUpdated(ctx, req.(*CChatRoomClient_MemberListViewUpdated_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomClient_NotifyMessageReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatRoom_MessageReaction_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomClientServer).NotifyMessageReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatRoomClient/NotifyMessageReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomClientServer).NotifyMessageReaction(ctx, req.(*CChatRoom_MessageReaction_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoomClient_ServiceDesc is the grpc.ServiceDesc for ChatRoomClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRoomClient",
	HandlerType: (*ChatRoomClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyIncomingChatMessage",
			Handler:    _ChatRoomClient_NotifyIncomingChatMessage_Handler,
		},
		{
			MethodName: "NotifyChatMessageModified",
			Handler:    _ChatRoomClient_NotifyChatMessageModified_Handler,
		},
		{
			MethodName: "NotifyMemberStateChange",
			Handler:    _ChatRoomClient_NotifyMemberStateChange_Handler,
		},
		{
			MethodName: "NotifyChatRoomHeaderStateChange",
			Handler:    _ChatRoomClient_NotifyChatRoomHeaderStateChange_Handler,
		},
		{
			MethodName: "NotifyChatRoomGroupRoomsChange",
			Handler:    _ChatRoomClient_NotifyChatRoomGroupRoomsChange_Handler,
		},
		{
			MethodName: "NotifyShouldRejoinChatRoomVoiceChat",
			Handler:    _ChatRoomClient_NotifyShouldRejoinChatRoomVoiceChat_Handler,
		},
		{
			MethodName: "NotifyChatGroupUserStateChanged",
			Handler:    _ChatRoomClient_NotifyChatGroupUserStateChanged_Handler,
		},
		{
			MethodName: "NotifyAckChatMessageEcho",
			Handler:    _ChatRoomClient_NotifyAckChatMessageEcho_Handler,
		},
		{
			MethodName: "NotifyChatRoomDisconnect",
			Handler:    _ChatRoomClient_NotifyChatRoomDisconnect_Handler,
		},
		{
			MethodName: "NotifyMemberListViewUpdated",
			Handler:    _ChatRoomClient_NotifyMemberListViewUpdated_Handler,
		},
		{
			MethodName: "NotifyMessageReaction",
			Handler:    _ChatRoomClient_NotifyMessageReaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}

// ChatUsabilityClient is the client API for ChatUsability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatUsabilityClient interface {
	NotifyClientUsabilityMetrics(ctx context.Context, in *CChatUsability_ClientUsabilityMetrics_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type chatUsabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewChatUsabilityClient(cc grpc.ClientConnInterface) ChatUsabilityClient {
	return &chatUsabilityClient{cc}
}

func (c *chatUsabilityClient) NotifyClientUsabilityMetrics(ctx context.Context, in *CChatUsability_ClientUsabilityMetrics_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatUsability/NotifyClientUsabilityMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatUsabilityServer is the server API for ChatUsability service.
// All implementations must embed UnimplementedChatUsabilityServer
// for forward compatibility
type ChatUsabilityServer interface {
	NotifyClientUsabilityMetrics(context.Context, *CChatUsability_ClientUsabilityMetrics_Notification) (*NoResponse, error)
	mustEmbedUnimplementedChatUsabilityServer()
}

// UnimplementedChatUsabilityServer must be embedded to have forward compatible implementations.
type UnimplementedChatUsabilityServer struct {
}

func (UnimplementedChatUsabilityServer) NotifyClientUsabilityMetrics(context.Context, *CChatUsability_ClientUsabilityMetrics_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClientUsabilityMetrics not implemented")
}
func (UnimplementedChatUsabilityServer) mustEmbedUnimplementedChatUsabilityServer() {}

// UnsafeChatUsabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatUsabilityServer will
// result in compilation errors.
type UnsafeChatUsabilityServer interface {
	mustEmbedUnimplementedChatUsabilityServer()
}

func RegisterChatUsabilityServer(s grpc.ServiceRegistrar, srv ChatUsabilityServer) {
	s.RegisterService(&ChatUsability_ServiceDesc, srv)
}

func _ChatUsability_NotifyClientUsabilityMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatUsability_ClientUsabilityMetrics_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatUsabilityServer).NotifyClientUsabilityMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatUsability/NotifyClientUsabilityMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatUsabilityServer).NotifyClientUsabilityMetrics(ctx, req.(*CChatUsability_ClientUsabilityMetrics_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatUsability_ServiceDesc is the grpc.ServiceDesc for ChatUsability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatUsability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatUsability",
	HandlerType: (*ChatUsabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyClientUsabilityMetrics",
			Handler:    _ChatUsability_NotifyClientUsabilityMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}

// ChatUsabilityClientClient is the client API for ChatUsabilityClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatUsabilityClientClient interface {
	NotifyRequestClientUsabilityMetrics(ctx context.Context, in *CChatUsability_RequestClientUsabilityMetrics_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type chatUsabilityClientClient struct {
	cc grpc.ClientConnInterface
}

func NewChatUsabilityClientClient(cc grpc.ClientConnInterface) ChatUsabilityClientClient {
	return &chatUsabilityClientClient{cc}
}

func (c *chatUsabilityClientClient) NotifyRequestClientUsabilityMetrics(ctx context.Context, in *CChatUsability_RequestClientUsabilityMetrics_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ChatUsabilityClient/NotifyRequestClientUsabilityMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatUsabilityClientServer is the server API for ChatUsabilityClient service.
// All implementations must embed UnimplementedChatUsabilityClientServer
// for forward compatibility
type ChatUsabilityClientServer interface {
	NotifyRequestClientUsabilityMetrics(context.Context, *CChatUsability_RequestClientUsabilityMetrics_Notification) (*NoResponse, error)
	mustEmbedUnimplementedChatUsabilityClientServer()
}

// UnimplementedChatUsabilityClientServer must be embedded to have forward compatible implementations.
type UnimplementedChatUsabilityClientServer struct {
}

func (UnimplementedChatUsabilityClientServer) NotifyRequestClientUsabilityMetrics(context.Context, *CChatUsability_RequestClientUsabilityMetrics_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRequestClientUsabilityMetrics not implemented")
}
func (UnimplementedChatUsabilityClientServer) mustEmbedUnimplementedChatUsabilityClientServer() {}

// UnsafeChatUsabilityClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatUsabilityClientServer will
// result in compilation errors.
type UnsafeChatUsabilityClientServer interface {
	mustEmbedUnimplementedChatUsabilityClientServer()
}

func RegisterChatUsabilityClientServer(s grpc.ServiceRegistrar, srv ChatUsabilityClientServer) {
	s.RegisterService(&ChatUsabilityClient_ServiceDesc, srv)
}

func _ChatUsabilityClient_NotifyRequestClientUsabilityMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChatUsability_RequestClientUsabilityMetrics_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatUsabilityClientServer).NotifyRequestClientUsabilityMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatUsabilityClient/NotifyRequestClientUsabilityMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatUsabilityClientServer).NotifyRequestClientUsabilityMetrics(ctx, req.(*CChatUsability_RequestClientUsabilityMetrics_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatUsabilityClient_ServiceDesc is the grpc.ServiceDesc for ChatUsabilityClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatUsabilityClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatUsabilityClient",
	HandlerType: (*ChatUsabilityClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRequestClientUsabilityMetrics",
			Handler:    _ChatUsabilityClient_NotifyRequestClientUsabilityMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_chat.steamclient.proto",
}
