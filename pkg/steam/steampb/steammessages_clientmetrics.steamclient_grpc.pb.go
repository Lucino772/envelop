// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_clientmetrics.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientMetricsClient is the client API for ClientMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientMetricsClient interface {
	ClientAppInterfaceStatsReport(ctx context.Context, in *CClientMetrics_AppInterfaceStats_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientIPv6ConnectivityReport(ctx context.Context, in *CClientMetrics_IPv6Connectivity_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SteamPipeWorkStatsReport(ctx context.Context, in *CClientMetrics_SteamPipeWorkStats_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportReactUsage(ctx context.Context, in *CClientMetrics_ReportReactUsage_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportClientError(ctx context.Context, in *CClientMetrics_ReportClientError_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientBootstrapReport(ctx context.Context, in *CClientMetrics_ClientBootstrap_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientDownloadRatesReport(ctx context.Context, in *CClientMetrics_DownloadRates_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientContentValidationReport(ctx context.Context, in *CClientMetrics_ContentValidation_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientCloudAppSyncStats(ctx context.Context, in *CClientMetrics_CloudAppSyncStats_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientDownloadResponseCodeCounts(ctx context.Context, in *CClientMetrics_ContentDownloadResponse_Counts_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportClientArgs(ctx context.Context, in *CClientMetrics_ReportClientArgs_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportClipShare(ctx context.Context, in *CClientMetrics_ClipShare_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportClipRange(ctx context.Context, in *CClientMetrics_ClipRange_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ReportEndGameRecording(ctx context.Context, in *CClientMetrics_EndGameRecording_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type clientMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewClientMetricsClient(cc grpc.ClientConnInterface) ClientMetricsClient {
	return &clientMetricsClient{cc}
}

func (c *clientMetricsClient) ClientAppInterfaceStatsReport(ctx context.Context, in *CClientMetrics_AppInterfaceStats_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientAppInterfaceStatsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientIPv6ConnectivityReport(ctx context.Context, in *CClientMetrics_IPv6Connectivity_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientIPv6ConnectivityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) SteamPipeWorkStatsReport(ctx context.Context, in *CClientMetrics_SteamPipeWorkStats_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/SteamPipeWorkStatsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportReactUsage(ctx context.Context, in *CClientMetrics_ReportReactUsage_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportReactUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportClientError(ctx context.Context, in *CClientMetrics_ReportClientError_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientBootstrapReport(ctx context.Context, in *CClientMetrics_ClientBootstrap_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientBootstrapReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientDownloadRatesReport(ctx context.Context, in *CClientMetrics_DownloadRates_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientDownloadRatesReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientContentValidationReport(ctx context.Context, in *CClientMetrics_ContentValidation_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientContentValidationReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientCloudAppSyncStats(ctx context.Context, in *CClientMetrics_CloudAppSyncStats_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientCloudAppSyncStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ClientDownloadResponseCodeCounts(ctx context.Context, in *CClientMetrics_ContentDownloadResponse_Counts_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ClientDownloadResponseCodeCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportClientArgs(ctx context.Context, in *CClientMetrics_ReportClientArgs_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportClientArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportClipShare(ctx context.Context, in *CClientMetrics_ClipShare_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportClipShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportClipRange(ctx context.Context, in *CClientMetrics_ClipRange_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportClipRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMetricsClient) ReportEndGameRecording(ctx context.Context, in *CClientMetrics_EndGameRecording_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ClientMetrics/ReportEndGameRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientMetricsServer is the server API for ClientMetrics service.
// All implementations must embed UnimplementedClientMetricsServer
// for forward compatibility
type ClientMetricsServer interface {
	ClientAppInterfaceStatsReport(context.Context, *CClientMetrics_AppInterfaceStats_Notification) (*NoResponse, error)
	ClientIPv6ConnectivityReport(context.Context, *CClientMetrics_IPv6Connectivity_Notification) (*NoResponse, error)
	SteamPipeWorkStatsReport(context.Context, *CClientMetrics_SteamPipeWorkStats_Notification) (*NoResponse, error)
	ReportReactUsage(context.Context, *CClientMetrics_ReportReactUsage_Notification) (*NoResponse, error)
	ReportClientError(context.Context, *CClientMetrics_ReportClientError_Notification) (*NoResponse, error)
	ClientBootstrapReport(context.Context, *CClientMetrics_ClientBootstrap_Notification) (*NoResponse, error)
	ClientDownloadRatesReport(context.Context, *CClientMetrics_DownloadRates_Notification) (*NoResponse, error)
	ClientContentValidationReport(context.Context, *CClientMetrics_ContentValidation_Notification) (*NoResponse, error)
	ClientCloudAppSyncStats(context.Context, *CClientMetrics_CloudAppSyncStats_Notification) (*NoResponse, error)
	ClientDownloadResponseCodeCounts(context.Context, *CClientMetrics_ContentDownloadResponse_Counts_Notification) (*NoResponse, error)
	ReportClientArgs(context.Context, *CClientMetrics_ReportClientArgs_Notification) (*NoResponse, error)
	ReportClipShare(context.Context, *CClientMetrics_ClipShare_Notification) (*NoResponse, error)
	ReportClipRange(context.Context, *CClientMetrics_ClipRange_Notification) (*NoResponse, error)
	ReportEndGameRecording(context.Context, *CClientMetrics_EndGameRecording_Notification) (*NoResponse, error)
	mustEmbedUnimplementedClientMetricsServer()
}

// UnimplementedClientMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedClientMetricsServer struct {
}

func (UnimplementedClientMetricsServer) ClientAppInterfaceStatsReport(context.Context, *CClientMetrics_AppInterfaceStats_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAppInterfaceStatsReport not implemented")
}
func (UnimplementedClientMetricsServer) ClientIPv6ConnectivityReport(context.Context, *CClientMetrics_IPv6Connectivity_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientIPv6ConnectivityReport not implemented")
}
func (UnimplementedClientMetricsServer) SteamPipeWorkStatsReport(context.Context, *CClientMetrics_SteamPipeWorkStats_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamPipeWorkStatsReport not implemented")
}
func (UnimplementedClientMetricsServer) ReportReactUsage(context.Context, *CClientMetrics_ReportReactUsage_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportReactUsage not implemented")
}
func (UnimplementedClientMetricsServer) ReportClientError(context.Context, *CClientMetrics_ReportClientError_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClientError not implemented")
}
func (UnimplementedClientMetricsServer) ClientBootstrapReport(context.Context, *CClientMetrics_ClientBootstrap_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientBootstrapReport not implemented")
}
func (UnimplementedClientMetricsServer) ClientDownloadRatesReport(context.Context, *CClientMetrics_DownloadRates_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDownloadRatesReport not implemented")
}
func (UnimplementedClientMetricsServer) ClientContentValidationReport(context.Context, *CClientMetrics_ContentValidation_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientContentValidationReport not implemented")
}
func (UnimplementedClientMetricsServer) ClientCloudAppSyncStats(context.Context, *CClientMetrics_CloudAppSyncStats_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCloudAppSyncStats not implemented")
}
func (UnimplementedClientMetricsServer) ClientDownloadResponseCodeCounts(context.Context, *CClientMetrics_ContentDownloadResponse_Counts_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDownloadResponseCodeCounts not implemented")
}
func (UnimplementedClientMetricsServer) ReportClientArgs(context.Context, *CClientMetrics_ReportClientArgs_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClientArgs not implemented")
}
func (UnimplementedClientMetricsServer) ReportClipShare(context.Context, *CClientMetrics_ClipShare_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClipShare not implemented")
}
func (UnimplementedClientMetricsServer) ReportClipRange(context.Context, *CClientMetrics_ClipRange_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClipRange not implemented")
}
func (UnimplementedClientMetricsServer) ReportEndGameRecording(context.Context, *CClientMetrics_EndGameRecording_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEndGameRecording not implemented")
}
func (UnimplementedClientMetricsServer) mustEmbedUnimplementedClientMetricsServer() {}

// UnsafeClientMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientMetricsServer will
// result in compilation errors.
type UnsafeClientMetricsServer interface {
	mustEmbedUnimplementedClientMetricsServer()
}

func RegisterClientMetricsServer(s grpc.ServiceRegistrar, srv ClientMetricsServer) {
	s.RegisterService(&ClientMetrics_ServiceDesc, srv)
}

func _ClientMetrics_ClientAppInterfaceStatsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_AppInterfaceStats_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientAppInterfaceStatsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientAppInterfaceStatsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientAppInterfaceStatsReport(ctx, req.(*CClientMetrics_AppInterfaceStats_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientIPv6ConnectivityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_IPv6Connectivity_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientIPv6ConnectivityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientIPv6ConnectivityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientIPv6ConnectivityReport(ctx, req.(*CClientMetrics_IPv6Connectivity_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_SteamPipeWorkStatsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_SteamPipeWorkStats_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).SteamPipeWorkStatsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/SteamPipeWorkStatsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).SteamPipeWorkStatsReport(ctx, req.(*CClientMetrics_SteamPipeWorkStats_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportReactUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ReportReactUsage_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportReactUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportReactUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportReactUsage(ctx, req.(*CClientMetrics_ReportReactUsage_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ReportClientError_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportClientError(ctx, req.(*CClientMetrics_ReportClientError_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientBootstrapReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ClientBootstrap_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientBootstrapReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientBootstrapReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientBootstrapReport(ctx, req.(*CClientMetrics_ClientBootstrap_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientDownloadRatesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_DownloadRates_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientDownloadRatesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientDownloadRatesReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientDownloadRatesReport(ctx, req.(*CClientMetrics_DownloadRates_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientContentValidationReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ContentValidation_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientContentValidationReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientContentValidationReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientContentValidationReport(ctx, req.(*CClientMetrics_ContentValidation_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientCloudAppSyncStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_CloudAppSyncStats_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientCloudAppSyncStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientCloudAppSyncStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientCloudAppSyncStats(ctx, req.(*CClientMetrics_CloudAppSyncStats_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ClientDownloadResponseCodeCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ContentDownloadResponse_Counts_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ClientDownloadResponseCodeCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ClientDownloadResponseCodeCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ClientDownloadResponseCodeCounts(ctx, req.(*CClientMetrics_ContentDownloadResponse_Counts_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportClientArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ReportClientArgs_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportClientArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportClientArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportClientArgs(ctx, req.(*CClientMetrics_ReportClientArgs_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportClipShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ClipShare_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportClipShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportClipShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportClipShare(ctx, req.(*CClientMetrics_ClipShare_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportClipRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_ClipRange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportClipRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportClipRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportClipRange(ctx, req.(*CClientMetrics_ClipRange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMetrics_ReportEndGameRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientMetrics_EndGameRecording_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMetricsServer).ReportEndGameRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientMetrics/ReportEndGameRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMetricsServer).ReportEndGameRecording(ctx, req.(*CClientMetrics_EndGameRecording_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientMetrics_ServiceDesc is the grpc.ServiceDesc for ClientMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientMetrics",
	HandlerType: (*ClientMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientAppInterfaceStatsReport",
			Handler:    _ClientMetrics_ClientAppInterfaceStatsReport_Handler,
		},
		{
			MethodName: "ClientIPv6ConnectivityReport",
			Handler:    _ClientMetrics_ClientIPv6ConnectivityReport_Handler,
		},
		{
			MethodName: "SteamPipeWorkStatsReport",
			Handler:    _ClientMetrics_SteamPipeWorkStatsReport_Handler,
		},
		{
			MethodName: "ReportReactUsage",
			Handler:    _ClientMetrics_ReportReactUsage_Handler,
		},
		{
			MethodName: "ReportClientError",
			Handler:    _ClientMetrics_ReportClientError_Handler,
		},
		{
			MethodName: "ClientBootstrapReport",
			Handler:    _ClientMetrics_ClientBootstrapReport_Handler,
		},
		{
			MethodName: "ClientDownloadRatesReport",
			Handler:    _ClientMetrics_ClientDownloadRatesReport_Handler,
		},
		{
			MethodName: "ClientContentValidationReport",
			Handler:    _ClientMetrics_ClientContentValidationReport_Handler,
		},
		{
			MethodName: "ClientCloudAppSyncStats",
			Handler:    _ClientMetrics_ClientCloudAppSyncStats_Handler,
		},
		{
			MethodName: "ClientDownloadResponseCodeCounts",
			Handler:    _ClientMetrics_ClientDownloadResponseCodeCounts_Handler,
		},
		{
			MethodName: "ReportClientArgs",
			Handler:    _ClientMetrics_ReportClientArgs_Handler,
		},
		{
			MethodName: "ReportClipShare",
			Handler:    _ClientMetrics_ReportClipShare_Handler,
		},
		{
			MethodName: "ReportClipRange",
			Handler:    _ClientMetrics_ReportClipRange_Handler,
		},
		{
			MethodName: "ReportEndGameRecording",
			Handler:    _ClientMetrics_ReportEndGameRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_clientmetrics.steamclient.proto",
}
