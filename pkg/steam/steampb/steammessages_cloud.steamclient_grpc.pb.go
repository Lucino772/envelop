// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_cloud.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudClient is the client API for Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudClient interface {
	ClientLogUploadCheck(ctx context.Context, in *CCloud_ClientLogUploadCheck_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientLogUploadComplete(ctx context.Context, in *CCloud_ClientLogUploadComplete_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetUploadServerInfo(ctx context.Context, in *CCloud_GetUploadServerInfo_Request, opts ...grpc.CallOption) (*CCloud_GetUploadServerInfo_Response, error)
	BeginHTTPUpload(ctx context.Context, in *CCloud_BeginHTTPUpload_Request, opts ...grpc.CallOption) (*CCloud_BeginHTTPUpload_Response, error)
	CommitHTTPUpload(ctx context.Context, in *CCloud_CommitHTTPUpload_Request, opts ...grpc.CallOption) (*CCloud_CommitHTTPUpload_Response, error)
	BeginUGCUpload(ctx context.Context, in *CCloud_BeginUGCUpload_Request, opts ...grpc.CallOption) (*CCloud_BeginUGCUpload_Response, error)
	CommitUGCUpload(ctx context.Context, in *CCloud_CommitUGCUpload_Request, opts ...grpc.CallOption) (*CCloud_CommitUGCUpload_Response, error)
	GetFileDetails(ctx context.Context, in *CCloud_GetFileDetails_Request, opts ...grpc.CallOption) (*CCloud_GetFileDetails_Response, error)
	EnumerateUserFiles(ctx context.Context, in *CCloud_EnumerateUserFiles_Request, opts ...grpc.CallOption) (*CCloud_EnumerateUserFiles_Response, error)
	Delete(ctx context.Context, in *CCloud_Delete_Request, opts ...grpc.CallOption) (*CCloud_Delete_Response, error)
	GetClientEncryptionKey(ctx context.Context, in *CCloud_GetClientEncryptionKey_Request, opts ...grpc.CallOption) (*CCloud_GetClientEncryptionKey_Response, error)
	CDNReport(ctx context.Context, in *CCloud_CDNReport_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ExternalStorageTransferReport(ctx context.Context, in *CCloud_ExternalStorageTransferReport_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	BeginAppUploadBatch(ctx context.Context, in *CCloud_BeginAppUploadBatch_Request, opts ...grpc.CallOption) (*CCloud_BeginAppUploadBatch_Response, error)
	CompleteAppUploadBatch(ctx context.Context, in *CCloud_CompleteAppUploadBatch_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	CompleteAppUploadBatchBlocking(ctx context.Context, in *CCloud_CompleteAppUploadBatch_Request, opts ...grpc.CallOption) (*CCloud_CompleteAppUploadBatch_Response, error)
	ClientBeginFileUpload(ctx context.Context, in *CCloud_ClientBeginFileUpload_Request, opts ...grpc.CallOption) (*CCloud_ClientBeginFileUpload_Response, error)
	ClientCommitFileUpload(ctx context.Context, in *CCloud_ClientCommitFileUpload_Request, opts ...grpc.CallOption) (*CCloud_ClientCommitFileUpload_Response, error)
	ClientFileDownload(ctx context.Context, in *CCloud_ClientFileDownload_Request, opts ...grpc.CallOption) (*CCloud_ClientFileDownload_Response, error)
	ClientDeleteFile(ctx context.Context, in *CCloud_ClientDeleteFile_Request, opts ...grpc.CallOption) (*CCloud_ClientDeleteFile_Response, error)
	ClientConflictResolution(ctx context.Context, in *CCloud_ClientConflictResolution_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	EnumerateUserApps(ctx context.Context, in *CCloud_EnumerateUserApps_Request, opts ...grpc.CallOption) (*CCloud_EnumerateUserApps_Response, error)
	GetAppFileChangelist(ctx context.Context, in *CCloud_GetAppFileChangelist_Request, opts ...grpc.CallOption) (*CCloud_GetAppFileChangelist_Response, error)
	SuspendAppSession(ctx context.Context, in *CCloud_AppSessionSuspend_Request, opts ...grpc.CallOption) (*CCloud_AppSessionSuspend_Response, error)
	ResumeAppSession(ctx context.Context, in *CCloud_AppSessionResume_Request, opts ...grpc.CallOption) (*CCloud_AppSessionResume_Response, error)
	SignalAppLaunchIntent(ctx context.Context, in *CCloud_AppLaunchIntent_Request, opts ...grpc.CallOption) (*CCloud_AppLaunchIntent_Response, error)
	SignalAppExitSyncDone(ctx context.Context, in *CCloud_AppExitSyncDone_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientGetAppQuotaUsage(ctx context.Context, in *CCloud_ClientGetAppQuotaUsage_Request, opts ...grpc.CallOption) (*CCloud_ClientGetAppQuotaUsage_Response, error)
}

type cloudClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudClient(cc grpc.ClientConnInterface) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) ClientLogUploadCheck(ctx context.Context, in *CCloud_ClientLogUploadCheck_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/ClientLogUploadCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientLogUploadComplete(ctx context.Context, in *CCloud_ClientLogUploadComplete_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/ClientLogUploadComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetUploadServerInfo(ctx context.Context, in *CCloud_GetUploadServerInfo_Request, opts ...grpc.CallOption) (*CCloud_GetUploadServerInfo_Response, error) {
	out := new(CCloud_GetUploadServerInfo_Response)
	err := c.cc.Invoke(ctx, "/Cloud/GetUploadServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) BeginHTTPUpload(ctx context.Context, in *CCloud_BeginHTTPUpload_Request, opts ...grpc.CallOption) (*CCloud_BeginHTTPUpload_Response, error) {
	out := new(CCloud_BeginHTTPUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/BeginHTTPUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CommitHTTPUpload(ctx context.Context, in *CCloud_CommitHTTPUpload_Request, opts ...grpc.CallOption) (*CCloud_CommitHTTPUpload_Response, error) {
	out := new(CCloud_CommitHTTPUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/CommitHTTPUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) BeginUGCUpload(ctx context.Context, in *CCloud_BeginUGCUpload_Request, opts ...grpc.CallOption) (*CCloud_BeginUGCUpload_Response, error) {
	out := new(CCloud_BeginUGCUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/BeginUGCUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CommitUGCUpload(ctx context.Context, in *CCloud_CommitUGCUpload_Request, opts ...grpc.CallOption) (*CCloud_CommitUGCUpload_Response, error) {
	out := new(CCloud_CommitUGCUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/CommitUGCUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetFileDetails(ctx context.Context, in *CCloud_GetFileDetails_Request, opts ...grpc.CallOption) (*CCloud_GetFileDetails_Response, error) {
	out := new(CCloud_GetFileDetails_Response)
	err := c.cc.Invoke(ctx, "/Cloud/GetFileDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) EnumerateUserFiles(ctx context.Context, in *CCloud_EnumerateUserFiles_Request, opts ...grpc.CallOption) (*CCloud_EnumerateUserFiles_Response, error) {
	out := new(CCloud_EnumerateUserFiles_Response)
	err := c.cc.Invoke(ctx, "/Cloud/EnumerateUserFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) Delete(ctx context.Context, in *CCloud_Delete_Request, opts ...grpc.CallOption) (*CCloud_Delete_Response, error) {
	out := new(CCloud_Delete_Response)
	err := c.cc.Invoke(ctx, "/Cloud/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetClientEncryptionKey(ctx context.Context, in *CCloud_GetClientEncryptionKey_Request, opts ...grpc.CallOption) (*CCloud_GetClientEncryptionKey_Response, error) {
	out := new(CCloud_GetClientEncryptionKey_Response)
	err := c.cc.Invoke(ctx, "/Cloud/GetClientEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CDNReport(ctx context.Context, in *CCloud_CDNReport_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/CDNReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ExternalStorageTransferReport(ctx context.Context, in *CCloud_ExternalStorageTransferReport_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/ExternalStorageTransferReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) BeginAppUploadBatch(ctx context.Context, in *CCloud_BeginAppUploadBatch_Request, opts ...grpc.CallOption) (*CCloud_BeginAppUploadBatch_Response, error) {
	out := new(CCloud_BeginAppUploadBatch_Response)
	err := c.cc.Invoke(ctx, "/Cloud/BeginAppUploadBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CompleteAppUploadBatch(ctx context.Context, in *CCloud_CompleteAppUploadBatch_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/CompleteAppUploadBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CompleteAppUploadBatchBlocking(ctx context.Context, in *CCloud_CompleteAppUploadBatch_Request, opts ...grpc.CallOption) (*CCloud_CompleteAppUploadBatch_Response, error) {
	out := new(CCloud_CompleteAppUploadBatch_Response)
	err := c.cc.Invoke(ctx, "/Cloud/CompleteAppUploadBatchBlocking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientBeginFileUpload(ctx context.Context, in *CCloud_ClientBeginFileUpload_Request, opts ...grpc.CallOption) (*CCloud_ClientBeginFileUpload_Response, error) {
	out := new(CCloud_ClientBeginFileUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ClientBeginFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientCommitFileUpload(ctx context.Context, in *CCloud_ClientCommitFileUpload_Request, opts ...grpc.CallOption) (*CCloud_ClientCommitFileUpload_Response, error) {
	out := new(CCloud_ClientCommitFileUpload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ClientCommitFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientFileDownload(ctx context.Context, in *CCloud_ClientFileDownload_Request, opts ...grpc.CallOption) (*CCloud_ClientFileDownload_Response, error) {
	out := new(CCloud_ClientFileDownload_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ClientFileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientDeleteFile(ctx context.Context, in *CCloud_ClientDeleteFile_Request, opts ...grpc.CallOption) (*CCloud_ClientDeleteFile_Response, error) {
	out := new(CCloud_ClientDeleteFile_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ClientDeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientConflictResolution(ctx context.Context, in *CCloud_ClientConflictResolution_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/ClientConflictResolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) EnumerateUserApps(ctx context.Context, in *CCloud_EnumerateUserApps_Request, opts ...grpc.CallOption) (*CCloud_EnumerateUserApps_Response, error) {
	out := new(CCloud_EnumerateUserApps_Response)
	err := c.cc.Invoke(ctx, "/Cloud/EnumerateUserApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetAppFileChangelist(ctx context.Context, in *CCloud_GetAppFileChangelist_Request, opts ...grpc.CallOption) (*CCloud_GetAppFileChangelist_Response, error) {
	out := new(CCloud_GetAppFileChangelist_Response)
	err := c.cc.Invoke(ctx, "/Cloud/GetAppFileChangelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) SuspendAppSession(ctx context.Context, in *CCloud_AppSessionSuspend_Request, opts ...grpc.CallOption) (*CCloud_AppSessionSuspend_Response, error) {
	out := new(CCloud_AppSessionSuspend_Response)
	err := c.cc.Invoke(ctx, "/Cloud/SuspendAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ResumeAppSession(ctx context.Context, in *CCloud_AppSessionResume_Request, opts ...grpc.CallOption) (*CCloud_AppSessionResume_Response, error) {
	out := new(CCloud_AppSessionResume_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ResumeAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) SignalAppLaunchIntent(ctx context.Context, in *CCloud_AppLaunchIntent_Request, opts ...grpc.CallOption) (*CCloud_AppLaunchIntent_Response, error) {
	out := new(CCloud_AppLaunchIntent_Response)
	err := c.cc.Invoke(ctx, "/Cloud/SignalAppLaunchIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) SignalAppExitSyncDone(ctx context.Context, in *CCloud_AppExitSyncDone_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Cloud/SignalAppExitSyncDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) ClientGetAppQuotaUsage(ctx context.Context, in *CCloud_ClientGetAppQuotaUsage_Request, opts ...grpc.CallOption) (*CCloud_ClientGetAppQuotaUsage_Response, error) {
	out := new(CCloud_ClientGetAppQuotaUsage_Response)
	err := c.cc.Invoke(ctx, "/Cloud/ClientGetAppQuotaUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServer is the server API for Cloud service.
// All implementations must embed UnimplementedCloudServer
// for forward compatibility
type CloudServer interface {
	ClientLogUploadCheck(context.Context, *CCloud_ClientLogUploadCheck_Notification) (*NoResponse, error)
	ClientLogUploadComplete(context.Context, *CCloud_ClientLogUploadComplete_Notification) (*NoResponse, error)
	GetUploadServerInfo(context.Context, *CCloud_GetUploadServerInfo_Request) (*CCloud_GetUploadServerInfo_Response, error)
	BeginHTTPUpload(context.Context, *CCloud_BeginHTTPUpload_Request) (*CCloud_BeginHTTPUpload_Response, error)
	CommitHTTPUpload(context.Context, *CCloud_CommitHTTPUpload_Request) (*CCloud_CommitHTTPUpload_Response, error)
	BeginUGCUpload(context.Context, *CCloud_BeginUGCUpload_Request) (*CCloud_BeginUGCUpload_Response, error)
	CommitUGCUpload(context.Context, *CCloud_CommitUGCUpload_Request) (*CCloud_CommitUGCUpload_Response, error)
	GetFileDetails(context.Context, *CCloud_GetFileDetails_Request) (*CCloud_GetFileDetails_Response, error)
	EnumerateUserFiles(context.Context, *CCloud_EnumerateUserFiles_Request) (*CCloud_EnumerateUserFiles_Response, error)
	Delete(context.Context, *CCloud_Delete_Request) (*CCloud_Delete_Response, error)
	GetClientEncryptionKey(context.Context, *CCloud_GetClientEncryptionKey_Request) (*CCloud_GetClientEncryptionKey_Response, error)
	CDNReport(context.Context, *CCloud_CDNReport_Notification) (*NoResponse, error)
	ExternalStorageTransferReport(context.Context, *CCloud_ExternalStorageTransferReport_Notification) (*NoResponse, error)
	BeginAppUploadBatch(context.Context, *CCloud_BeginAppUploadBatch_Request) (*CCloud_BeginAppUploadBatch_Response, error)
	CompleteAppUploadBatch(context.Context, *CCloud_CompleteAppUploadBatch_Notification) (*NoResponse, error)
	CompleteAppUploadBatchBlocking(context.Context, *CCloud_CompleteAppUploadBatch_Request) (*CCloud_CompleteAppUploadBatch_Response, error)
	ClientBeginFileUpload(context.Context, *CCloud_ClientBeginFileUpload_Request) (*CCloud_ClientBeginFileUpload_Response, error)
	ClientCommitFileUpload(context.Context, *CCloud_ClientCommitFileUpload_Request) (*CCloud_ClientCommitFileUpload_Response, error)
	ClientFileDownload(context.Context, *CCloud_ClientFileDownload_Request) (*CCloud_ClientFileDownload_Response, error)
	ClientDeleteFile(context.Context, *CCloud_ClientDeleteFile_Request) (*CCloud_ClientDeleteFile_Response, error)
	ClientConflictResolution(context.Context, *CCloud_ClientConflictResolution_Notification) (*NoResponse, error)
	EnumerateUserApps(context.Context, *CCloud_EnumerateUserApps_Request) (*CCloud_EnumerateUserApps_Response, error)
	GetAppFileChangelist(context.Context, *CCloud_GetAppFileChangelist_Request) (*CCloud_GetAppFileChangelist_Response, error)
	SuspendAppSession(context.Context, *CCloud_AppSessionSuspend_Request) (*CCloud_AppSessionSuspend_Response, error)
	ResumeAppSession(context.Context, *CCloud_AppSessionResume_Request) (*CCloud_AppSessionResume_Response, error)
	SignalAppLaunchIntent(context.Context, *CCloud_AppLaunchIntent_Request) (*CCloud_AppLaunchIntent_Response, error)
	SignalAppExitSyncDone(context.Context, *CCloud_AppExitSyncDone_Notification) (*NoResponse, error)
	ClientGetAppQuotaUsage(context.Context, *CCloud_ClientGetAppQuotaUsage_Request) (*CCloud_ClientGetAppQuotaUsage_Response, error)
	mustEmbedUnimplementedCloudServer()
}

// UnimplementedCloudServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServer struct {
}

func (UnimplementedCloudServer) ClientLogUploadCheck(context.Context, *CCloud_ClientLogUploadCheck_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientLogUploadCheck not implemented")
}
func (UnimplementedCloudServer) ClientLogUploadComplete(context.Context, *CCloud_ClientLogUploadComplete_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientLogUploadComplete not implemented")
}
func (UnimplementedCloudServer) GetUploadServerInfo(context.Context, *CCloud_GetUploadServerInfo_Request) (*CCloud_GetUploadServerInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadServerInfo not implemented")
}
func (UnimplementedCloudServer) BeginHTTPUpload(context.Context, *CCloud_BeginHTTPUpload_Request) (*CCloud_BeginHTTPUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginHTTPUpload not implemented")
}
func (UnimplementedCloudServer) CommitHTTPUpload(context.Context, *CCloud_CommitHTTPUpload_Request) (*CCloud_CommitHTTPUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitHTTPUpload not implemented")
}
func (UnimplementedCloudServer) BeginUGCUpload(context.Context, *CCloud_BeginUGCUpload_Request) (*CCloud_BeginUGCUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginUGCUpload not implemented")
}
func (UnimplementedCloudServer) CommitUGCUpload(context.Context, *CCloud_CommitUGCUpload_Request) (*CCloud_CommitUGCUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitUGCUpload not implemented")
}
func (UnimplementedCloudServer) GetFileDetails(context.Context, *CCloud_GetFileDetails_Request) (*CCloud_GetFileDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetails not implemented")
}
func (UnimplementedCloudServer) EnumerateUserFiles(context.Context, *CCloud_EnumerateUserFiles_Request) (*CCloud_EnumerateUserFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateUserFiles not implemented")
}
func (UnimplementedCloudServer) Delete(context.Context, *CCloud_Delete_Request) (*CCloud_Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudServer) GetClientEncryptionKey(context.Context, *CCloud_GetClientEncryptionKey_Request) (*CCloud_GetClientEncryptionKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientEncryptionKey not implemented")
}
func (UnimplementedCloudServer) CDNReport(context.Context, *CCloud_CDNReport_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDNReport not implemented")
}
func (UnimplementedCloudServer) ExternalStorageTransferReport(context.Context, *CCloud_ExternalStorageTransferReport_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalStorageTransferReport not implemented")
}
func (UnimplementedCloudServer) BeginAppUploadBatch(context.Context, *CCloud_BeginAppUploadBatch_Request) (*CCloud_BeginAppUploadBatch_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginAppUploadBatch not implemented")
}
func (UnimplementedCloudServer) CompleteAppUploadBatch(context.Context, *CCloud_CompleteAppUploadBatch_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAppUploadBatch not implemented")
}
func (UnimplementedCloudServer) CompleteAppUploadBatchBlocking(context.Context, *CCloud_CompleteAppUploadBatch_Request) (*CCloud_CompleteAppUploadBatch_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAppUploadBatchBlocking not implemented")
}
func (UnimplementedCloudServer) ClientBeginFileUpload(context.Context, *CCloud_ClientBeginFileUpload_Request) (*CCloud_ClientBeginFileUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientBeginFileUpload not implemented")
}
func (UnimplementedCloudServer) ClientCommitFileUpload(context.Context, *CCloud_ClientCommitFileUpload_Request) (*CCloud_ClientCommitFileUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCommitFileUpload not implemented")
}
func (UnimplementedCloudServer) ClientFileDownload(context.Context, *CCloud_ClientFileDownload_Request) (*CCloud_ClientFileDownload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientFileDownload not implemented")
}
func (UnimplementedCloudServer) ClientDeleteFile(context.Context, *CCloud_ClientDeleteFile_Request) (*CCloud_ClientDeleteFile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDeleteFile not implemented")
}
func (UnimplementedCloudServer) ClientConflictResolution(context.Context, *CCloud_ClientConflictResolution_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConflictResolution not implemented")
}
func (UnimplementedCloudServer) EnumerateUserApps(context.Context, *CCloud_EnumerateUserApps_Request) (*CCloud_EnumerateUserApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateUserApps not implemented")
}
func (UnimplementedCloudServer) GetAppFileChangelist(context.Context, *CCloud_GetAppFileChangelist_Request) (*CCloud_GetAppFileChangelist_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppFileChangelist not implemented")
}
func (UnimplementedCloudServer) SuspendAppSession(context.Context, *CCloud_AppSessionSuspend_Request) (*CCloud_AppSessionSuspend_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendAppSession not implemented")
}
func (UnimplementedCloudServer) ResumeAppSession(context.Context, *CCloud_AppSessionResume_Request) (*CCloud_AppSessionResume_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeAppSession not implemented")
}
func (UnimplementedCloudServer) SignalAppLaunchIntent(context.Context, *CCloud_AppLaunchIntent_Request) (*CCloud_AppLaunchIntent_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAppLaunchIntent not implemented")
}
func (UnimplementedCloudServer) SignalAppExitSyncDone(context.Context, *CCloud_AppExitSyncDone_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAppExitSyncDone not implemented")
}
func (UnimplementedCloudServer) ClientGetAppQuotaUsage(context.Context, *CCloud_ClientGetAppQuotaUsage_Request) (*CCloud_ClientGetAppQuotaUsage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetAppQuotaUsage not implemented")
}
func (UnimplementedCloudServer) mustEmbedUnimplementedCloudServer() {}

// UnsafeCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServer will
// result in compilation errors.
type UnsafeCloudServer interface {
	mustEmbedUnimplementedCloudServer()
}

func RegisterCloudServer(s grpc.ServiceRegistrar, srv CloudServer) {
	s.RegisterService(&Cloud_ServiceDesc, srv)
}

func _Cloud_ClientLogUploadCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientLogUploadCheck_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientLogUploadCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientLogUploadCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientLogUploadCheck(ctx, req.(*CCloud_ClientLogUploadCheck_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientLogUploadComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientLogUploadComplete_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientLogUploadComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientLogUploadComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientLogUploadComplete(ctx, req.(*CCloud_ClientLogUploadComplete_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetUploadServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_GetUploadServerInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetUploadServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/GetUploadServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetUploadServerInfo(ctx, req.(*CCloud_GetUploadServerInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_BeginHTTPUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_BeginHTTPUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).BeginHTTPUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/BeginHTTPUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).BeginHTTPUpload(ctx, req.(*CCloud_BeginHTTPUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CommitHTTPUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_CommitHTTPUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CommitHTTPUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/CommitHTTPUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CommitHTTPUpload(ctx, req.(*CCloud_CommitHTTPUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_BeginUGCUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_BeginUGCUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).BeginUGCUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/BeginUGCUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).BeginUGCUpload(ctx, req.(*CCloud_BeginUGCUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CommitUGCUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_CommitUGCUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CommitUGCUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/CommitUGCUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CommitUGCUpload(ctx, req.(*CCloud_CommitUGCUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetFileDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_GetFileDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetFileDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/GetFileDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetFileDetails(ctx, req.(*CCloud_GetFileDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_EnumerateUserFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_EnumerateUserFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).EnumerateUserFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/EnumerateUserFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).EnumerateUserFiles(ctx, req.(*CCloud_EnumerateUserFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).Delete(ctx, req.(*CCloud_Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetClientEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_GetClientEncryptionKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetClientEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/GetClientEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetClientEncryptionKey(ctx, req.(*CCloud_GetClientEncryptionKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CDNReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_CDNReport_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CDNReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/CDNReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CDNReport(ctx, req.(*CCloud_CDNReport_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ExternalStorageTransferReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ExternalStorageTransferReport_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ExternalStorageTransferReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ExternalStorageTransferReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ExternalStorageTransferReport(ctx, req.(*CCloud_ExternalStorageTransferReport_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_BeginAppUploadBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_BeginAppUploadBatch_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).BeginAppUploadBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/BeginAppUploadBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).BeginAppUploadBatch(ctx, req.(*CCloud_BeginAppUploadBatch_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CompleteAppUploadBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_CompleteAppUploadBatch_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CompleteAppUploadBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/CompleteAppUploadBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CompleteAppUploadBatch(ctx, req.(*CCloud_CompleteAppUploadBatch_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CompleteAppUploadBatchBlocking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_CompleteAppUploadBatch_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CompleteAppUploadBatchBlocking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/CompleteAppUploadBatchBlocking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CompleteAppUploadBatchBlocking(ctx, req.(*CCloud_CompleteAppUploadBatch_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientBeginFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientBeginFileUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientBeginFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientBeginFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientBeginFileUpload(ctx, req.(*CCloud_ClientBeginFileUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientCommitFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientCommitFileUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientCommitFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientCommitFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientCommitFileUpload(ctx, req.(*CCloud_ClientCommitFileUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientFileDownload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientFileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientFileDownload(ctx, req.(*CCloud_ClientFileDownload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientDeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientDeleteFile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientDeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientDeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientDeleteFile(ctx, req.(*CCloud_ClientDeleteFile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientConflictResolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientConflictResolution_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientConflictResolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientConflictResolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientConflictResolution(ctx, req.(*CCloud_ClientConflictResolution_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_EnumerateUserApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_EnumerateUserApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).EnumerateUserApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/EnumerateUserApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).EnumerateUserApps(ctx, req.(*CCloud_EnumerateUserApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetAppFileChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_GetAppFileChangelist_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetAppFileChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/GetAppFileChangelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetAppFileChangelist(ctx, req.(*CCloud_GetAppFileChangelist_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_SuspendAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_AppSessionSuspend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).SuspendAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/SuspendAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).SuspendAppSession(ctx, req.(*CCloud_AppSessionSuspend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ResumeAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_AppSessionResume_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ResumeAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ResumeAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ResumeAppSession(ctx, req.(*CCloud_AppSessionResume_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_SignalAppLaunchIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_AppLaunchIntent_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).SignalAppLaunchIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/SignalAppLaunchIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).SignalAppLaunchIntent(ctx, req.(*CCloud_AppLaunchIntent_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_SignalAppExitSyncDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_AppExitSyncDone_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).SignalAppExitSyncDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/SignalAppExitSyncDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).SignalAppExitSyncDone(ctx, req.(*CCloud_AppExitSyncDone_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_ClientGetAppQuotaUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientGetAppQuotaUsage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).ClientGetAppQuotaUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cloud/ClientGetAppQuotaUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).ClientGetAppQuotaUsage(ctx, req.(*CCloud_ClientGetAppQuotaUsage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Cloud_ServiceDesc is the grpc.ServiceDesc for Cloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cloud",
	HandlerType: (*CloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientLogUploadCheck",
			Handler:    _Cloud_ClientLogUploadCheck_Handler,
		},
		{
			MethodName: "ClientLogUploadComplete",
			Handler:    _Cloud_ClientLogUploadComplete_Handler,
		},
		{
			MethodName: "GetUploadServerInfo",
			Handler:    _Cloud_GetUploadServerInfo_Handler,
		},
		{
			MethodName: "BeginHTTPUpload",
			Handler:    _Cloud_BeginHTTPUpload_Handler,
		},
		{
			MethodName: "CommitHTTPUpload",
			Handler:    _Cloud_CommitHTTPUpload_Handler,
		},
		{
			MethodName: "BeginUGCUpload",
			Handler:    _Cloud_BeginUGCUpload_Handler,
		},
		{
			MethodName: "CommitUGCUpload",
			Handler:    _Cloud_CommitUGCUpload_Handler,
		},
		{
			MethodName: "GetFileDetails",
			Handler:    _Cloud_GetFileDetails_Handler,
		},
		{
			MethodName: "EnumerateUserFiles",
			Handler:    _Cloud_EnumerateUserFiles_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cloud_Delete_Handler,
		},
		{
			MethodName: "GetClientEncryptionKey",
			Handler:    _Cloud_GetClientEncryptionKey_Handler,
		},
		{
			MethodName: "CDNReport",
			Handler:    _Cloud_CDNReport_Handler,
		},
		{
			MethodName: "ExternalStorageTransferReport",
			Handler:    _Cloud_ExternalStorageTransferReport_Handler,
		},
		{
			MethodName: "BeginAppUploadBatch",
			Handler:    _Cloud_BeginAppUploadBatch_Handler,
		},
		{
			MethodName: "CompleteAppUploadBatch",
			Handler:    _Cloud_CompleteAppUploadBatch_Handler,
		},
		{
			MethodName: "CompleteAppUploadBatchBlocking",
			Handler:    _Cloud_CompleteAppUploadBatchBlocking_Handler,
		},
		{
			MethodName: "ClientBeginFileUpload",
			Handler:    _Cloud_ClientBeginFileUpload_Handler,
		},
		{
			MethodName: "ClientCommitFileUpload",
			Handler:    _Cloud_ClientCommitFileUpload_Handler,
		},
		{
			MethodName: "ClientFileDownload",
			Handler:    _Cloud_ClientFileDownload_Handler,
		},
		{
			MethodName: "ClientDeleteFile",
			Handler:    _Cloud_ClientDeleteFile_Handler,
		},
		{
			MethodName: "ClientConflictResolution",
			Handler:    _Cloud_ClientConflictResolution_Handler,
		},
		{
			MethodName: "EnumerateUserApps",
			Handler:    _Cloud_EnumerateUserApps_Handler,
		},
		{
			MethodName: "GetAppFileChangelist",
			Handler:    _Cloud_GetAppFileChangelist_Handler,
		},
		{
			MethodName: "SuspendAppSession",
			Handler:    _Cloud_SuspendAppSession_Handler,
		},
		{
			MethodName: "ResumeAppSession",
			Handler:    _Cloud_ResumeAppSession_Handler,
		},
		{
			MethodName: "SignalAppLaunchIntent",
			Handler:    _Cloud_SignalAppLaunchIntent_Handler,
		},
		{
			MethodName: "SignalAppExitSyncDone",
			Handler:    _Cloud_SignalAppExitSyncDone_Handler,
		},
		{
			MethodName: "ClientGetAppQuotaUsage",
			Handler:    _Cloud_ClientGetAppQuotaUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_cloud.steamclient.proto",
}

// CloudClientClient is the client API for CloudClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudClientClient interface {
	NotifyAppStateChange(ctx context.Context, in *CCloud_AppCloudStateChange_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	ClientLogUploadRequest(ctx context.Context, in *CCloud_ClientLogUploadRequest_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type cloudClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudClientClient(cc grpc.ClientConnInterface) CloudClientClient {
	return &cloudClientClient{cc}
}

func (c *cloudClientClient) NotifyAppStateChange(ctx context.Context, in *CCloud_AppCloudStateChange_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/CloudClient/NotifyAppStateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClientClient) ClientLogUploadRequest(ctx context.Context, in *CCloud_ClientLogUploadRequest_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/CloudClient/ClientLogUploadRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudClientServer is the server API for CloudClient service.
// All implementations must embed UnimplementedCloudClientServer
// for forward compatibility
type CloudClientServer interface {
	NotifyAppStateChange(context.Context, *CCloud_AppCloudStateChange_Notification) (*NoResponse, error)
	ClientLogUploadRequest(context.Context, *CCloud_ClientLogUploadRequest_Notification) (*NoResponse, error)
	mustEmbedUnimplementedCloudClientServer()
}

// UnimplementedCloudClientServer must be embedded to have forward compatible implementations.
type UnimplementedCloudClientServer struct {
}

func (UnimplementedCloudClientServer) NotifyAppStateChange(context.Context, *CCloud_AppCloudStateChange_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAppStateChange not implemented")
}
func (UnimplementedCloudClientServer) ClientLogUploadRequest(context.Context, *CCloud_ClientLogUploadRequest_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientLogUploadRequest not implemented")
}
func (UnimplementedCloudClientServer) mustEmbedUnimplementedCloudClientServer() {}

// UnsafeCloudClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudClientServer will
// result in compilation errors.
type UnsafeCloudClientServer interface {
	mustEmbedUnimplementedCloudClientServer()
}

func RegisterCloudClientServer(s grpc.ServiceRegistrar, srv CloudClientServer) {
	s.RegisterService(&CloudClient_ServiceDesc, srv)
}

func _CloudClient_NotifyAppStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_AppCloudStateChange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudClientServer).NotifyAppStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudClient/NotifyAppStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudClientServer).NotifyAppStateChange(ctx, req.(*CCloud_AppCloudStateChange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudClient_ClientLogUploadRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCloud_ClientLogUploadRequest_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudClientServer).ClientLogUploadRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudClient/ClientLogUploadRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudClientServer).ClientLogUploadRequest(ctx, req.(*CCloud_ClientLogUploadRequest_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudClient_ServiceDesc is the grpc.ServiceDesc for CloudClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudClient",
	HandlerType: (*CloudClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAppStateChange",
			Handler:    _CloudClient_NotifyAppStateChange_Handler,
		},
		{
			MethodName: "ClientLogUploadRequest",
			Handler:    _CloudClient_ClientLogUploadRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_cloud.steamclient.proto",
}
