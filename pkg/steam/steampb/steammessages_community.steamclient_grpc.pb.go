// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_community.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	GetApps(ctx context.Context, in *CCommunity_GetApps_Request, opts ...grpc.CallOption) (*CCommunity_GetApps_Response, error)
	GetAppRichPresenceLocalization(ctx context.Context, in *CCommunity_GetAppRichPresenceLocalization_Request, opts ...grpc.CallOption) (*CCommunity_GetAppRichPresenceLocalization_Response, error)
	GetCommentThread(ctx context.Context, in *CCommunity_GetCommentThread_Request, opts ...grpc.CallOption) (*CCommunity_GetCommentThread_Response, error)
	PostCommentToThread(ctx context.Context, in *CCommunity_PostCommentToThread_Request, opts ...grpc.CallOption) (*CCommunity_PostCommentToThread_Response, error)
	DeleteCommentFromThread(ctx context.Context, in *CCommunity_DeleteCommentFromThread_Request, opts ...grpc.CallOption) (*CCommunity_DeleteCommentFromThread_Response, error)
	RateCommentThread(ctx context.Context, in *CCommunity_RateCommentThread_Request, opts ...grpc.CallOption) (*CCommunity_RateCommentThread_Response, error)
	GetCommentThreadRatings(ctx context.Context, in *CCommunity_GetCommentThreadRatings_Request, opts ...grpc.CallOption) (*CCommunity_GetCommentThreadRatings_Response, error)
	RateClanAnnouncement(ctx context.Context, in *CCommunity_RateClanAnnouncement_Request, opts ...grpc.CallOption) (*CCommunity_RateClanAnnouncement_Response, error)
	GetClanAnnouncementVoteForUser(ctx context.Context, in *CCommunity_GetClanAnnouncementVoteForUser_Request, opts ...grpc.CallOption) (*CCommunity_GetClanAnnouncementVoteForUser_Response, error)
	GetAvatarHistory(ctx context.Context, in *CCommunity_GetAvatarHistory_Request, opts ...grpc.CallOption) (*CCommunity_GetAvatarHistory_Response, error)
	GetUserPartnerEventNews(ctx context.Context, in *CCommunity_GetUserPartnerEventNews_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventNews_Response, error)
	GetBestEventsForUser(ctx context.Context, in *CCommunity_GetBestEventsForUser_Request, opts ...grpc.CallOption) (*CCommunity_GetBestEventsForUser_Response, error)
	MarkPartnerEventsForUser(ctx context.Context, in *CCommunity_MarkPartnerEventsForUser_Request, opts ...grpc.CallOption) (*CCommunity_MarkPartnerEventsForUser_Response, error)
	GetUserPartnerEventViewStatus(ctx context.Context, in *CCommunity_GetUserPartnerEventViewStatus_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventViewStatus_Response, error)
	PartnerEventsShowMoreForApp(ctx context.Context, in *CCommunity_PartnerEventsShowMoreForApp_Request, opts ...grpc.CallOption) (*CCommunity_PartnerEventsShowMoreForApp_Response, error)
	PartnerEventsShowLessForApp(ctx context.Context, in *CCommunity_PartnerEventsShowLessForApp_Request, opts ...grpc.CallOption) (*CCommunity_PartnerEventsShowLessForApp_Response, error)
	ClearUserPartnerEventsAppPriorities(ctx context.Context, in *CCommunity_ClearUserPartnerEventsAppPriorities_Request, opts ...grpc.CallOption) (*CCommunity_ClearUserPartnerEventsAppPriorities_Response, error)
	GetUserPartnerEventsAppPriorities(ctx context.Context, in *CCommunity_GetUserPartnerEventsAppPriorities_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventsAppPriorities_Response, error)
	ClearSinglePartnerEventsAppPriority(ctx context.Context, in *CCommunity_ClearSinglePartnerEventsAppPriority_Request, opts ...grpc.CallOption) (*CCommunity_ClearSinglePartnerEventsAppPriority_Response, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) GetApps(ctx context.Context, in *CCommunity_GetApps_Request, opts ...grpc.CallOption) (*CCommunity_GetApps_Response, error) {
	out := new(CCommunity_GetApps_Response)
	err := c.cc.Invoke(ctx, "/Community/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetAppRichPresenceLocalization(ctx context.Context, in *CCommunity_GetAppRichPresenceLocalization_Request, opts ...grpc.CallOption) (*CCommunity_GetAppRichPresenceLocalization_Response, error) {
	out := new(CCommunity_GetAppRichPresenceLocalization_Response)
	err := c.cc.Invoke(ctx, "/Community/GetAppRichPresenceLocalization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommentThread(ctx context.Context, in *CCommunity_GetCommentThread_Request, opts ...grpc.CallOption) (*CCommunity_GetCommentThread_Response, error) {
	out := new(CCommunity_GetCommentThread_Response)
	err := c.cc.Invoke(ctx, "/Community/GetCommentThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) PostCommentToThread(ctx context.Context, in *CCommunity_PostCommentToThread_Request, opts ...grpc.CallOption) (*CCommunity_PostCommentToThread_Response, error) {
	out := new(CCommunity_PostCommentToThread_Response)
	err := c.cc.Invoke(ctx, "/Community/PostCommentToThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) DeleteCommentFromThread(ctx context.Context, in *CCommunity_DeleteCommentFromThread_Request, opts ...grpc.CallOption) (*CCommunity_DeleteCommentFromThread_Response, error) {
	out := new(CCommunity_DeleteCommentFromThread_Response)
	err := c.cc.Invoke(ctx, "/Community/DeleteCommentFromThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) RateCommentThread(ctx context.Context, in *CCommunity_RateCommentThread_Request, opts ...grpc.CallOption) (*CCommunity_RateCommentThread_Response, error) {
	out := new(CCommunity_RateCommentThread_Response)
	err := c.cc.Invoke(ctx, "/Community/RateCommentThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommentThreadRatings(ctx context.Context, in *CCommunity_GetCommentThreadRatings_Request, opts ...grpc.CallOption) (*CCommunity_GetCommentThreadRatings_Response, error) {
	out := new(CCommunity_GetCommentThreadRatings_Response)
	err := c.cc.Invoke(ctx, "/Community/GetCommentThreadRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) RateClanAnnouncement(ctx context.Context, in *CCommunity_RateClanAnnouncement_Request, opts ...grpc.CallOption) (*CCommunity_RateClanAnnouncement_Response, error) {
	out := new(CCommunity_RateClanAnnouncement_Response)
	err := c.cc.Invoke(ctx, "/Community/RateClanAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetClanAnnouncementVoteForUser(ctx context.Context, in *CCommunity_GetClanAnnouncementVoteForUser_Request, opts ...grpc.CallOption) (*CCommunity_GetClanAnnouncementVoteForUser_Response, error) {
	out := new(CCommunity_GetClanAnnouncementVoteForUser_Response)
	err := c.cc.Invoke(ctx, "/Community/GetClanAnnouncementVoteForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetAvatarHistory(ctx context.Context, in *CCommunity_GetAvatarHistory_Request, opts ...grpc.CallOption) (*CCommunity_GetAvatarHistory_Response, error) {
	out := new(CCommunity_GetAvatarHistory_Response)
	err := c.cc.Invoke(ctx, "/Community/GetAvatarHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetUserPartnerEventNews(ctx context.Context, in *CCommunity_GetUserPartnerEventNews_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventNews_Response, error) {
	out := new(CCommunity_GetUserPartnerEventNews_Response)
	err := c.cc.Invoke(ctx, "/Community/GetUserPartnerEventNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetBestEventsForUser(ctx context.Context, in *CCommunity_GetBestEventsForUser_Request, opts ...grpc.CallOption) (*CCommunity_GetBestEventsForUser_Response, error) {
	out := new(CCommunity_GetBestEventsForUser_Response)
	err := c.cc.Invoke(ctx, "/Community/GetBestEventsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) MarkPartnerEventsForUser(ctx context.Context, in *CCommunity_MarkPartnerEventsForUser_Request, opts ...grpc.CallOption) (*CCommunity_MarkPartnerEventsForUser_Response, error) {
	out := new(CCommunity_MarkPartnerEventsForUser_Response)
	err := c.cc.Invoke(ctx, "/Community/MarkPartnerEventsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetUserPartnerEventViewStatus(ctx context.Context, in *CCommunity_GetUserPartnerEventViewStatus_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventViewStatus_Response, error) {
	out := new(CCommunity_GetUserPartnerEventViewStatus_Response)
	err := c.cc.Invoke(ctx, "/Community/GetUserPartnerEventViewStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) PartnerEventsShowMoreForApp(ctx context.Context, in *CCommunity_PartnerEventsShowMoreForApp_Request, opts ...grpc.CallOption) (*CCommunity_PartnerEventsShowMoreForApp_Response, error) {
	out := new(CCommunity_PartnerEventsShowMoreForApp_Response)
	err := c.cc.Invoke(ctx, "/Community/PartnerEventsShowMoreForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) PartnerEventsShowLessForApp(ctx context.Context, in *CCommunity_PartnerEventsShowLessForApp_Request, opts ...grpc.CallOption) (*CCommunity_PartnerEventsShowLessForApp_Response, error) {
	out := new(CCommunity_PartnerEventsShowLessForApp_Response)
	err := c.cc.Invoke(ctx, "/Community/PartnerEventsShowLessForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ClearUserPartnerEventsAppPriorities(ctx context.Context, in *CCommunity_ClearUserPartnerEventsAppPriorities_Request, opts ...grpc.CallOption) (*CCommunity_ClearUserPartnerEventsAppPriorities_Response, error) {
	out := new(CCommunity_ClearUserPartnerEventsAppPriorities_Response)
	err := c.cc.Invoke(ctx, "/Community/ClearUserPartnerEventsAppPriorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetUserPartnerEventsAppPriorities(ctx context.Context, in *CCommunity_GetUserPartnerEventsAppPriorities_Request, opts ...grpc.CallOption) (*CCommunity_GetUserPartnerEventsAppPriorities_Response, error) {
	out := new(CCommunity_GetUserPartnerEventsAppPriorities_Response)
	err := c.cc.Invoke(ctx, "/Community/GetUserPartnerEventsAppPriorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ClearSinglePartnerEventsAppPriority(ctx context.Context, in *CCommunity_ClearSinglePartnerEventsAppPriority_Request, opts ...grpc.CallOption) (*CCommunity_ClearSinglePartnerEventsAppPriority_Response, error) {
	out := new(CCommunity_ClearSinglePartnerEventsAppPriority_Response)
	err := c.cc.Invoke(ctx, "/Community/ClearSinglePartnerEventsAppPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations must embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	GetApps(context.Context, *CCommunity_GetApps_Request) (*CCommunity_GetApps_Response, error)
	GetAppRichPresenceLocalization(context.Context, *CCommunity_GetAppRichPresenceLocalization_Request) (*CCommunity_GetAppRichPresenceLocalization_Response, error)
	GetCommentThread(context.Context, *CCommunity_GetCommentThread_Request) (*CCommunity_GetCommentThread_Response, error)
	PostCommentToThread(context.Context, *CCommunity_PostCommentToThread_Request) (*CCommunity_PostCommentToThread_Response, error)
	DeleteCommentFromThread(context.Context, *CCommunity_DeleteCommentFromThread_Request) (*CCommunity_DeleteCommentFromThread_Response, error)
	RateCommentThread(context.Context, *CCommunity_RateCommentThread_Request) (*CCommunity_RateCommentThread_Response, error)
	GetCommentThreadRatings(context.Context, *CCommunity_GetCommentThreadRatings_Request) (*CCommunity_GetCommentThreadRatings_Response, error)
	RateClanAnnouncement(context.Context, *CCommunity_RateClanAnnouncement_Request) (*CCommunity_RateClanAnnouncement_Response, error)
	GetClanAnnouncementVoteForUser(context.Context, *CCommunity_GetClanAnnouncementVoteForUser_Request) (*CCommunity_GetClanAnnouncementVoteForUser_Response, error)
	GetAvatarHistory(context.Context, *CCommunity_GetAvatarHistory_Request) (*CCommunity_GetAvatarHistory_Response, error)
	GetUserPartnerEventNews(context.Context, *CCommunity_GetUserPartnerEventNews_Request) (*CCommunity_GetUserPartnerEventNews_Response, error)
	GetBestEventsForUser(context.Context, *CCommunity_GetBestEventsForUser_Request) (*CCommunity_GetBestEventsForUser_Response, error)
	MarkPartnerEventsForUser(context.Context, *CCommunity_MarkPartnerEventsForUser_Request) (*CCommunity_MarkPartnerEventsForUser_Response, error)
	GetUserPartnerEventViewStatus(context.Context, *CCommunity_GetUserPartnerEventViewStatus_Request) (*CCommunity_GetUserPartnerEventViewStatus_Response, error)
	PartnerEventsShowMoreForApp(context.Context, *CCommunity_PartnerEventsShowMoreForApp_Request) (*CCommunity_PartnerEventsShowMoreForApp_Response, error)
	PartnerEventsShowLessForApp(context.Context, *CCommunity_PartnerEventsShowLessForApp_Request) (*CCommunity_PartnerEventsShowLessForApp_Response, error)
	ClearUserPartnerEventsAppPriorities(context.Context, *CCommunity_ClearUserPartnerEventsAppPriorities_Request) (*CCommunity_ClearUserPartnerEventsAppPriorities_Response, error)
	GetUserPartnerEventsAppPriorities(context.Context, *CCommunity_GetUserPartnerEventsAppPriorities_Request) (*CCommunity_GetUserPartnerEventsAppPriorities_Response, error)
	ClearSinglePartnerEventsAppPriority(context.Context, *CCommunity_ClearSinglePartnerEventsAppPriority_Request) (*CCommunity_ClearSinglePartnerEventsAppPriority_Response, error)
	mustEmbedUnimplementedCommunityServer()
}

// UnimplementedCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) GetApps(context.Context, *CCommunity_GetApps_Request) (*CCommunity_GetApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedCommunityServer) GetAppRichPresenceLocalization(context.Context, *CCommunity_GetAppRichPresenceLocalization_Request) (*CCommunity_GetAppRichPresenceLocalization_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRichPresenceLocalization not implemented")
}
func (UnimplementedCommunityServer) GetCommentThread(context.Context, *CCommunity_GetCommentThread_Request) (*CCommunity_GetCommentThread_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentThread not implemented")
}
func (UnimplementedCommunityServer) PostCommentToThread(context.Context, *CCommunity_PostCommentToThread_Request) (*CCommunity_PostCommentToThread_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommentToThread not implemented")
}
func (UnimplementedCommunityServer) DeleteCommentFromThread(context.Context, *CCommunity_DeleteCommentFromThread_Request) (*CCommunity_DeleteCommentFromThread_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentFromThread not implemented")
}
func (UnimplementedCommunityServer) RateCommentThread(context.Context, *CCommunity_RateCommentThread_Request) (*CCommunity_RateCommentThread_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateCommentThread not implemented")
}
func (UnimplementedCommunityServer) GetCommentThreadRatings(context.Context, *CCommunity_GetCommentThreadRatings_Request) (*CCommunity_GetCommentThreadRatings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentThreadRatings not implemented")
}
func (UnimplementedCommunityServer) RateClanAnnouncement(context.Context, *CCommunity_RateClanAnnouncement_Request) (*CCommunity_RateClanAnnouncement_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateClanAnnouncement not implemented")
}
func (UnimplementedCommunityServer) GetClanAnnouncementVoteForUser(context.Context, *CCommunity_GetClanAnnouncementVoteForUser_Request) (*CCommunity_GetClanAnnouncementVoteForUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClanAnnouncementVoteForUser not implemented")
}
func (UnimplementedCommunityServer) GetAvatarHistory(context.Context, *CCommunity_GetAvatarHistory_Request) (*CCommunity_GetAvatarHistory_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarHistory not implemented")
}
func (UnimplementedCommunityServer) GetUserPartnerEventNews(context.Context, *CCommunity_GetUserPartnerEventNews_Request) (*CCommunity_GetUserPartnerEventNews_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartnerEventNews not implemented")
}
func (UnimplementedCommunityServer) GetBestEventsForUser(context.Context, *CCommunity_GetBestEventsForUser_Request) (*CCommunity_GetBestEventsForUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestEventsForUser not implemented")
}
func (UnimplementedCommunityServer) MarkPartnerEventsForUser(context.Context, *CCommunity_MarkPartnerEventsForUser_Request) (*CCommunity_MarkPartnerEventsForUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartnerEventsForUser not implemented")
}
func (UnimplementedCommunityServer) GetUserPartnerEventViewStatus(context.Context, *CCommunity_GetUserPartnerEventViewStatus_Request) (*CCommunity_GetUserPartnerEventViewStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartnerEventViewStatus not implemented")
}
func (UnimplementedCommunityServer) PartnerEventsShowMoreForApp(context.Context, *CCommunity_PartnerEventsShowMoreForApp_Request) (*CCommunity_PartnerEventsShowMoreForApp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnerEventsShowMoreForApp not implemented")
}
func (UnimplementedCommunityServer) PartnerEventsShowLessForApp(context.Context, *CCommunity_PartnerEventsShowLessForApp_Request) (*CCommunity_PartnerEventsShowLessForApp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnerEventsShowLessForApp not implemented")
}
func (UnimplementedCommunityServer) ClearUserPartnerEventsAppPriorities(context.Context, *CCommunity_ClearUserPartnerEventsAppPriorities_Request) (*CCommunity_ClearUserPartnerEventsAppPriorities_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserPartnerEventsAppPriorities not implemented")
}
func (UnimplementedCommunityServer) GetUserPartnerEventsAppPriorities(context.Context, *CCommunity_GetUserPartnerEventsAppPriorities_Request) (*CCommunity_GetUserPartnerEventsAppPriorities_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartnerEventsAppPriorities not implemented")
}
func (UnimplementedCommunityServer) ClearSinglePartnerEventsAppPriority(context.Context, *CCommunity_ClearSinglePartnerEventsAppPriority_Request) (*CCommunity_ClearSinglePartnerEventsAppPriority_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSinglePartnerEventsAppPriority not implemented")
}
func (UnimplementedCommunityServer) mustEmbedUnimplementedCommunityServer() {}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetApps(ctx, req.(*CCommunity_GetApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetAppRichPresenceLocalization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetAppRichPresenceLocalization_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetAppRichPresenceLocalization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetAppRichPresenceLocalization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetAppRichPresenceLocalization(ctx, req.(*CCommunity_GetAppRichPresenceLocalization_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommentThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetCommentThread_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommentThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetCommentThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommentThread(ctx, req.(*CCommunity_GetCommentThread_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_PostCommentToThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_PostCommentToThread_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).PostCommentToThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/PostCommentToThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).PostCommentToThread(ctx, req.(*CCommunity_PostCommentToThread_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_DeleteCommentFromThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_DeleteCommentFromThread_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DeleteCommentFromThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/DeleteCommentFromThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DeleteCommentFromThread(ctx, req.(*CCommunity_DeleteCommentFromThread_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_RateCommentThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_RateCommentThread_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).RateCommentThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/RateCommentThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).RateCommentThread(ctx, req.(*CCommunity_RateCommentThread_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommentThreadRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetCommentThreadRatings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommentThreadRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetCommentThreadRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommentThreadRatings(ctx, req.(*CCommunity_GetCommentThreadRatings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_RateClanAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_RateClanAnnouncement_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).RateClanAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/RateClanAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).RateClanAnnouncement(ctx, req.(*CCommunity_RateClanAnnouncement_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetClanAnnouncementVoteForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetClanAnnouncementVoteForUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetClanAnnouncementVoteForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetClanAnnouncementVoteForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetClanAnnouncementVoteForUser(ctx, req.(*CCommunity_GetClanAnnouncementVoteForUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetAvatarHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetAvatarHistory_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetAvatarHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetAvatarHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetAvatarHistory(ctx, req.(*CCommunity_GetAvatarHistory_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetUserPartnerEventNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetUserPartnerEventNews_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetUserPartnerEventNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetUserPartnerEventNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetUserPartnerEventNews(ctx, req.(*CCommunity_GetUserPartnerEventNews_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetBestEventsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetBestEventsForUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetBestEventsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetBestEventsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetBestEventsForUser(ctx, req.(*CCommunity_GetBestEventsForUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_MarkPartnerEventsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_MarkPartnerEventsForUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).MarkPartnerEventsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/MarkPartnerEventsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).MarkPartnerEventsForUser(ctx, req.(*CCommunity_MarkPartnerEventsForUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetUserPartnerEventViewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetUserPartnerEventViewStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetUserPartnerEventViewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetUserPartnerEventViewStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetUserPartnerEventViewStatus(ctx, req.(*CCommunity_GetUserPartnerEventViewStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_PartnerEventsShowMoreForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_PartnerEventsShowMoreForApp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).PartnerEventsShowMoreForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/PartnerEventsShowMoreForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).PartnerEventsShowMoreForApp(ctx, req.(*CCommunity_PartnerEventsShowMoreForApp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_PartnerEventsShowLessForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_PartnerEventsShowLessForApp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).PartnerEventsShowLessForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/PartnerEventsShowLessForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).PartnerEventsShowLessForApp(ctx, req.(*CCommunity_PartnerEventsShowLessForApp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ClearUserPartnerEventsAppPriorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_ClearUserPartnerEventsAppPriorities_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ClearUserPartnerEventsAppPriorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/ClearUserPartnerEventsAppPriorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ClearUserPartnerEventsAppPriorities(ctx, req.(*CCommunity_ClearUserPartnerEventsAppPriorities_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetUserPartnerEventsAppPriorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetUserPartnerEventsAppPriorities_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetUserPartnerEventsAppPriorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetUserPartnerEventsAppPriorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetUserPartnerEventsAppPriorities(ctx, req.(*CCommunity_GetUserPartnerEventsAppPriorities_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ClearSinglePartnerEventsAppPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_ClearSinglePartnerEventsAppPriority_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ClearSinglePartnerEventsAppPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/ClearSinglePartnerEventsAppPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ClearSinglePartnerEventsAppPriority(ctx, req.(*CCommunity_ClearSinglePartnerEventsAppPriority_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApps",
			Handler:    _Community_GetApps_Handler,
		},
		{
			MethodName: "GetAppRichPresenceLocalization",
			Handler:    _Community_GetAppRichPresenceLocalization_Handler,
		},
		{
			MethodName: "GetCommentThread",
			Handler:    _Community_GetCommentThread_Handler,
		},
		{
			MethodName: "PostCommentToThread",
			Handler:    _Community_PostCommentToThread_Handler,
		},
		{
			MethodName: "DeleteCommentFromThread",
			Handler:    _Community_DeleteCommentFromThread_Handler,
		},
		{
			MethodName: "RateCommentThread",
			Handler:    _Community_RateCommentThread_Handler,
		},
		{
			MethodName: "GetCommentThreadRatings",
			Handler:    _Community_GetCommentThreadRatings_Handler,
		},
		{
			MethodName: "RateClanAnnouncement",
			Handler:    _Community_RateClanAnnouncement_Handler,
		},
		{
			MethodName: "GetClanAnnouncementVoteForUser",
			Handler:    _Community_GetClanAnnouncementVoteForUser_Handler,
		},
		{
			MethodName: "GetAvatarHistory",
			Handler:    _Community_GetAvatarHistory_Handler,
		},
		{
			MethodName: "GetUserPartnerEventNews",
			Handler:    _Community_GetUserPartnerEventNews_Handler,
		},
		{
			MethodName: "GetBestEventsForUser",
			Handler:    _Community_GetBestEventsForUser_Handler,
		},
		{
			MethodName: "MarkPartnerEventsForUser",
			Handler:    _Community_MarkPartnerEventsForUser_Handler,
		},
		{
			MethodName: "GetUserPartnerEventViewStatus",
			Handler:    _Community_GetUserPartnerEventViewStatus_Handler,
		},
		{
			MethodName: "PartnerEventsShowMoreForApp",
			Handler:    _Community_PartnerEventsShowMoreForApp_Handler,
		},
		{
			MethodName: "PartnerEventsShowLessForApp",
			Handler:    _Community_PartnerEventsShowLessForApp_Handler,
		},
		{
			MethodName: "ClearUserPartnerEventsAppPriorities",
			Handler:    _Community_ClearUserPartnerEventsAppPriorities_Handler,
		},
		{
			MethodName: "GetUserPartnerEventsAppPriorities",
			Handler:    _Community_GetUserPartnerEventsAppPriorities_Handler,
		},
		{
			MethodName: "ClearSinglePartnerEventsAppPriority",
			Handler:    _Community_ClearSinglePartnerEventsAppPriority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_community.steamclient.proto",
}
