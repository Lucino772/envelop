// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_contentsystem.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentServerDirectoryClient is the client API for ContentServerDirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServerDirectoryClient interface {
	GetServersForSteamPipe(ctx context.Context, in *CContentServerDirectory_GetServersForSteamPipe_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetServersForSteamPipe_Response, error)
	GetDepotPatchInfo(ctx context.Context, in *CContentServerDirectory_GetDepotPatchInfo_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetDepotPatchInfo_Response, error)
	GetClientUpdateHosts(ctx context.Context, in *CContentServerDirectory_GetClientUpdateHosts_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetClientUpdateHosts_Response, error)
	GetManifestRequestCode(ctx context.Context, in *CContentServerDirectory_GetManifestRequestCode_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetManifestRequestCode_Response, error)
	GetCDNAuthToken(ctx context.Context, in *CContentServerDirectory_GetCDNAuthToken_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetCDNAuthToken_Response, error)
	RequestPeerContentServer(ctx context.Context, in *CContentServerDirectory_RequestPeerContentServer_Request, opts ...grpc.CallOption) (*CContentServerDirectory_RequestPeerContentServer_Response, error)
	GetPeerContentInfo(ctx context.Context, in *CContentServerDirectory_GetPeerContentInfo_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetPeerContentInfo_Response, error)
}

type contentServerDirectoryClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServerDirectoryClient(cc grpc.ClientConnInterface) ContentServerDirectoryClient {
	return &contentServerDirectoryClient{cc}
}

func (c *contentServerDirectoryClient) GetServersForSteamPipe(ctx context.Context, in *CContentServerDirectory_GetServersForSteamPipe_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetServersForSteamPipe_Response, error) {
	out := new(CContentServerDirectory_GetServersForSteamPipe_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetServersForSteamPipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) GetDepotPatchInfo(ctx context.Context, in *CContentServerDirectory_GetDepotPatchInfo_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetDepotPatchInfo_Response, error) {
	out := new(CContentServerDirectory_GetDepotPatchInfo_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetDepotPatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) GetClientUpdateHosts(ctx context.Context, in *CContentServerDirectory_GetClientUpdateHosts_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetClientUpdateHosts_Response, error) {
	out := new(CContentServerDirectory_GetClientUpdateHosts_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetClientUpdateHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) GetManifestRequestCode(ctx context.Context, in *CContentServerDirectory_GetManifestRequestCode_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetManifestRequestCode_Response, error) {
	out := new(CContentServerDirectory_GetManifestRequestCode_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetManifestRequestCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) GetCDNAuthToken(ctx context.Context, in *CContentServerDirectory_GetCDNAuthToken_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetCDNAuthToken_Response, error) {
	out := new(CContentServerDirectory_GetCDNAuthToken_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetCDNAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) RequestPeerContentServer(ctx context.Context, in *CContentServerDirectory_RequestPeerContentServer_Request, opts ...grpc.CallOption) (*CContentServerDirectory_RequestPeerContentServer_Response, error) {
	out := new(CContentServerDirectory_RequestPeerContentServer_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/RequestPeerContentServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServerDirectoryClient) GetPeerContentInfo(ctx context.Context, in *CContentServerDirectory_GetPeerContentInfo_Request, opts ...grpc.CallOption) (*CContentServerDirectory_GetPeerContentInfo_Response, error) {
	out := new(CContentServerDirectory_GetPeerContentInfo_Response)
	err := c.cc.Invoke(ctx, "/ContentServerDirectory/GetPeerContentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServerDirectoryServer is the server API for ContentServerDirectory service.
// All implementations must embed UnimplementedContentServerDirectoryServer
// for forward compatibility
type ContentServerDirectoryServer interface {
	GetServersForSteamPipe(context.Context, *CContentServerDirectory_GetServersForSteamPipe_Request) (*CContentServerDirectory_GetServersForSteamPipe_Response, error)
	GetDepotPatchInfo(context.Context, *CContentServerDirectory_GetDepotPatchInfo_Request) (*CContentServerDirectory_GetDepotPatchInfo_Response, error)
	GetClientUpdateHosts(context.Context, *CContentServerDirectory_GetClientUpdateHosts_Request) (*CContentServerDirectory_GetClientUpdateHosts_Response, error)
	GetManifestRequestCode(context.Context, *CContentServerDirectory_GetManifestRequestCode_Request) (*CContentServerDirectory_GetManifestRequestCode_Response, error)
	GetCDNAuthToken(context.Context, *CContentServerDirectory_GetCDNAuthToken_Request) (*CContentServerDirectory_GetCDNAuthToken_Response, error)
	RequestPeerContentServer(context.Context, *CContentServerDirectory_RequestPeerContentServer_Request) (*CContentServerDirectory_RequestPeerContentServer_Response, error)
	GetPeerContentInfo(context.Context, *CContentServerDirectory_GetPeerContentInfo_Request) (*CContentServerDirectory_GetPeerContentInfo_Response, error)
	mustEmbedUnimplementedContentServerDirectoryServer()
}

// UnimplementedContentServerDirectoryServer must be embedded to have forward compatible implementations.
type UnimplementedContentServerDirectoryServer struct {
}

func (UnimplementedContentServerDirectoryServer) GetServersForSteamPipe(context.Context, *CContentServerDirectory_GetServersForSteamPipe_Request) (*CContentServerDirectory_GetServersForSteamPipe_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersForSteamPipe not implemented")
}
func (UnimplementedContentServerDirectoryServer) GetDepotPatchInfo(context.Context, *CContentServerDirectory_GetDepotPatchInfo_Request) (*CContentServerDirectory_GetDepotPatchInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepotPatchInfo not implemented")
}
func (UnimplementedContentServerDirectoryServer) GetClientUpdateHosts(context.Context, *CContentServerDirectory_GetClientUpdateHosts_Request) (*CContentServerDirectory_GetClientUpdateHosts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientUpdateHosts not implemented")
}
func (UnimplementedContentServerDirectoryServer) GetManifestRequestCode(context.Context, *CContentServerDirectory_GetManifestRequestCode_Request) (*CContentServerDirectory_GetManifestRequestCode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifestRequestCode not implemented")
}
func (UnimplementedContentServerDirectoryServer) GetCDNAuthToken(context.Context, *CContentServerDirectory_GetCDNAuthToken_Request) (*CContentServerDirectory_GetCDNAuthToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDNAuthToken not implemented")
}
func (UnimplementedContentServerDirectoryServer) RequestPeerContentServer(context.Context, *CContentServerDirectory_RequestPeerContentServer_Request) (*CContentServerDirectory_RequestPeerContentServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPeerContentServer not implemented")
}
func (UnimplementedContentServerDirectoryServer) GetPeerContentInfo(context.Context, *CContentServerDirectory_GetPeerContentInfo_Request) (*CContentServerDirectory_GetPeerContentInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerContentInfo not implemented")
}
func (UnimplementedContentServerDirectoryServer) mustEmbedUnimplementedContentServerDirectoryServer() {
}

// UnsafeContentServerDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServerDirectoryServer will
// result in compilation errors.
type UnsafeContentServerDirectoryServer interface {
	mustEmbedUnimplementedContentServerDirectoryServer()
}

func RegisterContentServerDirectoryServer(s grpc.ServiceRegistrar, srv ContentServerDirectoryServer) {
	s.RegisterService(&ContentServerDirectory_ServiceDesc, srv)
}

func _ContentServerDirectory_GetServersForSteamPipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetServersForSteamPipe_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetServersForSteamPipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetServersForSteamPipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetServersForSteamPipe(ctx, req.(*CContentServerDirectory_GetServersForSteamPipe_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_GetDepotPatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetDepotPatchInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetDepotPatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetDepotPatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetDepotPatchInfo(ctx, req.(*CContentServerDirectory_GetDepotPatchInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_GetClientUpdateHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetClientUpdateHosts_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetClientUpdateHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetClientUpdateHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetClientUpdateHosts(ctx, req.(*CContentServerDirectory_GetClientUpdateHosts_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_GetManifestRequestCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetManifestRequestCode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetManifestRequestCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetManifestRequestCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetManifestRequestCode(ctx, req.(*CContentServerDirectory_GetManifestRequestCode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_GetCDNAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetCDNAuthToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetCDNAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetCDNAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetCDNAuthToken(ctx, req.(*CContentServerDirectory_GetCDNAuthToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_RequestPeerContentServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_RequestPeerContentServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).RequestPeerContentServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/RequestPeerContentServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).RequestPeerContentServer(ctx, req.(*CContentServerDirectory_RequestPeerContentServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentServerDirectory_GetPeerContentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CContentServerDirectory_GetPeerContentInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServerDirectoryServer).GetPeerContentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentServerDirectory/GetPeerContentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServerDirectoryServer).GetPeerContentInfo(ctx, req.(*CContentServerDirectory_GetPeerContentInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentServerDirectory_ServiceDesc is the grpc.ServiceDesc for ContentServerDirectory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentServerDirectory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContentServerDirectory",
	HandlerType: (*ContentServerDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServersForSteamPipe",
			Handler:    _ContentServerDirectory_GetServersForSteamPipe_Handler,
		},
		{
			MethodName: "GetDepotPatchInfo",
			Handler:    _ContentServerDirectory_GetDepotPatchInfo_Handler,
		},
		{
			MethodName: "GetClientUpdateHosts",
			Handler:    _ContentServerDirectory_GetClientUpdateHosts_Handler,
		},
		{
			MethodName: "GetManifestRequestCode",
			Handler:    _ContentServerDirectory_GetManifestRequestCode_Handler,
		},
		{
			MethodName: "GetCDNAuthToken",
			Handler:    _ContentServerDirectory_GetCDNAuthToken_Handler,
		},
		{
			MethodName: "RequestPeerContentServer",
			Handler:    _ContentServerDirectory_RequestPeerContentServer_Handler,
		},
		{
			MethodName: "GetPeerContentInfo",
			Handler:    _ContentServerDirectory_GetPeerContentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_contentsystem.steamclient.proto",
}
