// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_credentials.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialsClient is the client API for Credentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsClient interface {
	TestAvailablePassword(ctx context.Context, in *CCredentials_TestAvailablePassword_Request, opts ...grpc.CallOption) (*CCredentials_TestAvailablePassword_Response, error)
	GetSteamGuardDetails(ctx context.Context, in *CCredentials_GetSteamGuardDetails_Request, opts ...grpc.CallOption) (*CCredentials_GetSteamGuardDetails_Response, error)
	ValidateEmailAddress(ctx context.Context, in *CCredentials_ValidateEmailAddress_Request, opts ...grpc.CallOption) (*CCredentials_ValidateEmailAddress_Response, error)
	SteamGuardPhishingReport(ctx context.Context, in *CCredentials_SteamGuardPhishingReport_Request, opts ...grpc.CallOption) (*CCredentials_SteamGuardPhishingReport_Response, error)
	GetCredentialChangeTimeDetails(ctx context.Context, in *CCredentials_LastCredentialChangeTime_Request, opts ...grpc.CallOption) (*CCredentials_LastCredentialChangeTime_Response, error)
	GetAccountAuthSecret(ctx context.Context, in *CCredentials_GetAccountAuthSecret_Request, opts ...grpc.CallOption) (*CCredentials_GetAccountAuthSecret_Response, error)
}

type credentialsClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsClient(cc grpc.ClientConnInterface) CredentialsClient {
	return &credentialsClient{cc}
}

func (c *credentialsClient) TestAvailablePassword(ctx context.Context, in *CCredentials_TestAvailablePassword_Request, opts ...grpc.CallOption) (*CCredentials_TestAvailablePassword_Response, error) {
	out := new(CCredentials_TestAvailablePassword_Response)
	err := c.cc.Invoke(ctx, "/Credentials/TestAvailablePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) GetSteamGuardDetails(ctx context.Context, in *CCredentials_GetSteamGuardDetails_Request, opts ...grpc.CallOption) (*CCredentials_GetSteamGuardDetails_Response, error) {
	out := new(CCredentials_GetSteamGuardDetails_Response)
	err := c.cc.Invoke(ctx, "/Credentials/GetSteamGuardDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) ValidateEmailAddress(ctx context.Context, in *CCredentials_ValidateEmailAddress_Request, opts ...grpc.CallOption) (*CCredentials_ValidateEmailAddress_Response, error) {
	out := new(CCredentials_ValidateEmailAddress_Response)
	err := c.cc.Invoke(ctx, "/Credentials/ValidateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) SteamGuardPhishingReport(ctx context.Context, in *CCredentials_SteamGuardPhishingReport_Request, opts ...grpc.CallOption) (*CCredentials_SteamGuardPhishingReport_Response, error) {
	out := new(CCredentials_SteamGuardPhishingReport_Response)
	err := c.cc.Invoke(ctx, "/Credentials/SteamGuardPhishingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) GetCredentialChangeTimeDetails(ctx context.Context, in *CCredentials_LastCredentialChangeTime_Request, opts ...grpc.CallOption) (*CCredentials_LastCredentialChangeTime_Response, error) {
	out := new(CCredentials_LastCredentialChangeTime_Response)
	err := c.cc.Invoke(ctx, "/Credentials/GetCredentialChangeTimeDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) GetAccountAuthSecret(ctx context.Context, in *CCredentials_GetAccountAuthSecret_Request, opts ...grpc.CallOption) (*CCredentials_GetAccountAuthSecret_Response, error) {
	out := new(CCredentials_GetAccountAuthSecret_Response)
	err := c.cc.Invoke(ctx, "/Credentials/GetAccountAuthSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialsServer is the server API for Credentials service.
// All implementations must embed UnimplementedCredentialsServer
// for forward compatibility
type CredentialsServer interface {
	TestAvailablePassword(context.Context, *CCredentials_TestAvailablePassword_Request) (*CCredentials_TestAvailablePassword_Response, error)
	GetSteamGuardDetails(context.Context, *CCredentials_GetSteamGuardDetails_Request) (*CCredentials_GetSteamGuardDetails_Response, error)
	ValidateEmailAddress(context.Context, *CCredentials_ValidateEmailAddress_Request) (*CCredentials_ValidateEmailAddress_Response, error)
	SteamGuardPhishingReport(context.Context, *CCredentials_SteamGuardPhishingReport_Request) (*CCredentials_SteamGuardPhishingReport_Response, error)
	GetCredentialChangeTimeDetails(context.Context, *CCredentials_LastCredentialChangeTime_Request) (*CCredentials_LastCredentialChangeTime_Response, error)
	GetAccountAuthSecret(context.Context, *CCredentials_GetAccountAuthSecret_Request) (*CCredentials_GetAccountAuthSecret_Response, error)
	mustEmbedUnimplementedCredentialsServer()
}

// UnimplementedCredentialsServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsServer struct {
}

func (UnimplementedCredentialsServer) TestAvailablePassword(context.Context, *CCredentials_TestAvailablePassword_Request) (*CCredentials_TestAvailablePassword_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAvailablePassword not implemented")
}
func (UnimplementedCredentialsServer) GetSteamGuardDetails(context.Context, *CCredentials_GetSteamGuardDetails_Request) (*CCredentials_GetSteamGuardDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteamGuardDetails not implemented")
}
func (UnimplementedCredentialsServer) ValidateEmailAddress(context.Context, *CCredentials_ValidateEmailAddress_Request) (*CCredentials_ValidateEmailAddress_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEmailAddress not implemented")
}
func (UnimplementedCredentialsServer) SteamGuardPhishingReport(context.Context, *CCredentials_SteamGuardPhishingReport_Request) (*CCredentials_SteamGuardPhishingReport_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamGuardPhishingReport not implemented")
}
func (UnimplementedCredentialsServer) GetCredentialChangeTimeDetails(context.Context, *CCredentials_LastCredentialChangeTime_Request) (*CCredentials_LastCredentialChangeTime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialChangeTimeDetails not implemented")
}
func (UnimplementedCredentialsServer) GetAccountAuthSecret(context.Context, *CCredentials_GetAccountAuthSecret_Request) (*CCredentials_GetAccountAuthSecret_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAuthSecret not implemented")
}
func (UnimplementedCredentialsServer) mustEmbedUnimplementedCredentialsServer() {}

// UnsafeCredentialsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsServer will
// result in compilation errors.
type UnsafeCredentialsServer interface {
	mustEmbedUnimplementedCredentialsServer()
}

func RegisterCredentialsServer(s grpc.ServiceRegistrar, srv CredentialsServer) {
	s.RegisterService(&Credentials_ServiceDesc, srv)
}

func _Credentials_TestAvailablePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_TestAvailablePassword_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).TestAvailablePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/TestAvailablePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).TestAvailablePassword(ctx, req.(*CCredentials_TestAvailablePassword_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_GetSteamGuardDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_GetSteamGuardDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).GetSteamGuardDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/GetSteamGuardDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).GetSteamGuardDetails(ctx, req.(*CCredentials_GetSteamGuardDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_ValidateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_ValidateEmailAddress_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).ValidateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/ValidateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).ValidateEmailAddress(ctx, req.(*CCredentials_ValidateEmailAddress_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_SteamGuardPhishingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_SteamGuardPhishingReport_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).SteamGuardPhishingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/SteamGuardPhishingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).SteamGuardPhishingReport(ctx, req.(*CCredentials_SteamGuardPhishingReport_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_GetCredentialChangeTimeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_LastCredentialChangeTime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).GetCredentialChangeTimeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/GetCredentialChangeTimeDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).GetCredentialChangeTimeDetails(ctx, req.(*CCredentials_LastCredentialChangeTime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_GetAccountAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCredentials_GetAccountAuthSecret_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).GetAccountAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Credentials/GetAccountAuthSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).GetAccountAuthSecret(ctx, req.(*CCredentials_GetAccountAuthSecret_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Credentials_ServiceDesc is the grpc.ServiceDesc for Credentials service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credentials_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Credentials",
	HandlerType: (*CredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestAvailablePassword",
			Handler:    _Credentials_TestAvailablePassword_Handler,
		},
		{
			MethodName: "GetSteamGuardDetails",
			Handler:    _Credentials_GetSteamGuardDetails_Handler,
		},
		{
			MethodName: "ValidateEmailAddress",
			Handler:    _Credentials_ValidateEmailAddress_Handler,
		},
		{
			MethodName: "SteamGuardPhishingReport",
			Handler:    _Credentials_SteamGuardPhishingReport_Handler,
		},
		{
			MethodName: "GetCredentialChangeTimeDetails",
			Handler:    _Credentials_GetCredentialChangeTimeDetails_Handler,
		},
		{
			MethodName: "GetAccountAuthSecret",
			Handler:    _Credentials_GetAccountAuthSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_credentials.steamclient.proto",
}
