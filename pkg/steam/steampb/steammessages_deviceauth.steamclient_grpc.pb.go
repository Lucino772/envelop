// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_deviceauth.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceAuthClient is the client API for DeviceAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceAuthClient interface {
	GetOwnAuthorizedDevices(ctx context.Context, in *CDeviceAuth_GetOwnAuthorizedDevices_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetOwnAuthorizedDevices_Response, error)
	AcceptAuthorizationRequest(ctx context.Context, in *CDeviceAuth_AcceptAuthorizationRequest_Request, opts ...grpc.CallOption) (*CDeviceAuth_AcceptAuthorizationRequest_Response, error)
	AuthorizeRemoteDevice(ctx context.Context, in *CDeviceAuth_AuthorizeRemoteDevice_Request, opts ...grpc.CallOption) (*CDeviceAuth_AuthorizeRemoteDevice_Response, error)
	DeauthorizeRemoteDevice(ctx context.Context, in *CDeviceAuth_DeauthorizeRemoteDevice_Request, opts ...grpc.CallOption) (*CDeviceAuth_DeauthorizeRemoteDevice_Response, error)
	GetUsedAuthorizedDevices(ctx context.Context, in *CDeviceAuth_GetUsedAuthorizedDevices_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetUsedAuthorizedDevices_Response, error)
	GetAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_GetAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetAuthorizedBorrowers_Response, error)
	AddAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_AddAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_AddAuthorizedBorrowers_Response, error)
	RemoveAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_RemoveAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_RemoveAuthorizedBorrowers_Response, error)
	GetAuthorizedAsBorrower(ctx context.Context, in *CDeviceAuth_GetAuthorizedAsBorrower_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetAuthorizedAsBorrower_Response, error)
	GetExcludedGamesInLibrary(ctx context.Context, in *CDeviceAuth_GetExcludedGamesInLibrary_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetExcludedGamesInLibrary_Response, error)
	GetBorrowerPlayHistory(ctx context.Context, in *CDeviceAuth_GetBorrowerPlayHistory_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetBorrowerPlayHistory_Response, error)
}

type deviceAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceAuthClient(cc grpc.ClientConnInterface) DeviceAuthClient {
	return &deviceAuthClient{cc}
}

func (c *deviceAuthClient) GetOwnAuthorizedDevices(ctx context.Context, in *CDeviceAuth_GetOwnAuthorizedDevices_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetOwnAuthorizedDevices_Response, error) {
	out := new(CDeviceAuth_GetOwnAuthorizedDevices_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetOwnAuthorizedDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) AcceptAuthorizationRequest(ctx context.Context, in *CDeviceAuth_AcceptAuthorizationRequest_Request, opts ...grpc.CallOption) (*CDeviceAuth_AcceptAuthorizationRequest_Response, error) {
	out := new(CDeviceAuth_AcceptAuthorizationRequest_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/AcceptAuthorizationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) AuthorizeRemoteDevice(ctx context.Context, in *CDeviceAuth_AuthorizeRemoteDevice_Request, opts ...grpc.CallOption) (*CDeviceAuth_AuthorizeRemoteDevice_Response, error) {
	out := new(CDeviceAuth_AuthorizeRemoteDevice_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/AuthorizeRemoteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) DeauthorizeRemoteDevice(ctx context.Context, in *CDeviceAuth_DeauthorizeRemoteDevice_Request, opts ...grpc.CallOption) (*CDeviceAuth_DeauthorizeRemoteDevice_Response, error) {
	out := new(CDeviceAuth_DeauthorizeRemoteDevice_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/DeauthorizeRemoteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) GetUsedAuthorizedDevices(ctx context.Context, in *CDeviceAuth_GetUsedAuthorizedDevices_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetUsedAuthorizedDevices_Response, error) {
	out := new(CDeviceAuth_GetUsedAuthorizedDevices_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetUsedAuthorizedDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) GetAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_GetAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetAuthorizedBorrowers_Response, error) {
	out := new(CDeviceAuth_GetAuthorizedBorrowers_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetAuthorizedBorrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) AddAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_AddAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_AddAuthorizedBorrowers_Response, error) {
	out := new(CDeviceAuth_AddAuthorizedBorrowers_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/AddAuthorizedBorrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) RemoveAuthorizedBorrowers(ctx context.Context, in *CDeviceAuth_RemoveAuthorizedBorrowers_Request, opts ...grpc.CallOption) (*CDeviceAuth_RemoveAuthorizedBorrowers_Response, error) {
	out := new(CDeviceAuth_RemoveAuthorizedBorrowers_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/RemoveAuthorizedBorrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) GetAuthorizedAsBorrower(ctx context.Context, in *CDeviceAuth_GetAuthorizedAsBorrower_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetAuthorizedAsBorrower_Response, error) {
	out := new(CDeviceAuth_GetAuthorizedAsBorrower_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetAuthorizedAsBorrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) GetExcludedGamesInLibrary(ctx context.Context, in *CDeviceAuth_GetExcludedGamesInLibrary_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetExcludedGamesInLibrary_Response, error) {
	out := new(CDeviceAuth_GetExcludedGamesInLibrary_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetExcludedGamesInLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) GetBorrowerPlayHistory(ctx context.Context, in *CDeviceAuth_GetBorrowerPlayHistory_Request, opts ...grpc.CallOption) (*CDeviceAuth_GetBorrowerPlayHistory_Response, error) {
	out := new(CDeviceAuth_GetBorrowerPlayHistory_Response)
	err := c.cc.Invoke(ctx, "/DeviceAuth/GetBorrowerPlayHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceAuthServer is the server API for DeviceAuth service.
// All implementations must embed UnimplementedDeviceAuthServer
// for forward compatibility
type DeviceAuthServer interface {
	GetOwnAuthorizedDevices(context.Context, *CDeviceAuth_GetOwnAuthorizedDevices_Request) (*CDeviceAuth_GetOwnAuthorizedDevices_Response, error)
	AcceptAuthorizationRequest(context.Context, *CDeviceAuth_AcceptAuthorizationRequest_Request) (*CDeviceAuth_AcceptAuthorizationRequest_Response, error)
	AuthorizeRemoteDevice(context.Context, *CDeviceAuth_AuthorizeRemoteDevice_Request) (*CDeviceAuth_AuthorizeRemoteDevice_Response, error)
	DeauthorizeRemoteDevice(context.Context, *CDeviceAuth_DeauthorizeRemoteDevice_Request) (*CDeviceAuth_DeauthorizeRemoteDevice_Response, error)
	GetUsedAuthorizedDevices(context.Context, *CDeviceAuth_GetUsedAuthorizedDevices_Request) (*CDeviceAuth_GetUsedAuthorizedDevices_Response, error)
	GetAuthorizedBorrowers(context.Context, *CDeviceAuth_GetAuthorizedBorrowers_Request) (*CDeviceAuth_GetAuthorizedBorrowers_Response, error)
	AddAuthorizedBorrowers(context.Context, *CDeviceAuth_AddAuthorizedBorrowers_Request) (*CDeviceAuth_AddAuthorizedBorrowers_Response, error)
	RemoveAuthorizedBorrowers(context.Context, *CDeviceAuth_RemoveAuthorizedBorrowers_Request) (*CDeviceAuth_RemoveAuthorizedBorrowers_Response, error)
	GetAuthorizedAsBorrower(context.Context, *CDeviceAuth_GetAuthorizedAsBorrower_Request) (*CDeviceAuth_GetAuthorizedAsBorrower_Response, error)
	GetExcludedGamesInLibrary(context.Context, *CDeviceAuth_GetExcludedGamesInLibrary_Request) (*CDeviceAuth_GetExcludedGamesInLibrary_Response, error)
	GetBorrowerPlayHistory(context.Context, *CDeviceAuth_GetBorrowerPlayHistory_Request) (*CDeviceAuth_GetBorrowerPlayHistory_Response, error)
	mustEmbedUnimplementedDeviceAuthServer()
}

// UnimplementedDeviceAuthServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceAuthServer struct {
}

func (UnimplementedDeviceAuthServer) GetOwnAuthorizedDevices(context.Context, *CDeviceAuth_GetOwnAuthorizedDevices_Request) (*CDeviceAuth_GetOwnAuthorizedDevices_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnAuthorizedDevices not implemented")
}
func (UnimplementedDeviceAuthServer) AcceptAuthorizationRequest(context.Context, *CDeviceAuth_AcceptAuthorizationRequest_Request) (*CDeviceAuth_AcceptAuthorizationRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAuthorizationRequest not implemented")
}
func (UnimplementedDeviceAuthServer) AuthorizeRemoteDevice(context.Context, *CDeviceAuth_AuthorizeRemoteDevice_Request) (*CDeviceAuth_AuthorizeRemoteDevice_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeRemoteDevice not implemented")
}
func (UnimplementedDeviceAuthServer) DeauthorizeRemoteDevice(context.Context, *CDeviceAuth_DeauthorizeRemoteDevice_Request) (*CDeviceAuth_DeauthorizeRemoteDevice_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeauthorizeRemoteDevice not implemented")
}
func (UnimplementedDeviceAuthServer) GetUsedAuthorizedDevices(context.Context, *CDeviceAuth_GetUsedAuthorizedDevices_Request) (*CDeviceAuth_GetUsedAuthorizedDevices_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsedAuthorizedDevices not implemented")
}
func (UnimplementedDeviceAuthServer) GetAuthorizedBorrowers(context.Context, *CDeviceAuth_GetAuthorizedBorrowers_Request) (*CDeviceAuth_GetAuthorizedBorrowers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedBorrowers not implemented")
}
func (UnimplementedDeviceAuthServer) AddAuthorizedBorrowers(context.Context, *CDeviceAuth_AddAuthorizedBorrowers_Request) (*CDeviceAuth_AddAuthorizedBorrowers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthorizedBorrowers not implemented")
}
func (UnimplementedDeviceAuthServer) RemoveAuthorizedBorrowers(context.Context, *CDeviceAuth_RemoveAuthorizedBorrowers_Request) (*CDeviceAuth_RemoveAuthorizedBorrowers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthorizedBorrowers not implemented")
}
func (UnimplementedDeviceAuthServer) GetAuthorizedAsBorrower(context.Context, *CDeviceAuth_GetAuthorizedAsBorrower_Request) (*CDeviceAuth_GetAuthorizedAsBorrower_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedAsBorrower not implemented")
}
func (UnimplementedDeviceAuthServer) GetExcludedGamesInLibrary(context.Context, *CDeviceAuth_GetExcludedGamesInLibrary_Request) (*CDeviceAuth_GetExcludedGamesInLibrary_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcludedGamesInLibrary not implemented")
}
func (UnimplementedDeviceAuthServer) GetBorrowerPlayHistory(context.Context, *CDeviceAuth_GetBorrowerPlayHistory_Request) (*CDeviceAuth_GetBorrowerPlayHistory_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowerPlayHistory not implemented")
}
func (UnimplementedDeviceAuthServer) mustEmbedUnimplementedDeviceAuthServer() {}

// UnsafeDeviceAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceAuthServer will
// result in compilation errors.
type UnsafeDeviceAuthServer interface {
	mustEmbedUnimplementedDeviceAuthServer()
}

func RegisterDeviceAuthServer(s grpc.ServiceRegistrar, srv DeviceAuthServer) {
	s.RegisterService(&DeviceAuth_ServiceDesc, srv)
}

func _DeviceAuth_GetOwnAuthorizedDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetOwnAuthorizedDevices_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetOwnAuthorizedDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetOwnAuthorizedDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetOwnAuthorizedDevices(ctx, req.(*CDeviceAuth_GetOwnAuthorizedDevices_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_AcceptAuthorizationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_AcceptAuthorizationRequest_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).AcceptAuthorizationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/AcceptAuthorizationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).AcceptAuthorizationRequest(ctx, req.(*CDeviceAuth_AcceptAuthorizationRequest_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_AuthorizeRemoteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_AuthorizeRemoteDevice_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).AuthorizeRemoteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/AuthorizeRemoteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).AuthorizeRemoteDevice(ctx, req.(*CDeviceAuth_AuthorizeRemoteDevice_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_DeauthorizeRemoteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_DeauthorizeRemoteDevice_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).DeauthorizeRemoteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/DeauthorizeRemoteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).DeauthorizeRemoteDevice(ctx, req.(*CDeviceAuth_DeauthorizeRemoteDevice_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_GetUsedAuthorizedDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetUsedAuthorizedDevices_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetUsedAuthorizedDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetUsedAuthorizedDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetUsedAuthorizedDevices(ctx, req.(*CDeviceAuth_GetUsedAuthorizedDevices_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_GetAuthorizedBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetAuthorizedBorrowers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetAuthorizedBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetAuthorizedBorrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetAuthorizedBorrowers(ctx, req.(*CDeviceAuth_GetAuthorizedBorrowers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_AddAuthorizedBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_AddAuthorizedBorrowers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).AddAuthorizedBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/AddAuthorizedBorrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).AddAuthorizedBorrowers(ctx, req.(*CDeviceAuth_AddAuthorizedBorrowers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_RemoveAuthorizedBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_RemoveAuthorizedBorrowers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).RemoveAuthorizedBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/RemoveAuthorizedBorrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).RemoveAuthorizedBorrowers(ctx, req.(*CDeviceAuth_RemoveAuthorizedBorrowers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_GetAuthorizedAsBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetAuthorizedAsBorrower_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetAuthorizedAsBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetAuthorizedAsBorrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetAuthorizedAsBorrower(ctx, req.(*CDeviceAuth_GetAuthorizedAsBorrower_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_GetExcludedGamesInLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetExcludedGamesInLibrary_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetExcludedGamesInLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetExcludedGamesInLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetExcludedGamesInLibrary(ctx, req.(*CDeviceAuth_GetExcludedGamesInLibrary_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_GetBorrowerPlayHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDeviceAuth_GetBorrowerPlayHistory_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).GetBorrowerPlayHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceAuth/GetBorrowerPlayHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).GetBorrowerPlayHistory(ctx, req.(*CDeviceAuth_GetBorrowerPlayHistory_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceAuth_ServiceDesc is the grpc.ServiceDesc for DeviceAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceAuth",
	HandlerType: (*DeviceAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwnAuthorizedDevices",
			Handler:    _DeviceAuth_GetOwnAuthorizedDevices_Handler,
		},
		{
			MethodName: "AcceptAuthorizationRequest",
			Handler:    _DeviceAuth_AcceptAuthorizationRequest_Handler,
		},
		{
			MethodName: "AuthorizeRemoteDevice",
			Handler:    _DeviceAuth_AuthorizeRemoteDevice_Handler,
		},
		{
			MethodName: "DeauthorizeRemoteDevice",
			Handler:    _DeviceAuth_DeauthorizeRemoteDevice_Handler,
		},
		{
			MethodName: "GetUsedAuthorizedDevices",
			Handler:    _DeviceAuth_GetUsedAuthorizedDevices_Handler,
		},
		{
			MethodName: "GetAuthorizedBorrowers",
			Handler:    _DeviceAuth_GetAuthorizedBorrowers_Handler,
		},
		{
			MethodName: "AddAuthorizedBorrowers",
			Handler:    _DeviceAuth_AddAuthorizedBorrowers_Handler,
		},
		{
			MethodName: "RemoveAuthorizedBorrowers",
			Handler:    _DeviceAuth_RemoveAuthorizedBorrowers_Handler,
		},
		{
			MethodName: "GetAuthorizedAsBorrower",
			Handler:    _DeviceAuth_GetAuthorizedAsBorrower_Handler,
		},
		{
			MethodName: "GetExcludedGamesInLibrary",
			Handler:    _DeviceAuth_GetExcludedGamesInLibrary_Handler,
		},
		{
			MethodName: "GetBorrowerPlayHistory",
			Handler:    _DeviceAuth_GetBorrowerPlayHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_deviceauth.steamclient.proto",
}
