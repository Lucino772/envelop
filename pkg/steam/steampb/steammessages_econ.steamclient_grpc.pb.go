// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_econ.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EconClient is the client API for Econ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EconClient interface {
	GetInventoryItemsWithDescriptions(ctx context.Context, in *CEcon_GetInventoryItemsWithDescriptions_Request, opts ...grpc.CallOption) (*CEcon_GetInventoryItemsWithDescriptions_Response, error)
	GetTradeOfferAccessToken(ctx context.Context, in *CEcon_GetTradeOfferAccessToken_Request, opts ...grpc.CallOption) (*CEcon_GetTradeOfferAccessToken_Response, error)
	ClientGetItemShopOverlayAuthURL(ctx context.Context, in *CEcon_ClientGetItemShopOverlayAuthURL_Request, opts ...grpc.CallOption) (*CEcon_ClientGetItemShopOverlayAuthURL_Response, error)
	GetAssetClassInfo(ctx context.Context, in *CEcon_GetAssetClassInfo_Request, opts ...grpc.CallOption) (*CEcon_GetAssetClassInfo_Response, error)
}

type econClient struct {
	cc grpc.ClientConnInterface
}

func NewEconClient(cc grpc.ClientConnInterface) EconClient {
	return &econClient{cc}
}

func (c *econClient) GetInventoryItemsWithDescriptions(ctx context.Context, in *CEcon_GetInventoryItemsWithDescriptions_Request, opts ...grpc.CallOption) (*CEcon_GetInventoryItemsWithDescriptions_Response, error) {
	out := new(CEcon_GetInventoryItemsWithDescriptions_Response)
	err := c.cc.Invoke(ctx, "/Econ/GetInventoryItemsWithDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *econClient) GetTradeOfferAccessToken(ctx context.Context, in *CEcon_GetTradeOfferAccessToken_Request, opts ...grpc.CallOption) (*CEcon_GetTradeOfferAccessToken_Response, error) {
	out := new(CEcon_GetTradeOfferAccessToken_Response)
	err := c.cc.Invoke(ctx, "/Econ/GetTradeOfferAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *econClient) ClientGetItemShopOverlayAuthURL(ctx context.Context, in *CEcon_ClientGetItemShopOverlayAuthURL_Request, opts ...grpc.CallOption) (*CEcon_ClientGetItemShopOverlayAuthURL_Response, error) {
	out := new(CEcon_ClientGetItemShopOverlayAuthURL_Response)
	err := c.cc.Invoke(ctx, "/Econ/ClientGetItemShopOverlayAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *econClient) GetAssetClassInfo(ctx context.Context, in *CEcon_GetAssetClassInfo_Request, opts ...grpc.CallOption) (*CEcon_GetAssetClassInfo_Response, error) {
	out := new(CEcon_GetAssetClassInfo_Response)
	err := c.cc.Invoke(ctx, "/Econ/GetAssetClassInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EconServer is the server API for Econ service.
// All implementations must embed UnimplementedEconServer
// for forward compatibility
type EconServer interface {
	GetInventoryItemsWithDescriptions(context.Context, *CEcon_GetInventoryItemsWithDescriptions_Request) (*CEcon_GetInventoryItemsWithDescriptions_Response, error)
	GetTradeOfferAccessToken(context.Context, *CEcon_GetTradeOfferAccessToken_Request) (*CEcon_GetTradeOfferAccessToken_Response, error)
	ClientGetItemShopOverlayAuthURL(context.Context, *CEcon_ClientGetItemShopOverlayAuthURL_Request) (*CEcon_ClientGetItemShopOverlayAuthURL_Response, error)
	GetAssetClassInfo(context.Context, *CEcon_GetAssetClassInfo_Request) (*CEcon_GetAssetClassInfo_Response, error)
	mustEmbedUnimplementedEconServer()
}

// UnimplementedEconServer must be embedded to have forward compatible implementations.
type UnimplementedEconServer struct {
}

func (UnimplementedEconServer) GetInventoryItemsWithDescriptions(context.Context, *CEcon_GetInventoryItemsWithDescriptions_Request) (*CEcon_GetInventoryItemsWithDescriptions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryItemsWithDescriptions not implemented")
}
func (UnimplementedEconServer) GetTradeOfferAccessToken(context.Context, *CEcon_GetTradeOfferAccessToken_Request) (*CEcon_GetTradeOfferAccessToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeOfferAccessToken not implemented")
}
func (UnimplementedEconServer) ClientGetItemShopOverlayAuthURL(context.Context, *CEcon_ClientGetItemShopOverlayAuthURL_Request) (*CEcon_ClientGetItemShopOverlayAuthURL_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetItemShopOverlayAuthURL not implemented")
}
func (UnimplementedEconServer) GetAssetClassInfo(context.Context, *CEcon_GetAssetClassInfo_Request) (*CEcon_GetAssetClassInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetClassInfo not implemented")
}
func (UnimplementedEconServer) mustEmbedUnimplementedEconServer() {}

// UnsafeEconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EconServer will
// result in compilation errors.
type UnsafeEconServer interface {
	mustEmbedUnimplementedEconServer()
}

func RegisterEconServer(s grpc.ServiceRegistrar, srv EconServer) {
	s.RegisterService(&Econ_ServiceDesc, srv)
}

func _Econ_GetInventoryItemsWithDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CEcon_GetInventoryItemsWithDescriptions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconServer).GetInventoryItemsWithDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Econ/GetInventoryItemsWithDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconServer).GetInventoryItemsWithDescriptions(ctx, req.(*CEcon_GetInventoryItemsWithDescriptions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Econ_GetTradeOfferAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CEcon_GetTradeOfferAccessToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconServer).GetTradeOfferAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Econ/GetTradeOfferAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconServer).GetTradeOfferAccessToken(ctx, req.(*CEcon_GetTradeOfferAccessToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Econ_ClientGetItemShopOverlayAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CEcon_ClientGetItemShopOverlayAuthURL_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconServer).ClientGetItemShopOverlayAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Econ/ClientGetItemShopOverlayAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconServer).ClientGetItemShopOverlayAuthURL(ctx, req.(*CEcon_ClientGetItemShopOverlayAuthURL_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Econ_GetAssetClassInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CEcon_GetAssetClassInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconServer).GetAssetClassInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Econ/GetAssetClassInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconServer).GetAssetClassInfo(ctx, req.(*CEcon_GetAssetClassInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Econ_ServiceDesc is the grpc.ServiceDesc for Econ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Econ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Econ",
	HandlerType: (*EconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventoryItemsWithDescriptions",
			Handler:    _Econ_GetInventoryItemsWithDescriptions_Handler,
		},
		{
			MethodName: "GetTradeOfferAccessToken",
			Handler:    _Econ_GetTradeOfferAccessToken_Handler,
		},
		{
			MethodName: "ClientGetItemShopOverlayAuthURL",
			Handler:    _Econ_ClientGetItemShopOverlayAuthURL_Handler,
		},
		{
			MethodName: "GetAssetClassInfo",
			Handler:    _Econ_GetAssetClassInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_econ.steamclient.proto",
}
