// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_gamenetworking.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameNetworkingClient is the client API for GameNetworking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameNetworkingClient interface {
	AllocateFakeIP(ctx context.Context, in *CGameNetworking_AllocateFakeIP_Request, opts ...grpc.CallOption) (*CGameNetworking_AllocateFakeIP_Response, error)
	NotifyReleaseFakeIP(ctx context.Context, in *CGameNetworking_ReleaseFakeIP_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type gameNetworkingClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNetworkingClient(cc grpc.ClientConnInterface) GameNetworkingClient {
	return &gameNetworkingClient{cc}
}

func (c *gameNetworkingClient) AllocateFakeIP(ctx context.Context, in *CGameNetworking_AllocateFakeIP_Request, opts ...grpc.CallOption) (*CGameNetworking_AllocateFakeIP_Response, error) {
	out := new(CGameNetworking_AllocateFakeIP_Response)
	err := c.cc.Invoke(ctx, "/GameNetworking/AllocateFakeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNetworkingClient) NotifyReleaseFakeIP(ctx context.Context, in *CGameNetworking_ReleaseFakeIP_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/GameNetworking/NotifyReleaseFakeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameNetworkingServer is the server API for GameNetworking service.
// All implementations must embed UnimplementedGameNetworkingServer
// for forward compatibility
type GameNetworkingServer interface {
	AllocateFakeIP(context.Context, *CGameNetworking_AllocateFakeIP_Request) (*CGameNetworking_AllocateFakeIP_Response, error)
	NotifyReleaseFakeIP(context.Context, *CGameNetworking_ReleaseFakeIP_Notification) (*NoResponse, error)
	mustEmbedUnimplementedGameNetworkingServer()
}

// UnimplementedGameNetworkingServer must be embedded to have forward compatible implementations.
type UnimplementedGameNetworkingServer struct {
}

func (UnimplementedGameNetworkingServer) AllocateFakeIP(context.Context, *CGameNetworking_AllocateFakeIP_Request) (*CGameNetworking_AllocateFakeIP_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateFakeIP not implemented")
}
func (UnimplementedGameNetworkingServer) NotifyReleaseFakeIP(context.Context, *CGameNetworking_ReleaseFakeIP_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyReleaseFakeIP not implemented")
}
func (UnimplementedGameNetworkingServer) mustEmbedUnimplementedGameNetworkingServer() {}

// UnsafeGameNetworkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNetworkingServer will
// result in compilation errors.
type UnsafeGameNetworkingServer interface {
	mustEmbedUnimplementedGameNetworkingServer()
}

func RegisterGameNetworkingServer(s grpc.ServiceRegistrar, srv GameNetworkingServer) {
	s.RegisterService(&GameNetworking_ServiceDesc, srv)
}

func _GameNetworking_AllocateFakeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNetworking_AllocateFakeIP_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNetworkingServer).AllocateFakeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNetworking/AllocateFakeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNetworkingServer).AllocateFakeIP(ctx, req.(*CGameNetworking_AllocateFakeIP_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNetworking_NotifyReleaseFakeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNetworking_ReleaseFakeIP_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNetworkingServer).NotifyReleaseFakeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNetworking/NotifyReleaseFakeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNetworkingServer).NotifyReleaseFakeIP(ctx, req.(*CGameNetworking_ReleaseFakeIP_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// GameNetworking_ServiceDesc is the grpc.ServiceDesc for GameNetworking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNetworking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameNetworking",
	HandlerType: (*GameNetworkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateFakeIP",
			Handler:    _GameNetworking_AllocateFakeIP_Handler,
		},
		{
			MethodName: "NotifyReleaseFakeIP",
			Handler:    _GameNetworking_NotifyReleaseFakeIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_gamenetworking.steamclient.proto",
}
