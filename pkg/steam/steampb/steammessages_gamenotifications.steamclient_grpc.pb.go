// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_gamenotifications.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameNotificationsClient is the client API for GameNotifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameNotificationsClient interface {
	UserCreateSession(ctx context.Context, in *CGameNotifications_CreateSession_Request, opts ...grpc.CallOption) (*CGameNotifications_CreateSession_Response, error)
	UserDeleteSession(ctx context.Context, in *CGameNotifications_DeleteSession_Request, opts ...grpc.CallOption) (*CGameNotifications_DeleteSession_Response, error)
	UserUpdateSession(ctx context.Context, in *CGameNotifications_UpdateSession_Request, opts ...grpc.CallOption) (*CGameNotifications_UpdateSession_Response, error)
	EnumerateSessions(ctx context.Context, in *CGameNotifications_EnumerateSessions_Request, opts ...grpc.CallOption) (*CGameNotifications_EnumerateSessions_Response, error)
	GetSessionDetails(ctx context.Context, in *CGameNotifications_GetSessionDetails_Request, opts ...grpc.CallOption) (*CGameNotifications_GetSessionDetails_Response, error)
	UpdateNotificationSettings(ctx context.Context, in *CGameNotifications_UpdateNotificationSettings_Request, opts ...grpc.CallOption) (*CGameNotifications_UpdateNotificationSettings_Response, error)
}

type gameNotificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNotificationsClient(cc grpc.ClientConnInterface) GameNotificationsClient {
	return &gameNotificationsClient{cc}
}

func (c *gameNotificationsClient) UserCreateSession(ctx context.Context, in *CGameNotifications_CreateSession_Request, opts ...grpc.CallOption) (*CGameNotifications_CreateSession_Response, error) {
	out := new(CGameNotifications_CreateSession_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/UserCreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClient) UserDeleteSession(ctx context.Context, in *CGameNotifications_DeleteSession_Request, opts ...grpc.CallOption) (*CGameNotifications_DeleteSession_Response, error) {
	out := new(CGameNotifications_DeleteSession_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/UserDeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClient) UserUpdateSession(ctx context.Context, in *CGameNotifications_UpdateSession_Request, opts ...grpc.CallOption) (*CGameNotifications_UpdateSession_Response, error) {
	out := new(CGameNotifications_UpdateSession_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/UserUpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClient) EnumerateSessions(ctx context.Context, in *CGameNotifications_EnumerateSessions_Request, opts ...grpc.CallOption) (*CGameNotifications_EnumerateSessions_Response, error) {
	out := new(CGameNotifications_EnumerateSessions_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/EnumerateSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClient) GetSessionDetails(ctx context.Context, in *CGameNotifications_GetSessionDetails_Request, opts ...grpc.CallOption) (*CGameNotifications_GetSessionDetails_Response, error) {
	out := new(CGameNotifications_GetSessionDetails_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/GetSessionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClient) UpdateNotificationSettings(ctx context.Context, in *CGameNotifications_UpdateNotificationSettings_Request, opts ...grpc.CallOption) (*CGameNotifications_UpdateNotificationSettings_Response, error) {
	out := new(CGameNotifications_UpdateNotificationSettings_Response)
	err := c.cc.Invoke(ctx, "/GameNotifications/UpdateNotificationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameNotificationsServer is the server API for GameNotifications service.
// All implementations must embed UnimplementedGameNotificationsServer
// for forward compatibility
type GameNotificationsServer interface {
	UserCreateSession(context.Context, *CGameNotifications_CreateSession_Request) (*CGameNotifications_CreateSession_Response, error)
	UserDeleteSession(context.Context, *CGameNotifications_DeleteSession_Request) (*CGameNotifications_DeleteSession_Response, error)
	UserUpdateSession(context.Context, *CGameNotifications_UpdateSession_Request) (*CGameNotifications_UpdateSession_Response, error)
	EnumerateSessions(context.Context, *CGameNotifications_EnumerateSessions_Request) (*CGameNotifications_EnumerateSessions_Response, error)
	GetSessionDetails(context.Context, *CGameNotifications_GetSessionDetails_Request) (*CGameNotifications_GetSessionDetails_Response, error)
	UpdateNotificationSettings(context.Context, *CGameNotifications_UpdateNotificationSettings_Request) (*CGameNotifications_UpdateNotificationSettings_Response, error)
	mustEmbedUnimplementedGameNotificationsServer()
}

// UnimplementedGameNotificationsServer must be embedded to have forward compatible implementations.
type UnimplementedGameNotificationsServer struct {
}

func (UnimplementedGameNotificationsServer) UserCreateSession(context.Context, *CGameNotifications_CreateSession_Request) (*CGameNotifications_CreateSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateSession not implemented")
}
func (UnimplementedGameNotificationsServer) UserDeleteSession(context.Context, *CGameNotifications_DeleteSession_Request) (*CGameNotifications_DeleteSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteSession not implemented")
}
func (UnimplementedGameNotificationsServer) UserUpdateSession(context.Context, *CGameNotifications_UpdateSession_Request) (*CGameNotifications_UpdateSession_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateSession not implemented")
}
func (UnimplementedGameNotificationsServer) EnumerateSessions(context.Context, *CGameNotifications_EnumerateSessions_Request) (*CGameNotifications_EnumerateSessions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateSessions not implemented")
}
func (UnimplementedGameNotificationsServer) GetSessionDetails(context.Context, *CGameNotifications_GetSessionDetails_Request) (*CGameNotifications_GetSessionDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionDetails not implemented")
}
func (UnimplementedGameNotificationsServer) UpdateNotificationSettings(context.Context, *CGameNotifications_UpdateNotificationSettings_Request) (*CGameNotifications_UpdateNotificationSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSettings not implemented")
}
func (UnimplementedGameNotificationsServer) mustEmbedUnimplementedGameNotificationsServer() {}

// UnsafeGameNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNotificationsServer will
// result in compilation errors.
type UnsafeGameNotificationsServer interface {
	mustEmbedUnimplementedGameNotificationsServer()
}

func RegisterGameNotificationsServer(s grpc.ServiceRegistrar, srv GameNotificationsServer) {
	s.RegisterService(&GameNotifications_ServiceDesc, srv)
}

func _GameNotifications_UserCreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_CreateSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).UserCreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/UserCreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).UserCreateSession(ctx, req.(*CGameNotifications_CreateSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotifications_UserDeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_DeleteSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).UserDeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/UserDeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).UserDeleteSession(ctx, req.(*CGameNotifications_DeleteSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotifications_UserUpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_UpdateSession_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).UserUpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/UserUpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).UserUpdateSession(ctx, req.(*CGameNotifications_UpdateSession_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotifications_EnumerateSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_EnumerateSessions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).EnumerateSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/EnumerateSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).EnumerateSessions(ctx, req.(*CGameNotifications_EnumerateSessions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotifications_GetSessionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_GetSessionDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).GetSessionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/GetSessionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).GetSessionDetails(ctx, req.(*CGameNotifications_GetSessionDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotifications_UpdateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_UpdateNotificationSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsServer).UpdateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotifications/UpdateNotificationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsServer).UpdateNotificationSettings(ctx, req.(*CGameNotifications_UpdateNotificationSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameNotifications_ServiceDesc is the grpc.ServiceDesc for GameNotifications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNotifications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameNotifications",
	HandlerType: (*GameNotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreateSession",
			Handler:    _GameNotifications_UserCreateSession_Handler,
		},
		{
			MethodName: "UserDeleteSession",
			Handler:    _GameNotifications_UserDeleteSession_Handler,
		},
		{
			MethodName: "UserUpdateSession",
			Handler:    _GameNotifications_UserUpdateSession_Handler,
		},
		{
			MethodName: "EnumerateSessions",
			Handler:    _GameNotifications_EnumerateSessions_Handler,
		},
		{
			MethodName: "GetSessionDetails",
			Handler:    _GameNotifications_GetSessionDetails_Handler,
		},
		{
			MethodName: "UpdateNotificationSettings",
			Handler:    _GameNotifications_UpdateNotificationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_gamenotifications.steamclient.proto",
}

// GameNotificationsClientClient is the client API for GameNotificationsClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameNotificationsClientClient interface {
	OnNotificationsRequested(ctx context.Context, in *CGameNotifications_OnNotificationsRequested_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	OnUserStatusChanged(ctx context.Context, in *CGameNotifications_OnUserStatusChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type gameNotificationsClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNotificationsClientClient(cc grpc.ClientConnInterface) GameNotificationsClientClient {
	return &gameNotificationsClientClient{cc}
}

func (c *gameNotificationsClientClient) OnNotificationsRequested(ctx context.Context, in *CGameNotifications_OnNotificationsRequested_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/GameNotificationsClient/OnNotificationsRequested", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNotificationsClientClient) OnUserStatusChanged(ctx context.Context, in *CGameNotifications_OnUserStatusChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/GameNotificationsClient/OnUserStatusChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameNotificationsClientServer is the server API for GameNotificationsClient service.
// All implementations must embed UnimplementedGameNotificationsClientServer
// for forward compatibility
type GameNotificationsClientServer interface {
	OnNotificationsRequested(context.Context, *CGameNotifications_OnNotificationsRequested_Notification) (*NoResponse, error)
	OnUserStatusChanged(context.Context, *CGameNotifications_OnUserStatusChanged_Notification) (*NoResponse, error)
	mustEmbedUnimplementedGameNotificationsClientServer()
}

// UnimplementedGameNotificationsClientServer must be embedded to have forward compatible implementations.
type UnimplementedGameNotificationsClientServer struct {
}

func (UnimplementedGameNotificationsClientServer) OnNotificationsRequested(context.Context, *CGameNotifications_OnNotificationsRequested_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNotificationsRequested not implemented")
}
func (UnimplementedGameNotificationsClientServer) OnUserStatusChanged(context.Context, *CGameNotifications_OnUserStatusChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserStatusChanged not implemented")
}
func (UnimplementedGameNotificationsClientServer) mustEmbedUnimplementedGameNotificationsClientServer() {
}

// UnsafeGameNotificationsClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNotificationsClientServer will
// result in compilation errors.
type UnsafeGameNotificationsClientServer interface {
	mustEmbedUnimplementedGameNotificationsClientServer()
}

func RegisterGameNotificationsClientServer(s grpc.ServiceRegistrar, srv GameNotificationsClientServer) {
	s.RegisterService(&GameNotificationsClient_ServiceDesc, srv)
}

func _GameNotificationsClient_OnNotificationsRequested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_OnNotificationsRequested_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsClientServer).OnNotificationsRequested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotificationsClient/OnNotificationsRequested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsClientServer).OnNotificationsRequested(ctx, req.(*CGameNotifications_OnNotificationsRequested_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNotificationsClient_OnUserStatusChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameNotifications_OnUserStatusChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNotificationsClientServer).OnUserStatusChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameNotificationsClient/OnUserStatusChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNotificationsClientServer).OnUserStatusChanged(ctx, req.(*CGameNotifications_OnUserStatusChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// GameNotificationsClient_ServiceDesc is the grpc.ServiceDesc for GameNotificationsClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNotificationsClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameNotificationsClient",
	HandlerType: (*GameNotificationsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNotificationsRequested",
			Handler:    _GameNotificationsClient_OnNotificationsRequested_Handler,
		},
		{
			MethodName: "OnUserStatusChanged",
			Handler:    _GameNotificationsClient_OnUserStatusChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_gamenotifications.steamclient.proto",
}
