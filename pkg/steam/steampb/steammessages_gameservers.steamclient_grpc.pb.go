// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_gameservers.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServersClient is the client API for GameServers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServersClient interface {
	GetServerList(ctx context.Context, in *CGameServers_GetServerList_Request, opts ...grpc.CallOption) (*CGameServers_GetServerList_Response, error)
	GetServerSteamIDsByIP(ctx context.Context, in *CGameServers_GetServerSteamIDsByIP_Request, opts ...grpc.CallOption) (*CGameServers_IPsWithSteamIDs_Response, error)
	GetServerIPsBySteamID(ctx context.Context, in *CGameServers_GetServerIPsBySteamID_Request, opts ...grpc.CallOption) (*CGameServers_IPsWithSteamIDs_Response, error)
	QueryByFakeIP(ctx context.Context, in *CGameServers_QueryByFakeIP_Request, opts ...grpc.CallOption) (*CGameServers_GameServerQuery_Response, error)
}

type gameServersClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServersClient(cc grpc.ClientConnInterface) GameServersClient {
	return &gameServersClient{cc}
}

func (c *gameServersClient) GetServerList(ctx context.Context, in *CGameServers_GetServerList_Request, opts ...grpc.CallOption) (*CGameServers_GetServerList_Response, error) {
	out := new(CGameServers_GetServerList_Response)
	err := c.cc.Invoke(ctx, "/GameServers/GetServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServersClient) GetServerSteamIDsByIP(ctx context.Context, in *CGameServers_GetServerSteamIDsByIP_Request, opts ...grpc.CallOption) (*CGameServers_IPsWithSteamIDs_Response, error) {
	out := new(CGameServers_IPsWithSteamIDs_Response)
	err := c.cc.Invoke(ctx, "/GameServers/GetServerSteamIDsByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServersClient) GetServerIPsBySteamID(ctx context.Context, in *CGameServers_GetServerIPsBySteamID_Request, opts ...grpc.CallOption) (*CGameServers_IPsWithSteamIDs_Response, error) {
	out := new(CGameServers_IPsWithSteamIDs_Response)
	err := c.cc.Invoke(ctx, "/GameServers/GetServerIPsBySteamID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServersClient) QueryByFakeIP(ctx context.Context, in *CGameServers_QueryByFakeIP_Request, opts ...grpc.CallOption) (*CGameServers_GameServerQuery_Response, error) {
	out := new(CGameServers_GameServerQuery_Response)
	err := c.cc.Invoke(ctx, "/GameServers/QueryByFakeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServersServer is the server API for GameServers service.
// All implementations must embed UnimplementedGameServersServer
// for forward compatibility
type GameServersServer interface {
	GetServerList(context.Context, *CGameServers_GetServerList_Request) (*CGameServers_GetServerList_Response, error)
	GetServerSteamIDsByIP(context.Context, *CGameServers_GetServerSteamIDsByIP_Request) (*CGameServers_IPsWithSteamIDs_Response, error)
	GetServerIPsBySteamID(context.Context, *CGameServers_GetServerIPsBySteamID_Request) (*CGameServers_IPsWithSteamIDs_Response, error)
	QueryByFakeIP(context.Context, *CGameServers_QueryByFakeIP_Request) (*CGameServers_GameServerQuery_Response, error)
	mustEmbedUnimplementedGameServersServer()
}

// UnimplementedGameServersServer must be embedded to have forward compatible implementations.
type UnimplementedGameServersServer struct {
}

func (UnimplementedGameServersServer) GetServerList(context.Context, *CGameServers_GetServerList_Request) (*CGameServers_GetServerList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerList not implemented")
}
func (UnimplementedGameServersServer) GetServerSteamIDsByIP(context.Context, *CGameServers_GetServerSteamIDsByIP_Request) (*CGameServers_IPsWithSteamIDs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerSteamIDsByIP not implemented")
}
func (UnimplementedGameServersServer) GetServerIPsBySteamID(context.Context, *CGameServers_GetServerIPsBySteamID_Request) (*CGameServers_IPsWithSteamIDs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerIPsBySteamID not implemented")
}
func (UnimplementedGameServersServer) QueryByFakeIP(context.Context, *CGameServers_QueryByFakeIP_Request) (*CGameServers_GameServerQuery_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByFakeIP not implemented")
}
func (UnimplementedGameServersServer) mustEmbedUnimplementedGameServersServer() {}

// UnsafeGameServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServersServer will
// result in compilation errors.
type UnsafeGameServersServer interface {
	mustEmbedUnimplementedGameServersServer()
}

func RegisterGameServersServer(s grpc.ServiceRegistrar, srv GameServersServer) {
	s.RegisterService(&GameServers_ServiceDesc, srv)
}

func _GameServers_GetServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameServers_GetServerList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServer).GetServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServers/GetServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServer).GetServerList(ctx, req.(*CGameServers_GetServerList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServers_GetServerSteamIDsByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameServers_GetServerSteamIDsByIP_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServer).GetServerSteamIDsByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServers/GetServerSteamIDsByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServer).GetServerSteamIDsByIP(ctx, req.(*CGameServers_GetServerSteamIDsByIP_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServers_GetServerIPsBySteamID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameServers_GetServerIPsBySteamID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServer).GetServerIPsBySteamID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServers/GetServerIPsBySteamID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServer).GetServerIPsBySteamID(ctx, req.(*CGameServers_GetServerIPsBySteamID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServers_QueryByFakeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameServers_QueryByFakeIP_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServer).QueryByFakeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServers/QueryByFakeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServer).QueryByFakeIP(ctx, req.(*CGameServers_QueryByFakeIP_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServers_ServiceDesc is the grpc.ServiceDesc for GameServers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameServers",
	HandlerType: (*GameServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerList",
			Handler:    _GameServers_GetServerList_Handler,
		},
		{
			MethodName: "GetServerSteamIDsByIP",
			Handler:    _GameServers_GetServerSteamIDsByIP_Handler,
		},
		{
			MethodName: "GetServerIPsBySteamID",
			Handler:    _GameServers_GetServerIPsBySteamID_Handler,
		},
		{
			MethodName: "QueryByFakeIP",
			Handler:    _GameServers_QueryByFakeIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_gameservers.steamclient.proto",
}

// GameServerClientClient is the client API for GameServerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerClientClient interface {
	QueryServerData(ctx context.Context, in *GameServerClient_QueryServerData_Request, opts ...grpc.CallOption) (*GameServerClient_QueryServerData_Response, error)
}

type gameServerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerClientClient(cc grpc.ClientConnInterface) GameServerClientClient {
	return &gameServerClientClient{cc}
}

func (c *gameServerClientClient) QueryServerData(ctx context.Context, in *GameServerClient_QueryServerData_Request, opts ...grpc.CallOption) (*GameServerClient_QueryServerData_Response, error) {
	out := new(GameServerClient_QueryServerData_Response)
	err := c.cc.Invoke(ctx, "/GameServerClient/QueryServerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerClientServer is the server API for GameServerClient service.
// All implementations must embed UnimplementedGameServerClientServer
// for forward compatibility
type GameServerClientServer interface {
	QueryServerData(context.Context, *GameServerClient_QueryServerData_Request) (*GameServerClient_QueryServerData_Response, error)
	mustEmbedUnimplementedGameServerClientServer()
}

// UnimplementedGameServerClientServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerClientServer struct {
}

func (UnimplementedGameServerClientServer) QueryServerData(context.Context, *GameServerClient_QueryServerData_Request) (*GameServerClient_QueryServerData_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServerData not implemented")
}
func (UnimplementedGameServerClientServer) mustEmbedUnimplementedGameServerClientServer() {}

// UnsafeGameServerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerClientServer will
// result in compilation errors.
type UnsafeGameServerClientServer interface {
	mustEmbedUnimplementedGameServerClientServer()
}

func RegisterGameServerClientServer(s grpc.ServiceRegistrar, srv GameServerClientServer) {
	s.RegisterService(&GameServerClient_ServiceDesc, srv)
}

func _GameServerClient_QueryServerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameServerClient_QueryServerData_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClientServer).QueryServerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServerClient/QueryServerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClientServer).QueryServerData(ctx, req.(*GameServerClient_QueryServerData_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerClient_ServiceDesc is the grpc.ServiceDesc for GameServerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameServerClient",
	HandlerType: (*GameServerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryServerData",
			Handler:    _GameServerClient_QueryServerData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_gameservers.steamclient.proto",
}
