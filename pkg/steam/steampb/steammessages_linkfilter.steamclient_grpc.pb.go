// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_linkfilter.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityLinkFilterClient is the client API for CommunityLinkFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityLinkFilterClient interface {
	GetLinkFilterHashPrefixes(ctx context.Context, in *CCommunity_GetLinkFilterHashPrefixes_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterHashPrefixes_Response, error)
	GetLinkFilterHashes(ctx context.Context, in *CCommunity_GetLinkFilterHashes_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterHashes_Response, error)
	GetLinkFilterListVersion(ctx context.Context, in *CCommunity_GetLinkFilterListVersion_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterListVersion_Response, error)
}

type communityLinkFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityLinkFilterClient(cc grpc.ClientConnInterface) CommunityLinkFilterClient {
	return &communityLinkFilterClient{cc}
}

func (c *communityLinkFilterClient) GetLinkFilterHashPrefixes(ctx context.Context, in *CCommunity_GetLinkFilterHashPrefixes_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterHashPrefixes_Response, error) {
	out := new(CCommunity_GetLinkFilterHashPrefixes_Response)
	err := c.cc.Invoke(ctx, "/CommunityLinkFilter/GetLinkFilterHashPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityLinkFilterClient) GetLinkFilterHashes(ctx context.Context, in *CCommunity_GetLinkFilterHashes_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterHashes_Response, error) {
	out := new(CCommunity_GetLinkFilterHashes_Response)
	err := c.cc.Invoke(ctx, "/CommunityLinkFilter/GetLinkFilterHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityLinkFilterClient) GetLinkFilterListVersion(ctx context.Context, in *CCommunity_GetLinkFilterListVersion_Request, opts ...grpc.CallOption) (*CCommunity_GetLinkFilterListVersion_Response, error) {
	out := new(CCommunity_GetLinkFilterListVersion_Response)
	err := c.cc.Invoke(ctx, "/CommunityLinkFilter/GetLinkFilterListVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityLinkFilterServer is the server API for CommunityLinkFilter service.
// All implementations must embed UnimplementedCommunityLinkFilterServer
// for forward compatibility
type CommunityLinkFilterServer interface {
	GetLinkFilterHashPrefixes(context.Context, *CCommunity_GetLinkFilterHashPrefixes_Request) (*CCommunity_GetLinkFilterHashPrefixes_Response, error)
	GetLinkFilterHashes(context.Context, *CCommunity_GetLinkFilterHashes_Request) (*CCommunity_GetLinkFilterHashes_Response, error)
	GetLinkFilterListVersion(context.Context, *CCommunity_GetLinkFilterListVersion_Request) (*CCommunity_GetLinkFilterListVersion_Response, error)
	mustEmbedUnimplementedCommunityLinkFilterServer()
}

// UnimplementedCommunityLinkFilterServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityLinkFilterServer struct {
}

func (UnimplementedCommunityLinkFilterServer) GetLinkFilterHashPrefixes(context.Context, *CCommunity_GetLinkFilterHashPrefixes_Request) (*CCommunity_GetLinkFilterHashPrefixes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkFilterHashPrefixes not implemented")
}
func (UnimplementedCommunityLinkFilterServer) GetLinkFilterHashes(context.Context, *CCommunity_GetLinkFilterHashes_Request) (*CCommunity_GetLinkFilterHashes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkFilterHashes not implemented")
}
func (UnimplementedCommunityLinkFilterServer) GetLinkFilterListVersion(context.Context, *CCommunity_GetLinkFilterListVersion_Request) (*CCommunity_GetLinkFilterListVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkFilterListVersion not implemented")
}
func (UnimplementedCommunityLinkFilterServer) mustEmbedUnimplementedCommunityLinkFilterServer() {}

// UnsafeCommunityLinkFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityLinkFilterServer will
// result in compilation errors.
type UnsafeCommunityLinkFilterServer interface {
	mustEmbedUnimplementedCommunityLinkFilterServer()
}

func RegisterCommunityLinkFilterServer(s grpc.ServiceRegistrar, srv CommunityLinkFilterServer) {
	s.RegisterService(&CommunityLinkFilter_ServiceDesc, srv)
}

func _CommunityLinkFilter_GetLinkFilterHashPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetLinkFilterHashPrefixes_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityLinkFilterServer).GetLinkFilterHashPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommunityLinkFilter/GetLinkFilterHashPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityLinkFilterServer).GetLinkFilterHashPrefixes(ctx, req.(*CCommunity_GetLinkFilterHashPrefixes_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityLinkFilter_GetLinkFilterHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetLinkFilterHashes_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityLinkFilterServer).GetLinkFilterHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommunityLinkFilter/GetLinkFilterHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityLinkFilterServer).GetLinkFilterHashes(ctx, req.(*CCommunity_GetLinkFilterHashes_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityLinkFilter_GetLinkFilterListVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCommunity_GetLinkFilterListVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityLinkFilterServer).GetLinkFilterListVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommunityLinkFilter/GetLinkFilterListVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityLinkFilterServer).GetLinkFilterListVersion(ctx, req.(*CCommunity_GetLinkFilterListVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityLinkFilter_ServiceDesc is the grpc.ServiceDesc for CommunityLinkFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityLinkFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommunityLinkFilter",
	HandlerType: (*CommunityLinkFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinkFilterHashPrefixes",
			Handler:    _CommunityLinkFilter_GetLinkFilterHashPrefixes_Handler,
		},
		{
			MethodName: "GetLinkFilterHashes",
			Handler:    _CommunityLinkFilter_GetLinkFilterHashes_Handler,
		},
		{
			MethodName: "GetLinkFilterListVersion",
			Handler:    _CommunityLinkFilter_GetLinkFilterListVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_linkfilter.steamclient.proto",
}
