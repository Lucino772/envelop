// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_market.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EconMarketClient is the client API for EconMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EconMarketClient interface {
	IsMarketplaceAllowed(ctx context.Context, in *CEconMarket_IsMarketplaceAllowed_Request, opts ...grpc.CallOption) (*CEconMarket_IsMarketplaceAllowed_Response, error)
}

type econMarketClient struct {
	cc grpc.ClientConnInterface
}

func NewEconMarketClient(cc grpc.ClientConnInterface) EconMarketClient {
	return &econMarketClient{cc}
}

func (c *econMarketClient) IsMarketplaceAllowed(ctx context.Context, in *CEconMarket_IsMarketplaceAllowed_Request, opts ...grpc.CallOption) (*CEconMarket_IsMarketplaceAllowed_Response, error) {
	out := new(CEconMarket_IsMarketplaceAllowed_Response)
	err := c.cc.Invoke(ctx, "/EconMarket/IsMarketplaceAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EconMarketServer is the server API for EconMarket service.
// All implementations must embed UnimplementedEconMarketServer
// for forward compatibility
type EconMarketServer interface {
	IsMarketplaceAllowed(context.Context, *CEconMarket_IsMarketplaceAllowed_Request) (*CEconMarket_IsMarketplaceAllowed_Response, error)
	mustEmbedUnimplementedEconMarketServer()
}

// UnimplementedEconMarketServer must be embedded to have forward compatible implementations.
type UnimplementedEconMarketServer struct {
}

func (UnimplementedEconMarketServer) IsMarketplaceAllowed(context.Context, *CEconMarket_IsMarketplaceAllowed_Request) (*CEconMarket_IsMarketplaceAllowed_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMarketplaceAllowed not implemented")
}
func (UnimplementedEconMarketServer) mustEmbedUnimplementedEconMarketServer() {}

// UnsafeEconMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EconMarketServer will
// result in compilation errors.
type UnsafeEconMarketServer interface {
	mustEmbedUnimplementedEconMarketServer()
}

func RegisterEconMarketServer(s grpc.ServiceRegistrar, srv EconMarketServer) {
	s.RegisterService(&EconMarket_ServiceDesc, srv)
}

func _EconMarket_IsMarketplaceAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CEconMarket_IsMarketplaceAllowed_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconMarketServer).IsMarketplaceAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EconMarket/IsMarketplaceAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconMarketServer).IsMarketplaceAllowed(ctx, req.(*CEconMarket_IsMarketplaceAllowed_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// EconMarket_ServiceDesc is the grpc.ServiceDesc for EconMarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EconMarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EconMarket",
	HandlerType: (*EconMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsMarketplaceAllowed",
			Handler:    _EconMarket_IsMarketplaceAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_market.steamclient.proto",
}
