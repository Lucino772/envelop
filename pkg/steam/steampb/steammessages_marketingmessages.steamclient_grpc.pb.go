// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_marketingmessages.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingMessagesClient is the client API for MarketingMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingMessagesClient interface {
	GetActiveMarketingMessages(ctx context.Context, in *CMarketingMessages_GetActiveMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetActiveMarketingMessages_Response, error)
	GetMarketingMessagesForUser(ctx context.Context, in *CMarketingMessages_GetMarketingMessagesForUser_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessagesForUser_Response, error)
	DoesUserHavePendingMarketingMessages(ctx context.Context, in *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, error)
	GetDisplayMarketingMessage(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	GetDisplayMarketingMessageForUser(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	GetDisplayMarketingMessageAdmin(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	MarkMessageSeen(ctx context.Context, in *CMarketingMessages_MarkMessageSeen_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetMarketingMessage(ctx context.Context, in *CMarketingMessages_GetMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessage_Response, error)
	CreateMarketingMessage(ctx context.Context, in *CMarketingMessages_CreateMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_CreateMarketingMessage_Response, error)
	UpdateMarketingMessage(ctx context.Context, in *CMarketingMessages_UpdateMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_UpdateMarketingMessage_Response, error)
	DeleteMarketingMessage(ctx context.Context, in *CMarketingMessages_DeleteMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_DeleteMarketingMessage_Response, error)
	FindMarketingMessages(ctx context.Context, in *CMarketingMessages_FindMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_FindMarketingMessages_Response, error)
	GetMarketingMessageViewerStats(ctx context.Context, in *CMarketingMessages_GetMarketingMessageViewerStats_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessageViewerStats_Response, error)
	GetMarketingMessagesViewerRangeStats(ctx context.Context, in *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, error)
	GetPartnerReadyToPublishMessages(ctx context.Context, in *CMarketingMessages_GetPartnerReadyToPublishMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response, error)
	PublishPartnerMessage(ctx context.Context, in *CMarketingMessages_PartnerPublishMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_PartnerPublishMessage_Response, error)
	GetPartnerMessagePreview(ctx context.Context, in *CMarketingMessages_GetPartnerMessagePreview_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetPartnerMessagePreview_Response, error)
	GetMarketingMessagesForApps(ctx context.Context, in *CMarketingMessage_GetMarketingMessagesForApps_Request, opts ...grpc.CallOption) (*CMarketingMessage_GetMarketingMessagesForApps_Response, error)
}

type marketingMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingMessagesClient(cc grpc.ClientConnInterface) MarketingMessagesClient {
	return &marketingMessagesClient{cc}
}

func (c *marketingMessagesClient) GetActiveMarketingMessages(ctx context.Context, in *CMarketingMessages_GetActiveMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetActiveMarketingMessages_Response, error) {
	out := new(CMarketingMessages_GetActiveMarketingMessages_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetActiveMarketingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetMarketingMessagesForUser(ctx context.Context, in *CMarketingMessages_GetMarketingMessagesForUser_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessagesForUser_Response, error) {
	out := new(CMarketingMessages_GetMarketingMessagesForUser_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetMarketingMessagesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) DoesUserHavePendingMarketingMessages(ctx context.Context, in *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, error) {
	out := new(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/DoesUserHavePendingMarketingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetDisplayMarketingMessage(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	out := new(CMarketingMessages_GetDisplayMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetDisplayMarketingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetDisplayMarketingMessageForUser(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	out := new(CMarketingMessages_GetDisplayMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetDisplayMarketingMessageForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetDisplayMarketingMessageAdmin(ctx context.Context, in *CMarketingMessages_GetDisplayMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	out := new(CMarketingMessages_GetDisplayMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetDisplayMarketingMessageAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) MarkMessageSeen(ctx context.Context, in *CMarketingMessages_MarkMessageSeen_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/MarketingMessages/MarkMessageSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetMarketingMessage(ctx context.Context, in *CMarketingMessages_GetMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessage_Response, error) {
	out := new(CMarketingMessages_GetMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetMarketingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) CreateMarketingMessage(ctx context.Context, in *CMarketingMessages_CreateMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_CreateMarketingMessage_Response, error) {
	out := new(CMarketingMessages_CreateMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/CreateMarketingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) UpdateMarketingMessage(ctx context.Context, in *CMarketingMessages_UpdateMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_UpdateMarketingMessage_Response, error) {
	out := new(CMarketingMessages_UpdateMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/UpdateMarketingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) DeleteMarketingMessage(ctx context.Context, in *CMarketingMessages_DeleteMarketingMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_DeleteMarketingMessage_Response, error) {
	out := new(CMarketingMessages_DeleteMarketingMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/DeleteMarketingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) FindMarketingMessages(ctx context.Context, in *CMarketingMessages_FindMarketingMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_FindMarketingMessages_Response, error) {
	out := new(CMarketingMessages_FindMarketingMessages_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/FindMarketingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetMarketingMessageViewerStats(ctx context.Context, in *CMarketingMessages_GetMarketingMessageViewerStats_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessageViewerStats_Response, error) {
	out := new(CMarketingMessages_GetMarketingMessageViewerStats_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetMarketingMessageViewerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetMarketingMessagesViewerRangeStats(ctx context.Context, in *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, error) {
	out := new(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetMarketingMessagesViewerRangeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetPartnerReadyToPublishMessages(ctx context.Context, in *CMarketingMessages_GetPartnerReadyToPublishMessages_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response, error) {
	out := new(CMarketingMessages_GetPartnerReadyToPublishMessages_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetPartnerReadyToPublishMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) PublishPartnerMessage(ctx context.Context, in *CMarketingMessages_PartnerPublishMessage_Request, opts ...grpc.CallOption) (*CMarketingMessages_PartnerPublishMessage_Response, error) {
	out := new(CMarketingMessages_PartnerPublishMessage_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/PublishPartnerMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetPartnerMessagePreview(ctx context.Context, in *CMarketingMessages_GetPartnerMessagePreview_Request, opts ...grpc.CallOption) (*CMarketingMessages_GetPartnerMessagePreview_Response, error) {
	out := new(CMarketingMessages_GetPartnerMessagePreview_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetPartnerMessagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingMessagesClient) GetMarketingMessagesForApps(ctx context.Context, in *CMarketingMessage_GetMarketingMessagesForApps_Request, opts ...grpc.CallOption) (*CMarketingMessage_GetMarketingMessagesForApps_Response, error) {
	out := new(CMarketingMessage_GetMarketingMessagesForApps_Response)
	err := c.cc.Invoke(ctx, "/MarketingMessages/GetMarketingMessagesForApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingMessagesServer is the server API for MarketingMessages service.
// All implementations must embed UnimplementedMarketingMessagesServer
// for forward compatibility
type MarketingMessagesServer interface {
	GetActiveMarketingMessages(context.Context, *CMarketingMessages_GetActiveMarketingMessages_Request) (*CMarketingMessages_GetActiveMarketingMessages_Response, error)
	GetMarketingMessagesForUser(context.Context, *CMarketingMessages_GetMarketingMessagesForUser_Request) (*CMarketingMessages_GetMarketingMessagesForUser_Response, error)
	DoesUserHavePendingMarketingMessages(context.Context, *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, error)
	GetDisplayMarketingMessage(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	GetDisplayMarketingMessageForUser(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	GetDisplayMarketingMessageAdmin(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error)
	MarkMessageSeen(context.Context, *CMarketingMessages_MarkMessageSeen_Notification) (*NoResponse, error)
	GetMarketingMessage(context.Context, *CMarketingMessages_GetMarketingMessage_Request) (*CMarketingMessages_GetMarketingMessage_Response, error)
	CreateMarketingMessage(context.Context, *CMarketingMessages_CreateMarketingMessage_Request) (*CMarketingMessages_CreateMarketingMessage_Response, error)
	UpdateMarketingMessage(context.Context, *CMarketingMessages_UpdateMarketingMessage_Request) (*CMarketingMessages_UpdateMarketingMessage_Response, error)
	DeleteMarketingMessage(context.Context, *CMarketingMessages_DeleteMarketingMessage_Request) (*CMarketingMessages_DeleteMarketingMessage_Response, error)
	FindMarketingMessages(context.Context, *CMarketingMessages_FindMarketingMessages_Request) (*CMarketingMessages_FindMarketingMessages_Response, error)
	GetMarketingMessageViewerStats(context.Context, *CMarketingMessages_GetMarketingMessageViewerStats_Request) (*CMarketingMessages_GetMarketingMessageViewerStats_Response, error)
	GetMarketingMessagesViewerRangeStats(context.Context, *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, error)
	GetPartnerReadyToPublishMessages(context.Context, *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response, error)
	PublishPartnerMessage(context.Context, *CMarketingMessages_PartnerPublishMessage_Request) (*CMarketingMessages_PartnerPublishMessage_Response, error)
	GetPartnerMessagePreview(context.Context, *CMarketingMessages_GetPartnerMessagePreview_Request) (*CMarketingMessages_GetPartnerMessagePreview_Response, error)
	GetMarketingMessagesForApps(context.Context, *CMarketingMessage_GetMarketingMessagesForApps_Request) (*CMarketingMessage_GetMarketingMessagesForApps_Response, error)
	mustEmbedUnimplementedMarketingMessagesServer()
}

// UnimplementedMarketingMessagesServer must be embedded to have forward compatible implementations.
type UnimplementedMarketingMessagesServer struct {
}

func (UnimplementedMarketingMessagesServer) GetActiveMarketingMessages(context.Context, *CMarketingMessages_GetActiveMarketingMessages_Request) (*CMarketingMessages_GetActiveMarketingMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveMarketingMessages not implemented")
}
func (UnimplementedMarketingMessagesServer) GetMarketingMessagesForUser(context.Context, *CMarketingMessages_GetMarketingMessagesForUser_Request) (*CMarketingMessages_GetMarketingMessagesForUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingMessagesForUser not implemented")
}
func (UnimplementedMarketingMessagesServer) DoesUserHavePendingMarketingMessages(context.Context, *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesUserHavePendingMarketingMessages not implemented")
}
func (UnimplementedMarketingMessagesServer) GetDisplayMarketingMessage(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayMarketingMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) GetDisplayMarketingMessageForUser(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayMarketingMessageForUser not implemented")
}
func (UnimplementedMarketingMessagesServer) GetDisplayMarketingMessageAdmin(context.Context, *CMarketingMessages_GetDisplayMarketingMessage_Request) (*CMarketingMessages_GetDisplayMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayMarketingMessageAdmin not implemented")
}
func (UnimplementedMarketingMessagesServer) MarkMessageSeen(context.Context, *CMarketingMessages_MarkMessageSeen_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessageSeen not implemented")
}
func (UnimplementedMarketingMessagesServer) GetMarketingMessage(context.Context, *CMarketingMessages_GetMarketingMessage_Request) (*CMarketingMessages_GetMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) CreateMarketingMessage(context.Context, *CMarketingMessages_CreateMarketingMessage_Request) (*CMarketingMessages_CreateMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarketingMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) UpdateMarketingMessage(context.Context, *CMarketingMessages_UpdateMarketingMessage_Request) (*CMarketingMessages_UpdateMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketingMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) DeleteMarketingMessage(context.Context, *CMarketingMessages_DeleteMarketingMessage_Request) (*CMarketingMessages_DeleteMarketingMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarketingMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) FindMarketingMessages(context.Context, *CMarketingMessages_FindMarketingMessages_Request) (*CMarketingMessages_FindMarketingMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarketingMessages not implemented")
}
func (UnimplementedMarketingMessagesServer) GetMarketingMessageViewerStats(context.Context, *CMarketingMessages_GetMarketingMessageViewerStats_Request) (*CMarketingMessages_GetMarketingMessageViewerStats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingMessageViewerStats not implemented")
}
func (UnimplementedMarketingMessagesServer) GetMarketingMessagesViewerRangeStats(context.Context, *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingMessagesViewerRangeStats not implemented")
}
func (UnimplementedMarketingMessagesServer) GetPartnerReadyToPublishMessages(context.Context, *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerReadyToPublishMessages not implemented")
}
func (UnimplementedMarketingMessagesServer) PublishPartnerMessage(context.Context, *CMarketingMessages_PartnerPublishMessage_Request) (*CMarketingMessages_PartnerPublishMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPartnerMessage not implemented")
}
func (UnimplementedMarketingMessagesServer) GetPartnerMessagePreview(context.Context, *CMarketingMessages_GetPartnerMessagePreview_Request) (*CMarketingMessages_GetPartnerMessagePreview_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerMessagePreview not implemented")
}
func (UnimplementedMarketingMessagesServer) GetMarketingMessagesForApps(context.Context, *CMarketingMessage_GetMarketingMessagesForApps_Request) (*CMarketingMessage_GetMarketingMessagesForApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingMessagesForApps not implemented")
}
func (UnimplementedMarketingMessagesServer) mustEmbedUnimplementedMarketingMessagesServer() {}

// UnsafeMarketingMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingMessagesServer will
// result in compilation errors.
type UnsafeMarketingMessagesServer interface {
	mustEmbedUnimplementedMarketingMessagesServer()
}

func RegisterMarketingMessagesServer(s grpc.ServiceRegistrar, srv MarketingMessagesServer) {
	s.RegisterService(&MarketingMessages_ServiceDesc, srv)
}

func _MarketingMessages_GetActiveMarketingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetActiveMarketingMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetActiveMarketingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetActiveMarketingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetActiveMarketingMessages(ctx, req.(*CMarketingMessages_GetActiveMarketingMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetMarketingMessagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetMarketingMessagesForUser_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetMarketingMessagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetMarketingMessagesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetMarketingMessagesForUser(ctx, req.(*CMarketingMessages_GetMarketingMessagesForUser_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_DoesUserHavePendingMarketingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).DoesUserHavePendingMarketingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/DoesUserHavePendingMarketingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).DoesUserHavePendingMarketingMessages(ctx, req.(*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetDisplayMarketingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetDisplayMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetDisplayMarketingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessage(ctx, req.(*CMarketingMessages_GetDisplayMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetDisplayMarketingMessageForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetDisplayMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessageForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetDisplayMarketingMessageForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessageForUser(ctx, req.(*CMarketingMessages_GetDisplayMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetDisplayMarketingMessageAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetDisplayMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessageAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetDisplayMarketingMessageAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetDisplayMarketingMessageAdmin(ctx, req.(*CMarketingMessages_GetDisplayMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_MarkMessageSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_MarkMessageSeen_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).MarkMessageSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/MarkMessageSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).MarkMessageSeen(ctx, req.(*CMarketingMessages_MarkMessageSeen_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetMarketingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetMarketingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetMarketingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetMarketingMessage(ctx, req.(*CMarketingMessages_GetMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_CreateMarketingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_CreateMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).CreateMarketingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/CreateMarketingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).CreateMarketingMessage(ctx, req.(*CMarketingMessages_CreateMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_UpdateMarketingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_UpdateMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).UpdateMarketingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/UpdateMarketingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).UpdateMarketingMessage(ctx, req.(*CMarketingMessages_UpdateMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_DeleteMarketingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_DeleteMarketingMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).DeleteMarketingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/DeleteMarketingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).DeleteMarketingMessage(ctx, req.(*CMarketingMessages_DeleteMarketingMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_FindMarketingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_FindMarketingMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).FindMarketingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/FindMarketingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).FindMarketingMessages(ctx, req.(*CMarketingMessages_FindMarketingMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetMarketingMessageViewerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetMarketingMessageViewerStats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetMarketingMessageViewerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetMarketingMessageViewerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetMarketingMessageViewerStats(ctx, req.(*CMarketingMessages_GetMarketingMessageViewerStats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetMarketingMessagesViewerRangeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetMarketingMessagesViewerRangeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetMarketingMessagesViewerRangeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetMarketingMessagesViewerRangeStats(ctx, req.(*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetPartnerReadyToPublishMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetPartnerReadyToPublishMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetPartnerReadyToPublishMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetPartnerReadyToPublishMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetPartnerReadyToPublishMessages(ctx, req.(*CMarketingMessages_GetPartnerReadyToPublishMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_PublishPartnerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_PartnerPublishMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).PublishPartnerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/PublishPartnerMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).PublishPartnerMessage(ctx, req.(*CMarketingMessages_PartnerPublishMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetPartnerMessagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessages_GetPartnerMessagePreview_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetPartnerMessagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetPartnerMessagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetPartnerMessagePreview(ctx, req.(*CMarketingMessages_GetPartnerMessagePreview_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingMessages_GetMarketingMessagesForApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMarketingMessage_GetMarketingMessagesForApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingMessagesServer).GetMarketingMessagesForApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingMessages/GetMarketingMessagesForApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingMessagesServer).GetMarketingMessagesForApps(ctx, req.(*CMarketingMessage_GetMarketingMessagesForApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketingMessages_ServiceDesc is the grpc.ServiceDesc for MarketingMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketingMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MarketingMessages",
	HandlerType: (*MarketingMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveMarketingMessages",
			Handler:    _MarketingMessages_GetActiveMarketingMessages_Handler,
		},
		{
			MethodName: "GetMarketingMessagesForUser",
			Handler:    _MarketingMessages_GetMarketingMessagesForUser_Handler,
		},
		{
			MethodName: "DoesUserHavePendingMarketingMessages",
			Handler:    _MarketingMessages_DoesUserHavePendingMarketingMessages_Handler,
		},
		{
			MethodName: "GetDisplayMarketingMessage",
			Handler:    _MarketingMessages_GetDisplayMarketingMessage_Handler,
		},
		{
			MethodName: "GetDisplayMarketingMessageForUser",
			Handler:    _MarketingMessages_GetDisplayMarketingMessageForUser_Handler,
		},
		{
			MethodName: "GetDisplayMarketingMessageAdmin",
			Handler:    _MarketingMessages_GetDisplayMarketingMessageAdmin_Handler,
		},
		{
			MethodName: "MarkMessageSeen",
			Handler:    _MarketingMessages_MarkMessageSeen_Handler,
		},
		{
			MethodName: "GetMarketingMessage",
			Handler:    _MarketingMessages_GetMarketingMessage_Handler,
		},
		{
			MethodName: "CreateMarketingMessage",
			Handler:    _MarketingMessages_CreateMarketingMessage_Handler,
		},
		{
			MethodName: "UpdateMarketingMessage",
			Handler:    _MarketingMessages_UpdateMarketingMessage_Handler,
		},
		{
			MethodName: "DeleteMarketingMessage",
			Handler:    _MarketingMessages_DeleteMarketingMessage_Handler,
		},
		{
			MethodName: "FindMarketingMessages",
			Handler:    _MarketingMessages_FindMarketingMessages_Handler,
		},
		{
			MethodName: "GetMarketingMessageViewerStats",
			Handler:    _MarketingMessages_GetMarketingMessageViewerStats_Handler,
		},
		{
			MethodName: "GetMarketingMessagesViewerRangeStats",
			Handler:    _MarketingMessages_GetMarketingMessagesViewerRangeStats_Handler,
		},
		{
			MethodName: "GetPartnerReadyToPublishMessages",
			Handler:    _MarketingMessages_GetPartnerReadyToPublishMessages_Handler,
		},
		{
			MethodName: "PublishPartnerMessage",
			Handler:    _MarketingMessages_PublishPartnerMessage_Handler,
		},
		{
			MethodName: "GetPartnerMessagePreview",
			Handler:    _MarketingMessages_GetPartnerMessagePreview_Handler,
		},
		{
			MethodName: "GetMarketingMessagesForApps",
			Handler:    _MarketingMessages_GetMarketingMessagesForApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_marketingmessages.steamclient.proto",
}
