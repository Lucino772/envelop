// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_parental.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParentalClient is the client API for Parental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParentalClient interface {
	EnableParentalSettings(ctx context.Context, in *CParental_EnableParentalSettings_Request, opts ...grpc.CallOption) (*CParental_EnableParentalSettings_Response, error)
	DisableParentalSettings(ctx context.Context, in *CParental_DisableParentalSettings_Request, opts ...grpc.CallOption) (*CParental_DisableParentalSettings_Response, error)
	GetParentalSettings(ctx context.Context, in *CParental_GetParentalSettings_Request, opts ...grpc.CallOption) (*CParental_GetParentalSettings_Response, error)
	GetSignedParentalSettings(ctx context.Context, in *CParental_GetSignedParentalSettings_Request, opts ...grpc.CallOption) (*CParental_GetSignedParentalSettings_Response, error)
	SetParentalSettings(ctx context.Context, in *CParental_SetParentalSettings_Request, opts ...grpc.CallOption) (*CParental_SetParentalSettings_Response, error)
	ValidateToken(ctx context.Context, in *CParental_ValidateToken_Request, opts ...grpc.CallOption) (*CParental_ValidateToken_Response, error)
	ValidatePassword(ctx context.Context, in *CParental_ValidatePassword_Request, opts ...grpc.CallOption) (*CParental_ValidatePassword_Response, error)
	LockClient(ctx context.Context, in *CParental_LockClient_Request, opts ...grpc.CallOption) (*CParental_LockClient_Response, error)
	RequestRecoveryCode(ctx context.Context, in *CParental_RequestRecoveryCode_Request, opts ...grpc.CallOption) (*CParental_RequestRecoveryCode_Response, error)
	DisableWithRecoveryCode(ctx context.Context, in *CParental_DisableWithRecoveryCode_Request, opts ...grpc.CallOption) (*CParental_DisableWithRecoveryCode_Response, error)
	RequestFeatureAccess(ctx context.Context, in *CParental_RequestFeatureAccess_Request, opts ...grpc.CallOption) (*CParental_RequestFeatureAccess_Response, error)
	ApproveFeatureAccess(ctx context.Context, in *CParental_ApproveFeatureAccess_Request, opts ...grpc.CallOption) (*CParental_ApproveFeatureAccess_Response, error)
	RequestPlaytime(ctx context.Context, in *CParental_RequestPlaytime_Request, opts ...grpc.CallOption) (*CParental_RequestPlaytime_Response, error)
	ApprovePlaytime(ctx context.Context, in *CParental_ApprovePlaytime_Request, opts ...grpc.CallOption) (*CParental_ApprovePlaytime_Response, error)
	GetRequests(ctx context.Context, in *CParental_GetRequests_Request, opts ...grpc.CallOption) (*CParental_GetRequests_Response, error)
	ReportPlaytimeAndNotify(ctx context.Context, in *CParental_ReportPlaytimeAndNotify_Request, opts ...grpc.CallOption) (*CParental_ReportPlaytimeAndNotify_Response, error)
}

type parentalClient struct {
	cc grpc.ClientConnInterface
}

func NewParentalClient(cc grpc.ClientConnInterface) ParentalClient {
	return &parentalClient{cc}
}

func (c *parentalClient) EnableParentalSettings(ctx context.Context, in *CParental_EnableParentalSettings_Request, opts ...grpc.CallOption) (*CParental_EnableParentalSettings_Response, error) {
	out := new(CParental_EnableParentalSettings_Response)
	err := c.cc.Invoke(ctx, "/Parental/EnableParentalSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) DisableParentalSettings(ctx context.Context, in *CParental_DisableParentalSettings_Request, opts ...grpc.CallOption) (*CParental_DisableParentalSettings_Response, error) {
	out := new(CParental_DisableParentalSettings_Response)
	err := c.cc.Invoke(ctx, "/Parental/DisableParentalSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) GetParentalSettings(ctx context.Context, in *CParental_GetParentalSettings_Request, opts ...grpc.CallOption) (*CParental_GetParentalSettings_Response, error) {
	out := new(CParental_GetParentalSettings_Response)
	err := c.cc.Invoke(ctx, "/Parental/GetParentalSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) GetSignedParentalSettings(ctx context.Context, in *CParental_GetSignedParentalSettings_Request, opts ...grpc.CallOption) (*CParental_GetSignedParentalSettings_Response, error) {
	out := new(CParental_GetSignedParentalSettings_Response)
	err := c.cc.Invoke(ctx, "/Parental/GetSignedParentalSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) SetParentalSettings(ctx context.Context, in *CParental_SetParentalSettings_Request, opts ...grpc.CallOption) (*CParental_SetParentalSettings_Response, error) {
	out := new(CParental_SetParentalSettings_Response)
	err := c.cc.Invoke(ctx, "/Parental/SetParentalSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) ValidateToken(ctx context.Context, in *CParental_ValidateToken_Request, opts ...grpc.CallOption) (*CParental_ValidateToken_Response, error) {
	out := new(CParental_ValidateToken_Response)
	err := c.cc.Invoke(ctx, "/Parental/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) ValidatePassword(ctx context.Context, in *CParental_ValidatePassword_Request, opts ...grpc.CallOption) (*CParental_ValidatePassword_Response, error) {
	out := new(CParental_ValidatePassword_Response)
	err := c.cc.Invoke(ctx, "/Parental/ValidatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) LockClient(ctx context.Context, in *CParental_LockClient_Request, opts ...grpc.CallOption) (*CParental_LockClient_Response, error) {
	out := new(CParental_LockClient_Response)
	err := c.cc.Invoke(ctx, "/Parental/LockClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) RequestRecoveryCode(ctx context.Context, in *CParental_RequestRecoveryCode_Request, opts ...grpc.CallOption) (*CParental_RequestRecoveryCode_Response, error) {
	out := new(CParental_RequestRecoveryCode_Response)
	err := c.cc.Invoke(ctx, "/Parental/RequestRecoveryCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) DisableWithRecoveryCode(ctx context.Context, in *CParental_DisableWithRecoveryCode_Request, opts ...grpc.CallOption) (*CParental_DisableWithRecoveryCode_Response, error) {
	out := new(CParental_DisableWithRecoveryCode_Response)
	err := c.cc.Invoke(ctx, "/Parental/DisableWithRecoveryCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) RequestFeatureAccess(ctx context.Context, in *CParental_RequestFeatureAccess_Request, opts ...grpc.CallOption) (*CParental_RequestFeatureAccess_Response, error) {
	out := new(CParental_RequestFeatureAccess_Response)
	err := c.cc.Invoke(ctx, "/Parental/RequestFeatureAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) ApproveFeatureAccess(ctx context.Context, in *CParental_ApproveFeatureAccess_Request, opts ...grpc.CallOption) (*CParental_ApproveFeatureAccess_Response, error) {
	out := new(CParental_ApproveFeatureAccess_Response)
	err := c.cc.Invoke(ctx, "/Parental/ApproveFeatureAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) RequestPlaytime(ctx context.Context, in *CParental_RequestPlaytime_Request, opts ...grpc.CallOption) (*CParental_RequestPlaytime_Response, error) {
	out := new(CParental_RequestPlaytime_Response)
	err := c.cc.Invoke(ctx, "/Parental/RequestPlaytime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) ApprovePlaytime(ctx context.Context, in *CParental_ApprovePlaytime_Request, opts ...grpc.CallOption) (*CParental_ApprovePlaytime_Response, error) {
	out := new(CParental_ApprovePlaytime_Response)
	err := c.cc.Invoke(ctx, "/Parental/ApprovePlaytime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) GetRequests(ctx context.Context, in *CParental_GetRequests_Request, opts ...grpc.CallOption) (*CParental_GetRequests_Response, error) {
	out := new(CParental_GetRequests_Response)
	err := c.cc.Invoke(ctx, "/Parental/GetRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClient) ReportPlaytimeAndNotify(ctx context.Context, in *CParental_ReportPlaytimeAndNotify_Request, opts ...grpc.CallOption) (*CParental_ReportPlaytimeAndNotify_Response, error) {
	out := new(CParental_ReportPlaytimeAndNotify_Response)
	err := c.cc.Invoke(ctx, "/Parental/ReportPlaytimeAndNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParentalServer is the server API for Parental service.
// All implementations must embed UnimplementedParentalServer
// for forward compatibility
type ParentalServer interface {
	EnableParentalSettings(context.Context, *CParental_EnableParentalSettings_Request) (*CParental_EnableParentalSettings_Response, error)
	DisableParentalSettings(context.Context, *CParental_DisableParentalSettings_Request) (*CParental_DisableParentalSettings_Response, error)
	GetParentalSettings(context.Context, *CParental_GetParentalSettings_Request) (*CParental_GetParentalSettings_Response, error)
	GetSignedParentalSettings(context.Context, *CParental_GetSignedParentalSettings_Request) (*CParental_GetSignedParentalSettings_Response, error)
	SetParentalSettings(context.Context, *CParental_SetParentalSettings_Request) (*CParental_SetParentalSettings_Response, error)
	ValidateToken(context.Context, *CParental_ValidateToken_Request) (*CParental_ValidateToken_Response, error)
	ValidatePassword(context.Context, *CParental_ValidatePassword_Request) (*CParental_ValidatePassword_Response, error)
	LockClient(context.Context, *CParental_LockClient_Request) (*CParental_LockClient_Response, error)
	RequestRecoveryCode(context.Context, *CParental_RequestRecoveryCode_Request) (*CParental_RequestRecoveryCode_Response, error)
	DisableWithRecoveryCode(context.Context, *CParental_DisableWithRecoveryCode_Request) (*CParental_DisableWithRecoveryCode_Response, error)
	RequestFeatureAccess(context.Context, *CParental_RequestFeatureAccess_Request) (*CParental_RequestFeatureAccess_Response, error)
	ApproveFeatureAccess(context.Context, *CParental_ApproveFeatureAccess_Request) (*CParental_ApproveFeatureAccess_Response, error)
	RequestPlaytime(context.Context, *CParental_RequestPlaytime_Request) (*CParental_RequestPlaytime_Response, error)
	ApprovePlaytime(context.Context, *CParental_ApprovePlaytime_Request) (*CParental_ApprovePlaytime_Response, error)
	GetRequests(context.Context, *CParental_GetRequests_Request) (*CParental_GetRequests_Response, error)
	ReportPlaytimeAndNotify(context.Context, *CParental_ReportPlaytimeAndNotify_Request) (*CParental_ReportPlaytimeAndNotify_Response, error)
	mustEmbedUnimplementedParentalServer()
}

// UnimplementedParentalServer must be embedded to have forward compatible implementations.
type UnimplementedParentalServer struct {
}

func (UnimplementedParentalServer) EnableParentalSettings(context.Context, *CParental_EnableParentalSettings_Request) (*CParental_EnableParentalSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableParentalSettings not implemented")
}
func (UnimplementedParentalServer) DisableParentalSettings(context.Context, *CParental_DisableParentalSettings_Request) (*CParental_DisableParentalSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableParentalSettings not implemented")
}
func (UnimplementedParentalServer) GetParentalSettings(context.Context, *CParental_GetParentalSettings_Request) (*CParental_GetParentalSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentalSettings not implemented")
}
func (UnimplementedParentalServer) GetSignedParentalSettings(context.Context, *CParental_GetSignedParentalSettings_Request) (*CParental_GetSignedParentalSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedParentalSettings not implemented")
}
func (UnimplementedParentalServer) SetParentalSettings(context.Context, *CParental_SetParentalSettings_Request) (*CParental_SetParentalSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParentalSettings not implemented")
}
func (UnimplementedParentalServer) ValidateToken(context.Context, *CParental_ValidateToken_Request) (*CParental_ValidateToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedParentalServer) ValidatePassword(context.Context, *CParental_ValidatePassword_Request) (*CParental_ValidatePassword_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePassword not implemented")
}
func (UnimplementedParentalServer) LockClient(context.Context, *CParental_LockClient_Request) (*CParental_LockClient_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockClient not implemented")
}
func (UnimplementedParentalServer) RequestRecoveryCode(context.Context, *CParental_RequestRecoveryCode_Request) (*CParental_RequestRecoveryCode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRecoveryCode not implemented")
}
func (UnimplementedParentalServer) DisableWithRecoveryCode(context.Context, *CParental_DisableWithRecoveryCode_Request) (*CParental_DisableWithRecoveryCode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWithRecoveryCode not implemented")
}
func (UnimplementedParentalServer) RequestFeatureAccess(context.Context, *CParental_RequestFeatureAccess_Request) (*CParental_RequestFeatureAccess_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFeatureAccess not implemented")
}
func (UnimplementedParentalServer) ApproveFeatureAccess(context.Context, *CParental_ApproveFeatureAccess_Request) (*CParental_ApproveFeatureAccess_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFeatureAccess not implemented")
}
func (UnimplementedParentalServer) RequestPlaytime(context.Context, *CParental_RequestPlaytime_Request) (*CParental_RequestPlaytime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPlaytime not implemented")
}
func (UnimplementedParentalServer) ApprovePlaytime(context.Context, *CParental_ApprovePlaytime_Request) (*CParental_ApprovePlaytime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePlaytime not implemented")
}
func (UnimplementedParentalServer) GetRequests(context.Context, *CParental_GetRequests_Request) (*CParental_GetRequests_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequests not implemented")
}
func (UnimplementedParentalServer) ReportPlaytimeAndNotify(context.Context, *CParental_ReportPlaytimeAndNotify_Request) (*CParental_ReportPlaytimeAndNotify_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPlaytimeAndNotify not implemented")
}
func (UnimplementedParentalServer) mustEmbedUnimplementedParentalServer() {}

// UnsafeParentalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParentalServer will
// result in compilation errors.
type UnsafeParentalServer interface {
	mustEmbedUnimplementedParentalServer()
}

func RegisterParentalServer(s grpc.ServiceRegistrar, srv ParentalServer) {
	s.RegisterService(&Parental_ServiceDesc, srv)
}

func _Parental_EnableParentalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_EnableParentalSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).EnableParentalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/EnableParentalSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).EnableParentalSettings(ctx, req.(*CParental_EnableParentalSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_DisableParentalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_DisableParentalSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).DisableParentalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/DisableParentalSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).DisableParentalSettings(ctx, req.(*CParental_DisableParentalSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_GetParentalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_GetParentalSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).GetParentalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/GetParentalSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).GetParentalSettings(ctx, req.(*CParental_GetParentalSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_GetSignedParentalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_GetSignedParentalSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).GetSignedParentalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/GetSignedParentalSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).GetSignedParentalSettings(ctx, req.(*CParental_GetSignedParentalSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_SetParentalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_SetParentalSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).SetParentalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/SetParentalSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).SetParentalSettings(ctx, req.(*CParental_SetParentalSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ValidateToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).ValidateToken(ctx, req.(*CParental_ValidateToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ValidatePassword_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/ValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).ValidatePassword(ctx, req.(*CParental_ValidatePassword_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_LockClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_LockClient_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).LockClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/LockClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).LockClient(ctx, req.(*CParental_LockClient_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_RequestRecoveryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_RequestRecoveryCode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).RequestRecoveryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/RequestRecoveryCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).RequestRecoveryCode(ctx, req.(*CParental_RequestRecoveryCode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_DisableWithRecoveryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_DisableWithRecoveryCode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).DisableWithRecoveryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/DisableWithRecoveryCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).DisableWithRecoveryCode(ctx, req.(*CParental_DisableWithRecoveryCode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_RequestFeatureAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_RequestFeatureAccess_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).RequestFeatureAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/RequestFeatureAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).RequestFeatureAccess(ctx, req.(*CParental_RequestFeatureAccess_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_ApproveFeatureAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ApproveFeatureAccess_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).ApproveFeatureAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/ApproveFeatureAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).ApproveFeatureAccess(ctx, req.(*CParental_ApproveFeatureAccess_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_RequestPlaytime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_RequestPlaytime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).RequestPlaytime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/RequestPlaytime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).RequestPlaytime(ctx, req.(*CParental_RequestPlaytime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_ApprovePlaytime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ApprovePlaytime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).ApprovePlaytime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/ApprovePlaytime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).ApprovePlaytime(ctx, req.(*CParental_ApprovePlaytime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_GetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_GetRequests_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).GetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/GetRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).GetRequests(ctx, req.(*CParental_GetRequests_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parental_ReportPlaytimeAndNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ReportPlaytimeAndNotify_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalServer).ReportPlaytimeAndNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parental/ReportPlaytimeAndNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalServer).ReportPlaytimeAndNotify(ctx, req.(*CParental_ReportPlaytimeAndNotify_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Parental_ServiceDesc is the grpc.ServiceDesc for Parental service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parental_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Parental",
	HandlerType: (*ParentalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableParentalSettings",
			Handler:    _Parental_EnableParentalSettings_Handler,
		},
		{
			MethodName: "DisableParentalSettings",
			Handler:    _Parental_DisableParentalSettings_Handler,
		},
		{
			MethodName: "GetParentalSettings",
			Handler:    _Parental_GetParentalSettings_Handler,
		},
		{
			MethodName: "GetSignedParentalSettings",
			Handler:    _Parental_GetSignedParentalSettings_Handler,
		},
		{
			MethodName: "SetParentalSettings",
			Handler:    _Parental_SetParentalSettings_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Parental_ValidateToken_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _Parental_ValidatePassword_Handler,
		},
		{
			MethodName: "LockClient",
			Handler:    _Parental_LockClient_Handler,
		},
		{
			MethodName: "RequestRecoveryCode",
			Handler:    _Parental_RequestRecoveryCode_Handler,
		},
		{
			MethodName: "DisableWithRecoveryCode",
			Handler:    _Parental_DisableWithRecoveryCode_Handler,
		},
		{
			MethodName: "RequestFeatureAccess",
			Handler:    _Parental_RequestFeatureAccess_Handler,
		},
		{
			MethodName: "ApproveFeatureAccess",
			Handler:    _Parental_ApproveFeatureAccess_Handler,
		},
		{
			MethodName: "RequestPlaytime",
			Handler:    _Parental_RequestPlaytime_Handler,
		},
		{
			MethodName: "ApprovePlaytime",
			Handler:    _Parental_ApprovePlaytime_Handler,
		},
		{
			MethodName: "GetRequests",
			Handler:    _Parental_GetRequests_Handler,
		},
		{
			MethodName: "ReportPlaytimeAndNotify",
			Handler:    _Parental_ReportPlaytimeAndNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_parental.steamclient.proto",
}

// ParentalClientClient is the client API for ParentalClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParentalClientClient interface {
	NotifySettingsChange(ctx context.Context, in *CParental_ParentalSettingsChange_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyUnlock(ctx context.Context, in *CParental_ParentalUnlock_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyLock(ctx context.Context, in *CParental_ParentalLock_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyPlaytimeUsed(ctx context.Context, in *CParental_PlaytimeUsed_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type parentalClientClient struct {
	cc grpc.ClientConnInterface
}

func NewParentalClientClient(cc grpc.ClientConnInterface) ParentalClientClient {
	return &parentalClientClient{cc}
}

func (c *parentalClientClient) NotifySettingsChange(ctx context.Context, in *CParental_ParentalSettingsChange_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ParentalClient/NotifySettingsChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClientClient) NotifyUnlock(ctx context.Context, in *CParental_ParentalUnlock_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ParentalClient/NotifyUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClientClient) NotifyLock(ctx context.Context, in *CParental_ParentalLock_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ParentalClient/NotifyLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentalClientClient) NotifyPlaytimeUsed(ctx context.Context, in *CParental_PlaytimeUsed_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/ParentalClient/NotifyPlaytimeUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParentalClientServer is the server API for ParentalClient service.
// All implementations must embed UnimplementedParentalClientServer
// for forward compatibility
type ParentalClientServer interface {
	NotifySettingsChange(context.Context, *CParental_ParentalSettingsChange_Notification) (*NoResponse, error)
	NotifyUnlock(context.Context, *CParental_ParentalUnlock_Notification) (*NoResponse, error)
	NotifyLock(context.Context, *CParental_ParentalLock_Notification) (*NoResponse, error)
	NotifyPlaytimeUsed(context.Context, *CParental_PlaytimeUsed_Notification) (*NoResponse, error)
	mustEmbedUnimplementedParentalClientServer()
}

// UnimplementedParentalClientServer must be embedded to have forward compatible implementations.
type UnimplementedParentalClientServer struct {
}

func (UnimplementedParentalClientServer) NotifySettingsChange(context.Context, *CParental_ParentalSettingsChange_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySettingsChange not implemented")
}
func (UnimplementedParentalClientServer) NotifyUnlock(context.Context, *CParental_ParentalUnlock_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUnlock not implemented")
}
func (UnimplementedParentalClientServer) NotifyLock(context.Context, *CParental_ParentalLock_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLock not implemented")
}
func (UnimplementedParentalClientServer) NotifyPlaytimeUsed(context.Context, *CParental_PlaytimeUsed_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPlaytimeUsed not implemented")
}
func (UnimplementedParentalClientServer) mustEmbedUnimplementedParentalClientServer() {}

// UnsafeParentalClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParentalClientServer will
// result in compilation errors.
type UnsafeParentalClientServer interface {
	mustEmbedUnimplementedParentalClientServer()
}

func RegisterParentalClientServer(s grpc.ServiceRegistrar, srv ParentalClientServer) {
	s.RegisterService(&ParentalClient_ServiceDesc, srv)
}

func _ParentalClient_NotifySettingsChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ParentalSettingsChange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalClientServer).NotifySettingsChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParentalClient/NotifySettingsChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalClientServer).NotifySettingsChange(ctx, req.(*CParental_ParentalSettingsChange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentalClient_NotifyUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ParentalUnlock_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalClientServer).NotifyUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParentalClient/NotifyUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalClientServer).NotifyUnlock(ctx, req.(*CParental_ParentalUnlock_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentalClient_NotifyLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_ParentalLock_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalClientServer).NotifyLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParentalClient/NotifyLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalClientServer).NotifyLock(ctx, req.(*CParental_ParentalLock_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentalClient_NotifyPlaytimeUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CParental_PlaytimeUsed_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentalClientServer).NotifyPlaytimeUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParentalClient/NotifyPlaytimeUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentalClientServer).NotifyPlaytimeUsed(ctx, req.(*CParental_PlaytimeUsed_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// ParentalClient_ServiceDesc is the grpc.ServiceDesc for ParentalClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParentalClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ParentalClient",
	HandlerType: (*ParentalClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifySettingsChange",
			Handler:    _ParentalClient_NotifySettingsChange_Handler,
		},
		{
			MethodName: "NotifyUnlock",
			Handler:    _ParentalClient_NotifyUnlock_Handler,
		},
		{
			MethodName: "NotifyLock",
			Handler:    _ParentalClient_NotifyLock_Handler,
		},
		{
			MethodName: "NotifyPlaytimeUsed",
			Handler:    _ParentalClient_NotifyPlaytimeUsed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_parental.steamclient.proto",
}
