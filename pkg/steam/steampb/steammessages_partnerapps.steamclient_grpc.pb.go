// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_partnerapps.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerAppsClient is the client API for PartnerApps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerAppsClient interface {
	RequestKVSignUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestDRMUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestCEGUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestDepotUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error)
	FinishUploadKVSign(ctx context.Context, in *CPartnerApps_FinishUpload_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadKVSign_Response, error)
	FinishUploadDRMUpload(ctx context.Context, in *CPartnerApps_FinishUploadLegacyDRM_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadLegacyDRM_Response, error)
	FinishUploadCEGUpload(ctx context.Context, in *CPartnerApps_FinishUpload_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUpload_Response, error)
	FinishUploadDepotUpload(ctx context.Context, in *CPartnerApps_FinishUploadDepot_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadDepot_Response, error)
	GetDepotBuildResult(ctx context.Context, in *CPartnerApps_GetDepotBuildResult_Request, opts ...grpc.CallOption) (*CPartnerApps_GetDepotBuildResult_Response, error)
	FindDRMUploads(ctx context.Context, in *CPartnerApps_FindDRMUploads_Request, opts ...grpc.CallOption) (*CPartnerApps_FindDRMUploads_Response, error)
	Download(ctx context.Context, in *CPartnerApps_Download_Request, opts ...grpc.CallOption) (*CPartnerApps_Download_Response, error)
}

type partnerAppsClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerAppsClient(cc grpc.ClientConnInterface) PartnerAppsClient {
	return &partnerAppsClient{cc}
}

func (c *partnerAppsClient) RequestKVSignUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error) {
	out := new(CPartnerApps_RequestUploadToken_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/RequestKVSignUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) RequestDRMUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error) {
	out := new(CPartnerApps_RequestUploadToken_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/RequestDRMUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) RequestCEGUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error) {
	out := new(CPartnerApps_RequestUploadToken_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/RequestCEGUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) RequestDepotUploadToken(ctx context.Context, in *CPartnerApps_RequestUploadToken_Request, opts ...grpc.CallOption) (*CPartnerApps_RequestUploadToken_Response, error) {
	out := new(CPartnerApps_RequestUploadToken_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/RequestDepotUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) FinishUploadKVSign(ctx context.Context, in *CPartnerApps_FinishUpload_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadKVSign_Response, error) {
	out := new(CPartnerApps_FinishUploadKVSign_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/FinishUploadKVSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) FinishUploadDRMUpload(ctx context.Context, in *CPartnerApps_FinishUploadLegacyDRM_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadLegacyDRM_Response, error) {
	out := new(CPartnerApps_FinishUploadLegacyDRM_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/FinishUploadDRMUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) FinishUploadCEGUpload(ctx context.Context, in *CPartnerApps_FinishUpload_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUpload_Response, error) {
	out := new(CPartnerApps_FinishUpload_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/FinishUploadCEGUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) FinishUploadDepotUpload(ctx context.Context, in *CPartnerApps_FinishUploadDepot_Request, opts ...grpc.CallOption) (*CPartnerApps_FinishUploadDepot_Response, error) {
	out := new(CPartnerApps_FinishUploadDepot_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/FinishUploadDepotUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) GetDepotBuildResult(ctx context.Context, in *CPartnerApps_GetDepotBuildResult_Request, opts ...grpc.CallOption) (*CPartnerApps_GetDepotBuildResult_Response, error) {
	out := new(CPartnerApps_GetDepotBuildResult_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/GetDepotBuildResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) FindDRMUploads(ctx context.Context, in *CPartnerApps_FindDRMUploads_Request, opts ...grpc.CallOption) (*CPartnerApps_FindDRMUploads_Response, error) {
	out := new(CPartnerApps_FindDRMUploads_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/FindDRMUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAppsClient) Download(ctx context.Context, in *CPartnerApps_Download_Request, opts ...grpc.CallOption) (*CPartnerApps_Download_Response, error) {
	out := new(CPartnerApps_Download_Response)
	err := c.cc.Invoke(ctx, "/PartnerApps/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerAppsServer is the server API for PartnerApps service.
// All implementations must embed UnimplementedPartnerAppsServer
// for forward compatibility
type PartnerAppsServer interface {
	RequestKVSignUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestDRMUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestCEGUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error)
	RequestDepotUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error)
	FinishUploadKVSign(context.Context, *CPartnerApps_FinishUpload_Request) (*CPartnerApps_FinishUploadKVSign_Response, error)
	FinishUploadDRMUpload(context.Context, *CPartnerApps_FinishUploadLegacyDRM_Request) (*CPartnerApps_FinishUploadLegacyDRM_Response, error)
	FinishUploadCEGUpload(context.Context, *CPartnerApps_FinishUpload_Request) (*CPartnerApps_FinishUpload_Response, error)
	FinishUploadDepotUpload(context.Context, *CPartnerApps_FinishUploadDepot_Request) (*CPartnerApps_FinishUploadDepot_Response, error)
	GetDepotBuildResult(context.Context, *CPartnerApps_GetDepotBuildResult_Request) (*CPartnerApps_GetDepotBuildResult_Response, error)
	FindDRMUploads(context.Context, *CPartnerApps_FindDRMUploads_Request) (*CPartnerApps_FindDRMUploads_Response, error)
	Download(context.Context, *CPartnerApps_Download_Request) (*CPartnerApps_Download_Response, error)
	mustEmbedUnimplementedPartnerAppsServer()
}

// UnimplementedPartnerAppsServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerAppsServer struct {
}

func (UnimplementedPartnerAppsServer) RequestKVSignUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestKVSignUploadToken not implemented")
}
func (UnimplementedPartnerAppsServer) RequestDRMUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDRMUploadToken not implemented")
}
func (UnimplementedPartnerAppsServer) RequestCEGUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCEGUploadToken not implemented")
}
func (UnimplementedPartnerAppsServer) RequestDepotUploadToken(context.Context, *CPartnerApps_RequestUploadToken_Request) (*CPartnerApps_RequestUploadToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDepotUploadToken not implemented")
}
func (UnimplementedPartnerAppsServer) FinishUploadKVSign(context.Context, *CPartnerApps_FinishUpload_Request) (*CPartnerApps_FinishUploadKVSign_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadKVSign not implemented")
}
func (UnimplementedPartnerAppsServer) FinishUploadDRMUpload(context.Context, *CPartnerApps_FinishUploadLegacyDRM_Request) (*CPartnerApps_FinishUploadLegacyDRM_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadDRMUpload not implemented")
}
func (UnimplementedPartnerAppsServer) FinishUploadCEGUpload(context.Context, *CPartnerApps_FinishUpload_Request) (*CPartnerApps_FinishUpload_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadCEGUpload not implemented")
}
func (UnimplementedPartnerAppsServer) FinishUploadDepotUpload(context.Context, *CPartnerApps_FinishUploadDepot_Request) (*CPartnerApps_FinishUploadDepot_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadDepotUpload not implemented")
}
func (UnimplementedPartnerAppsServer) GetDepotBuildResult(context.Context, *CPartnerApps_GetDepotBuildResult_Request) (*CPartnerApps_GetDepotBuildResult_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepotBuildResult not implemented")
}
func (UnimplementedPartnerAppsServer) FindDRMUploads(context.Context, *CPartnerApps_FindDRMUploads_Request) (*CPartnerApps_FindDRMUploads_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDRMUploads not implemented")
}
func (UnimplementedPartnerAppsServer) Download(context.Context, *CPartnerApps_Download_Request) (*CPartnerApps_Download_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedPartnerAppsServer) mustEmbedUnimplementedPartnerAppsServer() {}

// UnsafePartnerAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerAppsServer will
// result in compilation errors.
type UnsafePartnerAppsServer interface {
	mustEmbedUnimplementedPartnerAppsServer()
}

func RegisterPartnerAppsServer(s grpc.ServiceRegistrar, srv PartnerAppsServer) {
	s.RegisterService(&PartnerApps_ServiceDesc, srv)
}

func _PartnerApps_RequestKVSignUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_RequestUploadToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).RequestKVSignUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/RequestKVSignUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).RequestKVSignUploadToken(ctx, req.(*CPartnerApps_RequestUploadToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_RequestDRMUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_RequestUploadToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).RequestDRMUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/RequestDRMUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).RequestDRMUploadToken(ctx, req.(*CPartnerApps_RequestUploadToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_RequestCEGUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_RequestUploadToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).RequestCEGUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/RequestCEGUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).RequestCEGUploadToken(ctx, req.(*CPartnerApps_RequestUploadToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_RequestDepotUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_RequestUploadToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).RequestDepotUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/RequestDepotUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).RequestDepotUploadToken(ctx, req.(*CPartnerApps_RequestUploadToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_FinishUploadKVSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_FinishUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).FinishUploadKVSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/FinishUploadKVSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).FinishUploadKVSign(ctx, req.(*CPartnerApps_FinishUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_FinishUploadDRMUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_FinishUploadLegacyDRM_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).FinishUploadDRMUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/FinishUploadDRMUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).FinishUploadDRMUpload(ctx, req.(*CPartnerApps_FinishUploadLegacyDRM_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_FinishUploadCEGUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_FinishUpload_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).FinishUploadCEGUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/FinishUploadCEGUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).FinishUploadCEGUpload(ctx, req.(*CPartnerApps_FinishUpload_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_FinishUploadDepotUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_FinishUploadDepot_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).FinishUploadDepotUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/FinishUploadDepotUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).FinishUploadDepotUpload(ctx, req.(*CPartnerApps_FinishUploadDepot_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_GetDepotBuildResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_GetDepotBuildResult_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).GetDepotBuildResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/GetDepotBuildResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).GetDepotBuildResult(ctx, req.(*CPartnerApps_GetDepotBuildResult_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_FindDRMUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_FindDRMUploads_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).FindDRMUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/FindDRMUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).FindDRMUploads(ctx, req.(*CPartnerApps_FindDRMUploads_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerApps_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPartnerApps_Download_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAppsServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartnerApps/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAppsServer).Download(ctx, req.(*CPartnerApps_Download_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerApps_ServiceDesc is the grpc.ServiceDesc for PartnerApps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerApps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PartnerApps",
	HandlerType: (*PartnerAppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestKVSignUploadToken",
			Handler:    _PartnerApps_RequestKVSignUploadToken_Handler,
		},
		{
			MethodName: "RequestDRMUploadToken",
			Handler:    _PartnerApps_RequestDRMUploadToken_Handler,
		},
		{
			MethodName: "RequestCEGUploadToken",
			Handler:    _PartnerApps_RequestCEGUploadToken_Handler,
		},
		{
			MethodName: "RequestDepotUploadToken",
			Handler:    _PartnerApps_RequestDepotUploadToken_Handler,
		},
		{
			MethodName: "FinishUploadKVSign",
			Handler:    _PartnerApps_FinishUploadKVSign_Handler,
		},
		{
			MethodName: "FinishUploadDRMUpload",
			Handler:    _PartnerApps_FinishUploadDRMUpload_Handler,
		},
		{
			MethodName: "FinishUploadCEGUpload",
			Handler:    _PartnerApps_FinishUploadCEGUpload_Handler,
		},
		{
			MethodName: "FinishUploadDepotUpload",
			Handler:    _PartnerApps_FinishUploadDepotUpload_Handler,
		},
		{
			MethodName: "GetDepotBuildResult",
			Handler:    _PartnerApps_GetDepotBuildResult_Handler,
		},
		{
			MethodName: "FindDRMUploads",
			Handler:    _PartnerApps_FindDRMUploads_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _PartnerApps_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_partnerapps.steamclient.proto",
}
