// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_player.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	GetRecentPlaytimeSessionsForChild(ctx context.Context, in *CPlayer_GetRecentPlaytimeSessionsForChild_Request, opts ...grpc.CallOption) (*CPlayer_GetRecentPlaytimeSessionsForChild_Response, error)
	GetPlayerLinkDetails(ctx context.Context, in *CPlayer_GetPlayerLinkDetails_Request, opts ...grpc.CallOption) (*CPlayer_GetPlayerLinkDetails_Response, error)
	GetMutualFriendsForIncomingInvites(ctx context.Context, in *CPlayer_GetMutualFriendsForIncomingInvites_Request, opts ...grpc.CallOption) (*CPlayer_GetMutualFriendsForIncomingInvites_Response, error)
	GetOwnedGames(ctx context.Context, in *CPlayer_GetOwnedGames_Request, opts ...grpc.CallOption) (*CPlayer_GetOwnedGames_Response, error)
	GetPlayNext(ctx context.Context, in *CPlayer_GetPlayNext_Request, opts ...grpc.CallOption) (*CPlayer_GetPlayNext_Response, error)
	GetFriendsGameplayInfo(ctx context.Context, in *CPlayer_GetFriendsGameplayInfo_Request, opts ...grpc.CallOption) (*CPlayer_GetFriendsGameplayInfo_Response, error)
	GetGameBadgeLevels(ctx context.Context, in *CPlayer_GetGameBadgeLevels_Request, opts ...grpc.CallOption) (*CPlayer_GetGameBadgeLevels_Response, error)
	GetProfileBackground(ctx context.Context, in *CPlayer_GetProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileBackground_Response, error)
	SetProfileBackground(ctx context.Context, in *CPlayer_SetProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_SetProfileBackground_Response, error)
	GetMiniProfileBackground(ctx context.Context, in *CPlayer_GetMiniProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_GetMiniProfileBackground_Response, error)
	SetMiniProfileBackground(ctx context.Context, in *CPlayer_SetMiniProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_SetMiniProfileBackground_Response, error)
	GetAvatarFrame(ctx context.Context, in *CPlayer_GetAvatarFrame_Request, opts ...grpc.CallOption) (*CPlayer_GetAvatarFrame_Response, error)
	SetAvatarFrame(ctx context.Context, in *CPlayer_SetAvatarFrame_Request, opts ...grpc.CallOption) (*CPlayer_SetAvatarFrame_Response, error)
	GetAnimatedAvatar(ctx context.Context, in *CPlayer_GetAnimatedAvatar_Request, opts ...grpc.CallOption) (*CPlayer_GetAnimatedAvatar_Response, error)
	SetAnimatedAvatar(ctx context.Context, in *CPlayer_SetAnimatedAvatar_Request, opts ...grpc.CallOption) (*CPlayer_SetAnimatedAvatar_Response, error)
	GetSteamDeckKeyboardSkin(ctx context.Context, in *CPlayer_GetSteamDeckKeyboardSkin_Request, opts ...grpc.CallOption) (*CPlayer_GetSteamDeckKeyboardSkin_Response, error)
	SetSteamDeckKeyboardSkin(ctx context.Context, in *CPlayer_SetSteamDeckKeyboardSkin_Request, opts ...grpc.CallOption) (*CPlayer_SetSteamDeckKeyboardSkin_Response, error)
	GetProfileItemsOwned(ctx context.Context, in *CPlayer_GetProfileItemsOwned_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileItemsOwned_Response, error)
	GetProfileItemsEquipped(ctx context.Context, in *CPlayer_GetProfileItemsEquipped_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileItemsEquipped_Response, error)
	SetEquippedProfileItemFlags(ctx context.Context, in *CPlayer_SetEquippedProfileItemFlags_Request, opts ...grpc.CallOption) (*CPlayer_SetEquippedProfileItemFlags_Response, error)
	GetEmoticonList(ctx context.Context, in *CPlayer_GetEmoticonList_Request, opts ...grpc.CallOption) (*CPlayer_GetEmoticonList_Response, error)
	GetCommunityBadgeProgress(ctx context.Context, in *CPlayer_GetCommunityBadgeProgress_Request, opts ...grpc.CallOption) (*CPlayer_GetCommunityBadgeProgress_Response, error)
	GetTopAchievementsForGames(ctx context.Context, in *CPlayer_GetTopAchievementsForGames_Request, opts ...grpc.CallOption) (*CPlayer_GetTopAchievementsForGames_Response, error)
	GetAchievementsProgress(ctx context.Context, in *CPlayer_GetAchievementsProgress_Request, opts ...grpc.CallOption) (*CPlayer_GetAchievementsProgress_Response, error)
	GetGameAchievements(ctx context.Context, in *CPlayer_GetGameAchievements_Request, opts ...grpc.CallOption) (*CPlayer_GetGameAchievements_Response, error)
	GetFavoriteBadge(ctx context.Context, in *CPlayer_GetFavoriteBadge_Request, opts ...grpc.CallOption) (*CPlayer_GetFavoriteBadge_Response, error)
	SetFavoriteBadge(ctx context.Context, in *CPlayer_SetFavoriteBadge_Request, opts ...grpc.CallOption) (*CPlayer_SetFavoriteBadge_Response, error)
	GetProfileCustomization(ctx context.Context, in *CPlayer_GetProfileCustomization_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileCustomization_Response, error)
	GetPurchasedProfileCustomizations(ctx context.Context, in *CPlayer_GetPurchasedProfileCustomizations_Request, opts ...grpc.CallOption) (*CPlayer_GetPurchasedProfileCustomizations_Response, error)
	GetPurchasedAndUpgradedProfileCustomizations(ctx context.Context, in *CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request, opts ...grpc.CallOption) (*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, error)
	GetProfileThemesAvailable(ctx context.Context, in *CPlayer_GetProfileThemesAvailable_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileThemesAvailable_Response, error)
	SetProfileTheme(ctx context.Context, in *CPlayer_SetProfileTheme_Request, opts ...grpc.CallOption) (*CPlayer_SetProfileTheme_Response, error)
	SetProfilePreferences(ctx context.Context, in *CPlayer_SetProfilePreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetProfilePreferences_Response, error)
	PostStatusToFriends(ctx context.Context, in *CPlayer_PostStatusToFriends_Request, opts ...grpc.CallOption) (*CPlayer_PostStatusToFriends_Response, error)
	GetPostedStatus(ctx context.Context, in *CPlayer_GetPostedStatus_Request, opts ...grpc.CallOption) (*CPlayer_GetPostedStatus_Response, error)
	DeletePostedStatus(ctx context.Context, in *CPlayer_DeletePostedStatus_Request, opts ...grpc.CallOption) (*CPlayer_DeletePostedStatus_Response, error)
	ClientGetLastPlayedTimes(ctx context.Context, in *CPlayer_GetLastPlayedTimes_Request, opts ...grpc.CallOption) (*CPlayer_GetLastPlayedTimes_Response, error)
	GetTimeSSAAccepted(ctx context.Context, in *CPlayer_GetTimeSSAAccepted_Request, opts ...grpc.CallOption) (*CPlayer_GetTimeSSAAccepted_Response, error)
	AcceptSSA(ctx context.Context, in *CPlayer_AcceptSSA_Request, opts ...grpc.CallOption) (*CPlayer_AcceptSSA_Response, error)
	GetNicknameList(ctx context.Context, in *CPlayer_GetNicknameList_Request, opts ...grpc.CallOption) (*CPlayer_GetNicknameList_Response, error)
	GetPerFriendPreferences(ctx context.Context, in *CPlayer_GetPerFriendPreferences_Request, opts ...grpc.CallOption) (*CPlayer_GetPerFriendPreferences_Response, error)
	SetPerFriendPreferences(ctx context.Context, in *CPlayer_SetPerFriendPreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetPerFriendPreferences_Response, error)
	AddFriend(ctx context.Context, in *CPlayer_AddFriend_Request, opts ...grpc.CallOption) (*CPlayer_AddFriend_Response, error)
	RemoveFriend(ctx context.Context, in *CPlayer_RemoveFriend_Request, opts ...grpc.CallOption) (*CPlayer_RemoveFriend_Response, error)
	IgnoreFriend(ctx context.Context, in *CPlayer_IgnoreFriend_Request, opts ...grpc.CallOption) (*CPlayer_IgnoreFriend_Response, error)
	GetCommunityPreferences(ctx context.Context, in *CPlayer_GetCommunityPreferences_Request, opts ...grpc.CallOption) (*CPlayer_GetCommunityPreferences_Response, error)
	SetCommunityPreferences(ctx context.Context, in *CPlayer_SetCommunityPreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetCommunityPreferences_Response, error)
	GetTextFilterWords(ctx context.Context, in *CPlayer_GetTextFilterWords_Request, opts ...grpc.CallOption) (*CPlayer_GetTextFilterWords_Response, error)
	GetNewSteamAnnouncementState(ctx context.Context, in *CPlayer_GetNewSteamAnnouncementState_Request, opts ...grpc.CallOption) (*CPlayer_GetNewSteamAnnouncementState_Response, error)
	UpdateSteamAnnouncementLastRead(ctx context.Context, in *CPlayer_UpdateSteamAnnouncementLastRead_Request, opts ...grpc.CallOption) (*CPlayer_UpdateSteamAnnouncementLastRead_Response, error)
	GetPrivacySettings(ctx context.Context, in *CPlayer_GetPrivacySettings_Request, opts ...grpc.CallOption) (*CPlayer_GetPrivacySettings_Response, error)
	GetDurationControl(ctx context.Context, in *CPlayer_GetDurationControl_Request, opts ...grpc.CallOption) (*CPlayer_GetDurationControl_Response, error)
	RecordDisconnectedPlaytime(ctx context.Context, in *CPlayer_RecordDisconnectedPlaytime_Request, opts ...grpc.CallOption) (*CPlayer_RecordDisconnectedPlaytime_Response, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) GetRecentPlaytimeSessionsForChild(ctx context.Context, in *CPlayer_GetRecentPlaytimeSessionsForChild_Request, opts ...grpc.CallOption) (*CPlayer_GetRecentPlaytimeSessionsForChild_Response, error) {
	out := new(CPlayer_GetRecentPlaytimeSessionsForChild_Response)
	err := c.cc.Invoke(ctx, "/Player/GetRecentPlaytimeSessionsForChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPlayerLinkDetails(ctx context.Context, in *CPlayer_GetPlayerLinkDetails_Request, opts ...grpc.CallOption) (*CPlayer_GetPlayerLinkDetails_Response, error) {
	out := new(CPlayer_GetPlayerLinkDetails_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPlayerLinkDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetMutualFriendsForIncomingInvites(ctx context.Context, in *CPlayer_GetMutualFriendsForIncomingInvites_Request, opts ...grpc.CallOption) (*CPlayer_GetMutualFriendsForIncomingInvites_Response, error) {
	out := new(CPlayer_GetMutualFriendsForIncomingInvites_Response)
	err := c.cc.Invoke(ctx, "/Player/GetMutualFriendsForIncomingInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetOwnedGames(ctx context.Context, in *CPlayer_GetOwnedGames_Request, opts ...grpc.CallOption) (*CPlayer_GetOwnedGames_Response, error) {
	out := new(CPlayer_GetOwnedGames_Response)
	err := c.cc.Invoke(ctx, "/Player/GetOwnedGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPlayNext(ctx context.Context, in *CPlayer_GetPlayNext_Request, opts ...grpc.CallOption) (*CPlayer_GetPlayNext_Response, error) {
	out := new(CPlayer_GetPlayNext_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPlayNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetFriendsGameplayInfo(ctx context.Context, in *CPlayer_GetFriendsGameplayInfo_Request, opts ...grpc.CallOption) (*CPlayer_GetFriendsGameplayInfo_Response, error) {
	out := new(CPlayer_GetFriendsGameplayInfo_Response)
	err := c.cc.Invoke(ctx, "/Player/GetFriendsGameplayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetGameBadgeLevels(ctx context.Context, in *CPlayer_GetGameBadgeLevels_Request, opts ...grpc.CallOption) (*CPlayer_GetGameBadgeLevels_Response, error) {
	out := new(CPlayer_GetGameBadgeLevels_Response)
	err := c.cc.Invoke(ctx, "/Player/GetGameBadgeLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetProfileBackground(ctx context.Context, in *CPlayer_GetProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileBackground_Response, error) {
	out := new(CPlayer_GetProfileBackground_Response)
	err := c.cc.Invoke(ctx, "/Player/GetProfileBackground", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetProfileBackground(ctx context.Context, in *CPlayer_SetProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_SetProfileBackground_Response, error) {
	out := new(CPlayer_SetProfileBackground_Response)
	err := c.cc.Invoke(ctx, "/Player/SetProfileBackground", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetMiniProfileBackground(ctx context.Context, in *CPlayer_GetMiniProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_GetMiniProfileBackground_Response, error) {
	out := new(CPlayer_GetMiniProfileBackground_Response)
	err := c.cc.Invoke(ctx, "/Player/GetMiniProfileBackground", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetMiniProfileBackground(ctx context.Context, in *CPlayer_SetMiniProfileBackground_Request, opts ...grpc.CallOption) (*CPlayer_SetMiniProfileBackground_Response, error) {
	out := new(CPlayer_SetMiniProfileBackground_Response)
	err := c.cc.Invoke(ctx, "/Player/SetMiniProfileBackground", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetAvatarFrame(ctx context.Context, in *CPlayer_GetAvatarFrame_Request, opts ...grpc.CallOption) (*CPlayer_GetAvatarFrame_Response, error) {
	out := new(CPlayer_GetAvatarFrame_Response)
	err := c.cc.Invoke(ctx, "/Player/GetAvatarFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetAvatarFrame(ctx context.Context, in *CPlayer_SetAvatarFrame_Request, opts ...grpc.CallOption) (*CPlayer_SetAvatarFrame_Response, error) {
	out := new(CPlayer_SetAvatarFrame_Response)
	err := c.cc.Invoke(ctx, "/Player/SetAvatarFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetAnimatedAvatar(ctx context.Context, in *CPlayer_GetAnimatedAvatar_Request, opts ...grpc.CallOption) (*CPlayer_GetAnimatedAvatar_Response, error) {
	out := new(CPlayer_GetAnimatedAvatar_Response)
	err := c.cc.Invoke(ctx, "/Player/GetAnimatedAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetAnimatedAvatar(ctx context.Context, in *CPlayer_SetAnimatedAvatar_Request, opts ...grpc.CallOption) (*CPlayer_SetAnimatedAvatar_Response, error) {
	out := new(CPlayer_SetAnimatedAvatar_Response)
	err := c.cc.Invoke(ctx, "/Player/SetAnimatedAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetSteamDeckKeyboardSkin(ctx context.Context, in *CPlayer_GetSteamDeckKeyboardSkin_Request, opts ...grpc.CallOption) (*CPlayer_GetSteamDeckKeyboardSkin_Response, error) {
	out := new(CPlayer_GetSteamDeckKeyboardSkin_Response)
	err := c.cc.Invoke(ctx, "/Player/GetSteamDeckKeyboardSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetSteamDeckKeyboardSkin(ctx context.Context, in *CPlayer_SetSteamDeckKeyboardSkin_Request, opts ...grpc.CallOption) (*CPlayer_SetSteamDeckKeyboardSkin_Response, error) {
	out := new(CPlayer_SetSteamDeckKeyboardSkin_Response)
	err := c.cc.Invoke(ctx, "/Player/SetSteamDeckKeyboardSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetProfileItemsOwned(ctx context.Context, in *CPlayer_GetProfileItemsOwned_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileItemsOwned_Response, error) {
	out := new(CPlayer_GetProfileItemsOwned_Response)
	err := c.cc.Invoke(ctx, "/Player/GetProfileItemsOwned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetProfileItemsEquipped(ctx context.Context, in *CPlayer_GetProfileItemsEquipped_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileItemsEquipped_Response, error) {
	out := new(CPlayer_GetProfileItemsEquipped_Response)
	err := c.cc.Invoke(ctx, "/Player/GetProfileItemsEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetEquippedProfileItemFlags(ctx context.Context, in *CPlayer_SetEquippedProfileItemFlags_Request, opts ...grpc.CallOption) (*CPlayer_SetEquippedProfileItemFlags_Response, error) {
	out := new(CPlayer_SetEquippedProfileItemFlags_Response)
	err := c.cc.Invoke(ctx, "/Player/SetEquippedProfileItemFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetEmoticonList(ctx context.Context, in *CPlayer_GetEmoticonList_Request, opts ...grpc.CallOption) (*CPlayer_GetEmoticonList_Response, error) {
	out := new(CPlayer_GetEmoticonList_Response)
	err := c.cc.Invoke(ctx, "/Player/GetEmoticonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetCommunityBadgeProgress(ctx context.Context, in *CPlayer_GetCommunityBadgeProgress_Request, opts ...grpc.CallOption) (*CPlayer_GetCommunityBadgeProgress_Response, error) {
	out := new(CPlayer_GetCommunityBadgeProgress_Response)
	err := c.cc.Invoke(ctx, "/Player/GetCommunityBadgeProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetTopAchievementsForGames(ctx context.Context, in *CPlayer_GetTopAchievementsForGames_Request, opts ...grpc.CallOption) (*CPlayer_GetTopAchievementsForGames_Response, error) {
	out := new(CPlayer_GetTopAchievementsForGames_Response)
	err := c.cc.Invoke(ctx, "/Player/GetTopAchievementsForGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetAchievementsProgress(ctx context.Context, in *CPlayer_GetAchievementsProgress_Request, opts ...grpc.CallOption) (*CPlayer_GetAchievementsProgress_Response, error) {
	out := new(CPlayer_GetAchievementsProgress_Response)
	err := c.cc.Invoke(ctx, "/Player/GetAchievementsProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetGameAchievements(ctx context.Context, in *CPlayer_GetGameAchievements_Request, opts ...grpc.CallOption) (*CPlayer_GetGameAchievements_Response, error) {
	out := new(CPlayer_GetGameAchievements_Response)
	err := c.cc.Invoke(ctx, "/Player/GetGameAchievements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetFavoriteBadge(ctx context.Context, in *CPlayer_GetFavoriteBadge_Request, opts ...grpc.CallOption) (*CPlayer_GetFavoriteBadge_Response, error) {
	out := new(CPlayer_GetFavoriteBadge_Response)
	err := c.cc.Invoke(ctx, "/Player/GetFavoriteBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetFavoriteBadge(ctx context.Context, in *CPlayer_SetFavoriteBadge_Request, opts ...grpc.CallOption) (*CPlayer_SetFavoriteBadge_Response, error) {
	out := new(CPlayer_SetFavoriteBadge_Response)
	err := c.cc.Invoke(ctx, "/Player/SetFavoriteBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetProfileCustomization(ctx context.Context, in *CPlayer_GetProfileCustomization_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileCustomization_Response, error) {
	out := new(CPlayer_GetProfileCustomization_Response)
	err := c.cc.Invoke(ctx, "/Player/GetProfileCustomization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPurchasedProfileCustomizations(ctx context.Context, in *CPlayer_GetPurchasedProfileCustomizations_Request, opts ...grpc.CallOption) (*CPlayer_GetPurchasedProfileCustomizations_Response, error) {
	out := new(CPlayer_GetPurchasedProfileCustomizations_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPurchasedProfileCustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPurchasedAndUpgradedProfileCustomizations(ctx context.Context, in *CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request, opts ...grpc.CallOption) (*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, error) {
	out := new(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPurchasedAndUpgradedProfileCustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetProfileThemesAvailable(ctx context.Context, in *CPlayer_GetProfileThemesAvailable_Request, opts ...grpc.CallOption) (*CPlayer_GetProfileThemesAvailable_Response, error) {
	out := new(CPlayer_GetProfileThemesAvailable_Response)
	err := c.cc.Invoke(ctx, "/Player/GetProfileThemesAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetProfileTheme(ctx context.Context, in *CPlayer_SetProfileTheme_Request, opts ...grpc.CallOption) (*CPlayer_SetProfileTheme_Response, error) {
	out := new(CPlayer_SetProfileTheme_Response)
	err := c.cc.Invoke(ctx, "/Player/SetProfileTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetProfilePreferences(ctx context.Context, in *CPlayer_SetProfilePreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetProfilePreferences_Response, error) {
	out := new(CPlayer_SetProfilePreferences_Response)
	err := c.cc.Invoke(ctx, "/Player/SetProfilePreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PostStatusToFriends(ctx context.Context, in *CPlayer_PostStatusToFriends_Request, opts ...grpc.CallOption) (*CPlayer_PostStatusToFriends_Response, error) {
	out := new(CPlayer_PostStatusToFriends_Response)
	err := c.cc.Invoke(ctx, "/Player/PostStatusToFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPostedStatus(ctx context.Context, in *CPlayer_GetPostedStatus_Request, opts ...grpc.CallOption) (*CPlayer_GetPostedStatus_Response, error) {
	out := new(CPlayer_GetPostedStatus_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPostedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) DeletePostedStatus(ctx context.Context, in *CPlayer_DeletePostedStatus_Request, opts ...grpc.CallOption) (*CPlayer_DeletePostedStatus_Response, error) {
	out := new(CPlayer_DeletePostedStatus_Response)
	err := c.cc.Invoke(ctx, "/Player/DeletePostedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) ClientGetLastPlayedTimes(ctx context.Context, in *CPlayer_GetLastPlayedTimes_Request, opts ...grpc.CallOption) (*CPlayer_GetLastPlayedTimes_Response, error) {
	out := new(CPlayer_GetLastPlayedTimes_Response)
	err := c.cc.Invoke(ctx, "/Player/ClientGetLastPlayedTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetTimeSSAAccepted(ctx context.Context, in *CPlayer_GetTimeSSAAccepted_Request, opts ...grpc.CallOption) (*CPlayer_GetTimeSSAAccepted_Response, error) {
	out := new(CPlayer_GetTimeSSAAccepted_Response)
	err := c.cc.Invoke(ctx, "/Player/GetTimeSSAAccepted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) AcceptSSA(ctx context.Context, in *CPlayer_AcceptSSA_Request, opts ...grpc.CallOption) (*CPlayer_AcceptSSA_Response, error) {
	out := new(CPlayer_AcceptSSA_Response)
	err := c.cc.Invoke(ctx, "/Player/AcceptSSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetNicknameList(ctx context.Context, in *CPlayer_GetNicknameList_Request, opts ...grpc.CallOption) (*CPlayer_GetNicknameList_Response, error) {
	out := new(CPlayer_GetNicknameList_Response)
	err := c.cc.Invoke(ctx, "/Player/GetNicknameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPerFriendPreferences(ctx context.Context, in *CPlayer_GetPerFriendPreferences_Request, opts ...grpc.CallOption) (*CPlayer_GetPerFriendPreferences_Response, error) {
	out := new(CPlayer_GetPerFriendPreferences_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPerFriendPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetPerFriendPreferences(ctx context.Context, in *CPlayer_SetPerFriendPreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetPerFriendPreferences_Response, error) {
	out := new(CPlayer_SetPerFriendPreferences_Response)
	err := c.cc.Invoke(ctx, "/Player/SetPerFriendPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) AddFriend(ctx context.Context, in *CPlayer_AddFriend_Request, opts ...grpc.CallOption) (*CPlayer_AddFriend_Response, error) {
	out := new(CPlayer_AddFriend_Response)
	err := c.cc.Invoke(ctx, "/Player/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) RemoveFriend(ctx context.Context, in *CPlayer_RemoveFriend_Request, opts ...grpc.CallOption) (*CPlayer_RemoveFriend_Response, error) {
	out := new(CPlayer_RemoveFriend_Response)
	err := c.cc.Invoke(ctx, "/Player/RemoveFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) IgnoreFriend(ctx context.Context, in *CPlayer_IgnoreFriend_Request, opts ...grpc.CallOption) (*CPlayer_IgnoreFriend_Response, error) {
	out := new(CPlayer_IgnoreFriend_Response)
	err := c.cc.Invoke(ctx, "/Player/IgnoreFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetCommunityPreferences(ctx context.Context, in *CPlayer_GetCommunityPreferences_Request, opts ...grpc.CallOption) (*CPlayer_GetCommunityPreferences_Response, error) {
	out := new(CPlayer_GetCommunityPreferences_Response)
	err := c.cc.Invoke(ctx, "/Player/GetCommunityPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetCommunityPreferences(ctx context.Context, in *CPlayer_SetCommunityPreferences_Request, opts ...grpc.CallOption) (*CPlayer_SetCommunityPreferences_Response, error) {
	out := new(CPlayer_SetCommunityPreferences_Response)
	err := c.cc.Invoke(ctx, "/Player/SetCommunityPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetTextFilterWords(ctx context.Context, in *CPlayer_GetTextFilterWords_Request, opts ...grpc.CallOption) (*CPlayer_GetTextFilterWords_Response, error) {
	out := new(CPlayer_GetTextFilterWords_Response)
	err := c.cc.Invoke(ctx, "/Player/GetTextFilterWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetNewSteamAnnouncementState(ctx context.Context, in *CPlayer_GetNewSteamAnnouncementState_Request, opts ...grpc.CallOption) (*CPlayer_GetNewSteamAnnouncementState_Response, error) {
	out := new(CPlayer_GetNewSteamAnnouncementState_Response)
	err := c.cc.Invoke(ctx, "/Player/GetNewSteamAnnouncementState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) UpdateSteamAnnouncementLastRead(ctx context.Context, in *CPlayer_UpdateSteamAnnouncementLastRead_Request, opts ...grpc.CallOption) (*CPlayer_UpdateSteamAnnouncementLastRead_Response, error) {
	out := new(CPlayer_UpdateSteamAnnouncementLastRead_Response)
	err := c.cc.Invoke(ctx, "/Player/UpdateSteamAnnouncementLastRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPrivacySettings(ctx context.Context, in *CPlayer_GetPrivacySettings_Request, opts ...grpc.CallOption) (*CPlayer_GetPrivacySettings_Response, error) {
	out := new(CPlayer_GetPrivacySettings_Response)
	err := c.cc.Invoke(ctx, "/Player/GetPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetDurationControl(ctx context.Context, in *CPlayer_GetDurationControl_Request, opts ...grpc.CallOption) (*CPlayer_GetDurationControl_Response, error) {
	out := new(CPlayer_GetDurationControl_Response)
	err := c.cc.Invoke(ctx, "/Player/GetDurationControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) RecordDisconnectedPlaytime(ctx context.Context, in *CPlayer_RecordDisconnectedPlaytime_Request, opts ...grpc.CallOption) (*CPlayer_RecordDisconnectedPlaytime_Response, error) {
	out := new(CPlayer_RecordDisconnectedPlaytime_Response)
	err := c.cc.Invoke(ctx, "/Player/RecordDisconnectedPlaytime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility
type PlayerServer interface {
	GetRecentPlaytimeSessionsForChild(context.Context, *CPlayer_GetRecentPlaytimeSessionsForChild_Request) (*CPlayer_GetRecentPlaytimeSessionsForChild_Response, error)
	GetPlayerLinkDetails(context.Context, *CPlayer_GetPlayerLinkDetails_Request) (*CPlayer_GetPlayerLinkDetails_Response, error)
	GetMutualFriendsForIncomingInvites(context.Context, *CPlayer_GetMutualFriendsForIncomingInvites_Request) (*CPlayer_GetMutualFriendsForIncomingInvites_Response, error)
	GetOwnedGames(context.Context, *CPlayer_GetOwnedGames_Request) (*CPlayer_GetOwnedGames_Response, error)
	GetPlayNext(context.Context, *CPlayer_GetPlayNext_Request) (*CPlayer_GetPlayNext_Response, error)
	GetFriendsGameplayInfo(context.Context, *CPlayer_GetFriendsGameplayInfo_Request) (*CPlayer_GetFriendsGameplayInfo_Response, error)
	GetGameBadgeLevels(context.Context, *CPlayer_GetGameBadgeLevels_Request) (*CPlayer_GetGameBadgeLevels_Response, error)
	GetProfileBackground(context.Context, *CPlayer_GetProfileBackground_Request) (*CPlayer_GetProfileBackground_Response, error)
	SetProfileBackground(context.Context, *CPlayer_SetProfileBackground_Request) (*CPlayer_SetProfileBackground_Response, error)
	GetMiniProfileBackground(context.Context, *CPlayer_GetMiniProfileBackground_Request) (*CPlayer_GetMiniProfileBackground_Response, error)
	SetMiniProfileBackground(context.Context, *CPlayer_SetMiniProfileBackground_Request) (*CPlayer_SetMiniProfileBackground_Response, error)
	GetAvatarFrame(context.Context, *CPlayer_GetAvatarFrame_Request) (*CPlayer_GetAvatarFrame_Response, error)
	SetAvatarFrame(context.Context, *CPlayer_SetAvatarFrame_Request) (*CPlayer_SetAvatarFrame_Response, error)
	GetAnimatedAvatar(context.Context, *CPlayer_GetAnimatedAvatar_Request) (*CPlayer_GetAnimatedAvatar_Response, error)
	SetAnimatedAvatar(context.Context, *CPlayer_SetAnimatedAvatar_Request) (*CPlayer_SetAnimatedAvatar_Response, error)
	GetSteamDeckKeyboardSkin(context.Context, *CPlayer_GetSteamDeckKeyboardSkin_Request) (*CPlayer_GetSteamDeckKeyboardSkin_Response, error)
	SetSteamDeckKeyboardSkin(context.Context, *CPlayer_SetSteamDeckKeyboardSkin_Request) (*CPlayer_SetSteamDeckKeyboardSkin_Response, error)
	GetProfileItemsOwned(context.Context, *CPlayer_GetProfileItemsOwned_Request) (*CPlayer_GetProfileItemsOwned_Response, error)
	GetProfileItemsEquipped(context.Context, *CPlayer_GetProfileItemsEquipped_Request) (*CPlayer_GetProfileItemsEquipped_Response, error)
	SetEquippedProfileItemFlags(context.Context, *CPlayer_SetEquippedProfileItemFlags_Request) (*CPlayer_SetEquippedProfileItemFlags_Response, error)
	GetEmoticonList(context.Context, *CPlayer_GetEmoticonList_Request) (*CPlayer_GetEmoticonList_Response, error)
	GetCommunityBadgeProgress(context.Context, *CPlayer_GetCommunityBadgeProgress_Request) (*CPlayer_GetCommunityBadgeProgress_Response, error)
	GetTopAchievementsForGames(context.Context, *CPlayer_GetTopAchievementsForGames_Request) (*CPlayer_GetTopAchievementsForGames_Response, error)
	GetAchievementsProgress(context.Context, *CPlayer_GetAchievementsProgress_Request) (*CPlayer_GetAchievementsProgress_Response, error)
	GetGameAchievements(context.Context, *CPlayer_GetGameAchievements_Request) (*CPlayer_GetGameAchievements_Response, error)
	GetFavoriteBadge(context.Context, *CPlayer_GetFavoriteBadge_Request) (*CPlayer_GetFavoriteBadge_Response, error)
	SetFavoriteBadge(context.Context, *CPlayer_SetFavoriteBadge_Request) (*CPlayer_SetFavoriteBadge_Response, error)
	GetProfileCustomization(context.Context, *CPlayer_GetProfileCustomization_Request) (*CPlayer_GetProfileCustomization_Response, error)
	GetPurchasedProfileCustomizations(context.Context, *CPlayer_GetPurchasedProfileCustomizations_Request) (*CPlayer_GetPurchasedProfileCustomizations_Response, error)
	GetPurchasedAndUpgradedProfileCustomizations(context.Context, *CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request) (*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, error)
	GetProfileThemesAvailable(context.Context, *CPlayer_GetProfileThemesAvailable_Request) (*CPlayer_GetProfileThemesAvailable_Response, error)
	SetProfileTheme(context.Context, *CPlayer_SetProfileTheme_Request) (*CPlayer_SetProfileTheme_Response, error)
	SetProfilePreferences(context.Context, *CPlayer_SetProfilePreferences_Request) (*CPlayer_SetProfilePreferences_Response, error)
	PostStatusToFriends(context.Context, *CPlayer_PostStatusToFriends_Request) (*CPlayer_PostStatusToFriends_Response, error)
	GetPostedStatus(context.Context, *CPlayer_GetPostedStatus_Request) (*CPlayer_GetPostedStatus_Response, error)
	DeletePostedStatus(context.Context, *CPlayer_DeletePostedStatus_Request) (*CPlayer_DeletePostedStatus_Response, error)
	ClientGetLastPlayedTimes(context.Context, *CPlayer_GetLastPlayedTimes_Request) (*CPlayer_GetLastPlayedTimes_Response, error)
	GetTimeSSAAccepted(context.Context, *CPlayer_GetTimeSSAAccepted_Request) (*CPlayer_GetTimeSSAAccepted_Response, error)
	AcceptSSA(context.Context, *CPlayer_AcceptSSA_Request) (*CPlayer_AcceptSSA_Response, error)
	GetNicknameList(context.Context, *CPlayer_GetNicknameList_Request) (*CPlayer_GetNicknameList_Response, error)
	GetPerFriendPreferences(context.Context, *CPlayer_GetPerFriendPreferences_Request) (*CPlayer_GetPerFriendPreferences_Response, error)
	SetPerFriendPreferences(context.Context, *CPlayer_SetPerFriendPreferences_Request) (*CPlayer_SetPerFriendPreferences_Response, error)
	AddFriend(context.Context, *CPlayer_AddFriend_Request) (*CPlayer_AddFriend_Response, error)
	RemoveFriend(context.Context, *CPlayer_RemoveFriend_Request) (*CPlayer_RemoveFriend_Response, error)
	IgnoreFriend(context.Context, *CPlayer_IgnoreFriend_Request) (*CPlayer_IgnoreFriend_Response, error)
	GetCommunityPreferences(context.Context, *CPlayer_GetCommunityPreferences_Request) (*CPlayer_GetCommunityPreferences_Response, error)
	SetCommunityPreferences(context.Context, *CPlayer_SetCommunityPreferences_Request) (*CPlayer_SetCommunityPreferences_Response, error)
	GetTextFilterWords(context.Context, *CPlayer_GetTextFilterWords_Request) (*CPlayer_GetTextFilterWords_Response, error)
	GetNewSteamAnnouncementState(context.Context, *CPlayer_GetNewSteamAnnouncementState_Request) (*CPlayer_GetNewSteamAnnouncementState_Response, error)
	UpdateSteamAnnouncementLastRead(context.Context, *CPlayer_UpdateSteamAnnouncementLastRead_Request) (*CPlayer_UpdateSteamAnnouncementLastRead_Response, error)
	GetPrivacySettings(context.Context, *CPlayer_GetPrivacySettings_Request) (*CPlayer_GetPrivacySettings_Response, error)
	GetDurationControl(context.Context, *CPlayer_GetDurationControl_Request) (*CPlayer_GetDurationControl_Response, error)
	RecordDisconnectedPlaytime(context.Context, *CPlayer_RecordDisconnectedPlaytime_Request) (*CPlayer_RecordDisconnectedPlaytime_Response, error)
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (UnimplementedPlayerServer) GetRecentPlaytimeSessionsForChild(context.Context, *CPlayer_GetRecentPlaytimeSessionsForChild_Request) (*CPlayer_GetRecentPlaytimeSessionsForChild_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentPlaytimeSessionsForChild not implemented")
}
func (UnimplementedPlayerServer) GetPlayerLinkDetails(context.Context, *CPlayer_GetPlayerLinkDetails_Request) (*CPlayer_GetPlayerLinkDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerLinkDetails not implemented")
}
func (UnimplementedPlayerServer) GetMutualFriendsForIncomingInvites(context.Context, *CPlayer_GetMutualFriendsForIncomingInvites_Request) (*CPlayer_GetMutualFriendsForIncomingInvites_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMutualFriendsForIncomingInvites not implemented")
}
func (UnimplementedPlayerServer) GetOwnedGames(context.Context, *CPlayer_GetOwnedGames_Request) (*CPlayer_GetOwnedGames_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnedGames not implemented")
}
func (UnimplementedPlayerServer) GetPlayNext(context.Context, *CPlayer_GetPlayNext_Request) (*CPlayer_GetPlayNext_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayNext not implemented")
}
func (UnimplementedPlayerServer) GetFriendsGameplayInfo(context.Context, *CPlayer_GetFriendsGameplayInfo_Request) (*CPlayer_GetFriendsGameplayInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsGameplayInfo not implemented")
}
func (UnimplementedPlayerServer) GetGameBadgeLevels(context.Context, *CPlayer_GetGameBadgeLevels_Request) (*CPlayer_GetGameBadgeLevels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameBadgeLevels not implemented")
}
func (UnimplementedPlayerServer) GetProfileBackground(context.Context, *CPlayer_GetProfileBackground_Request) (*CPlayer_GetProfileBackground_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileBackground not implemented")
}
func (UnimplementedPlayerServer) SetProfileBackground(context.Context, *CPlayer_SetProfileBackground_Request) (*CPlayer_SetProfileBackground_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileBackground not implemented")
}
func (UnimplementedPlayerServer) GetMiniProfileBackground(context.Context, *CPlayer_GetMiniProfileBackground_Request) (*CPlayer_GetMiniProfileBackground_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiniProfileBackground not implemented")
}
func (UnimplementedPlayerServer) SetMiniProfileBackground(context.Context, *CPlayer_SetMiniProfileBackground_Request) (*CPlayer_SetMiniProfileBackground_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMiniProfileBackground not implemented")
}
func (UnimplementedPlayerServer) GetAvatarFrame(context.Context, *CPlayer_GetAvatarFrame_Request) (*CPlayer_GetAvatarFrame_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarFrame not implemented")
}
func (UnimplementedPlayerServer) SetAvatarFrame(context.Context, *CPlayer_SetAvatarFrame_Request) (*CPlayer_SetAvatarFrame_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatarFrame not implemented")
}
func (UnimplementedPlayerServer) GetAnimatedAvatar(context.Context, *CPlayer_GetAnimatedAvatar_Request) (*CPlayer_GetAnimatedAvatar_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimatedAvatar not implemented")
}
func (UnimplementedPlayerServer) SetAnimatedAvatar(context.Context, *CPlayer_SetAnimatedAvatar_Request) (*CPlayer_SetAnimatedAvatar_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnimatedAvatar not implemented")
}
func (UnimplementedPlayerServer) GetSteamDeckKeyboardSkin(context.Context, *CPlayer_GetSteamDeckKeyboardSkin_Request) (*CPlayer_GetSteamDeckKeyboardSkin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteamDeckKeyboardSkin not implemented")
}
func (UnimplementedPlayerServer) SetSteamDeckKeyboardSkin(context.Context, *CPlayer_SetSteamDeckKeyboardSkin_Request) (*CPlayer_SetSteamDeckKeyboardSkin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSteamDeckKeyboardSkin not implemented")
}
func (UnimplementedPlayerServer) GetProfileItemsOwned(context.Context, *CPlayer_GetProfileItemsOwned_Request) (*CPlayer_GetProfileItemsOwned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileItemsOwned not implemented")
}
func (UnimplementedPlayerServer) GetProfileItemsEquipped(context.Context, *CPlayer_GetProfileItemsEquipped_Request) (*CPlayer_GetProfileItemsEquipped_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileItemsEquipped not implemented")
}
func (UnimplementedPlayerServer) SetEquippedProfileItemFlags(context.Context, *CPlayer_SetEquippedProfileItemFlags_Request) (*CPlayer_SetEquippedProfileItemFlags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEquippedProfileItemFlags not implemented")
}
func (UnimplementedPlayerServer) GetEmoticonList(context.Context, *CPlayer_GetEmoticonList_Request) (*CPlayer_GetEmoticonList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmoticonList not implemented")
}
func (UnimplementedPlayerServer) GetCommunityBadgeProgress(context.Context, *CPlayer_GetCommunityBadgeProgress_Request) (*CPlayer_GetCommunityBadgeProgress_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityBadgeProgress not implemented")
}
func (UnimplementedPlayerServer) GetTopAchievementsForGames(context.Context, *CPlayer_GetTopAchievementsForGames_Request) (*CPlayer_GetTopAchievementsForGames_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopAchievementsForGames not implemented")
}
func (UnimplementedPlayerServer) GetAchievementsProgress(context.Context, *CPlayer_GetAchievementsProgress_Request) (*CPlayer_GetAchievementsProgress_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementsProgress not implemented")
}
func (UnimplementedPlayerServer) GetGameAchievements(context.Context, *CPlayer_GetGameAchievements_Request) (*CPlayer_GetGameAchievements_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameAchievements not implemented")
}
func (UnimplementedPlayerServer) GetFavoriteBadge(context.Context, *CPlayer_GetFavoriteBadge_Request) (*CPlayer_GetFavoriteBadge_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteBadge not implemented")
}
func (UnimplementedPlayerServer) SetFavoriteBadge(context.Context, *CPlayer_SetFavoriteBadge_Request) (*CPlayer_SetFavoriteBadge_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFavoriteBadge not implemented")
}
func (UnimplementedPlayerServer) GetProfileCustomization(context.Context, *CPlayer_GetProfileCustomization_Request) (*CPlayer_GetProfileCustomization_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileCustomization not implemented")
}
func (UnimplementedPlayerServer) GetPurchasedProfileCustomizations(context.Context, *CPlayer_GetPurchasedProfileCustomizations_Request) (*CPlayer_GetPurchasedProfileCustomizations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedProfileCustomizations not implemented")
}
func (UnimplementedPlayerServer) GetPurchasedAndUpgradedProfileCustomizations(context.Context, *CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request) (*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedAndUpgradedProfileCustomizations not implemented")
}
func (UnimplementedPlayerServer) GetProfileThemesAvailable(context.Context, *CPlayer_GetProfileThemesAvailable_Request) (*CPlayer_GetProfileThemesAvailable_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileThemesAvailable not implemented")
}
func (UnimplementedPlayerServer) SetProfileTheme(context.Context, *CPlayer_SetProfileTheme_Request) (*CPlayer_SetProfileTheme_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileTheme not implemented")
}
func (UnimplementedPlayerServer) SetProfilePreferences(context.Context, *CPlayer_SetProfilePreferences_Request) (*CPlayer_SetProfilePreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfilePreferences not implemented")
}
func (UnimplementedPlayerServer) PostStatusToFriends(context.Context, *CPlayer_PostStatusToFriends_Request) (*CPlayer_PostStatusToFriends_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStatusToFriends not implemented")
}
func (UnimplementedPlayerServer) GetPostedStatus(context.Context, *CPlayer_GetPostedStatus_Request) (*CPlayer_GetPostedStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostedStatus not implemented")
}
func (UnimplementedPlayerServer) DeletePostedStatus(context.Context, *CPlayer_DeletePostedStatus_Request) (*CPlayer_DeletePostedStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostedStatus not implemented")
}
func (UnimplementedPlayerServer) ClientGetLastPlayedTimes(context.Context, *CPlayer_GetLastPlayedTimes_Request) (*CPlayer_GetLastPlayedTimes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetLastPlayedTimes not implemented")
}
func (UnimplementedPlayerServer) GetTimeSSAAccepted(context.Context, *CPlayer_GetTimeSSAAccepted_Request) (*CPlayer_GetTimeSSAAccepted_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeSSAAccepted not implemented")
}
func (UnimplementedPlayerServer) AcceptSSA(context.Context, *CPlayer_AcceptSSA_Request) (*CPlayer_AcceptSSA_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSSA not implemented")
}
func (UnimplementedPlayerServer) GetNicknameList(context.Context, *CPlayer_GetNicknameList_Request) (*CPlayer_GetNicknameList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNicknameList not implemented")
}
func (UnimplementedPlayerServer) GetPerFriendPreferences(context.Context, *CPlayer_GetPerFriendPreferences_Request) (*CPlayer_GetPerFriendPreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerFriendPreferences not implemented")
}
func (UnimplementedPlayerServer) SetPerFriendPreferences(context.Context, *CPlayer_SetPerFriendPreferences_Request) (*CPlayer_SetPerFriendPreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPerFriendPreferences not implemented")
}
func (UnimplementedPlayerServer) AddFriend(context.Context, *CPlayer_AddFriend_Request) (*CPlayer_AddFriend_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedPlayerServer) RemoveFriend(context.Context, *CPlayer_RemoveFriend_Request) (*CPlayer_RemoveFriend_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedPlayerServer) IgnoreFriend(context.Context, *CPlayer_IgnoreFriend_Request) (*CPlayer_IgnoreFriend_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreFriend not implemented")
}
func (UnimplementedPlayerServer) GetCommunityPreferences(context.Context, *CPlayer_GetCommunityPreferences_Request) (*CPlayer_GetCommunityPreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityPreferences not implemented")
}
func (UnimplementedPlayerServer) SetCommunityPreferences(context.Context, *CPlayer_SetCommunityPreferences_Request) (*CPlayer_SetCommunityPreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommunityPreferences not implemented")
}
func (UnimplementedPlayerServer) GetTextFilterWords(context.Context, *CPlayer_GetTextFilterWords_Request) (*CPlayer_GetTextFilterWords_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextFilterWords not implemented")
}
func (UnimplementedPlayerServer) GetNewSteamAnnouncementState(context.Context, *CPlayer_GetNewSteamAnnouncementState_Request) (*CPlayer_GetNewSteamAnnouncementState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewSteamAnnouncementState not implemented")
}
func (UnimplementedPlayerServer) UpdateSteamAnnouncementLastRead(context.Context, *CPlayer_UpdateSteamAnnouncementLastRead_Request) (*CPlayer_UpdateSteamAnnouncementLastRead_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSteamAnnouncementLastRead not implemented")
}
func (UnimplementedPlayerServer) GetPrivacySettings(context.Context, *CPlayer_GetPrivacySettings_Request) (*CPlayer_GetPrivacySettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivacySettings not implemented")
}
func (UnimplementedPlayerServer) GetDurationControl(context.Context, *CPlayer_GetDurationControl_Request) (*CPlayer_GetDurationControl_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDurationControl not implemented")
}
func (UnimplementedPlayerServer) RecordDisconnectedPlaytime(context.Context, *CPlayer_RecordDisconnectedPlaytime_Request) (*CPlayer_RecordDisconnectedPlaytime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDisconnectedPlaytime not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s grpc.ServiceRegistrar, srv PlayerServer) {
	s.RegisterService(&Player_ServiceDesc, srv)
}

func _Player_GetRecentPlaytimeSessionsForChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetRecentPlaytimeSessionsForChild_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetRecentPlaytimeSessionsForChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetRecentPlaytimeSessionsForChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetRecentPlaytimeSessionsForChild(ctx, req.(*CPlayer_GetRecentPlaytimeSessionsForChild_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPlayerLinkDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPlayerLinkDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPlayerLinkDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPlayerLinkDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPlayerLinkDetails(ctx, req.(*CPlayer_GetPlayerLinkDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetMutualFriendsForIncomingInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetMutualFriendsForIncomingInvites_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetMutualFriendsForIncomingInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetMutualFriendsForIncomingInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetMutualFriendsForIncomingInvites(ctx, req.(*CPlayer_GetMutualFriendsForIncomingInvites_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetOwnedGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetOwnedGames_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetOwnedGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetOwnedGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetOwnedGames(ctx, req.(*CPlayer_GetOwnedGames_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPlayNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPlayNext_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPlayNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPlayNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPlayNext(ctx, req.(*CPlayer_GetPlayNext_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetFriendsGameplayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetFriendsGameplayInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetFriendsGameplayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetFriendsGameplayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetFriendsGameplayInfo(ctx, req.(*CPlayer_GetFriendsGameplayInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetGameBadgeLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetGameBadgeLevels_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetGameBadgeLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetGameBadgeLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetGameBadgeLevels(ctx, req.(*CPlayer_GetGameBadgeLevels_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetProfileBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetProfileBackground_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetProfileBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetProfileBackground",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetProfileBackground(ctx, req.(*CPlayer_GetProfileBackground_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetProfileBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetProfileBackground_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetProfileBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetProfileBackground",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetProfileBackground(ctx, req.(*CPlayer_SetProfileBackground_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetMiniProfileBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetMiniProfileBackground_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetMiniProfileBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetMiniProfileBackground",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetMiniProfileBackground(ctx, req.(*CPlayer_GetMiniProfileBackground_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetMiniProfileBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetMiniProfileBackground_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetMiniProfileBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetMiniProfileBackground",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetMiniProfileBackground(ctx, req.(*CPlayer_SetMiniProfileBackground_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetAvatarFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetAvatarFrame_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAvatarFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetAvatarFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAvatarFrame(ctx, req.(*CPlayer_GetAvatarFrame_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetAvatarFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetAvatarFrame_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetAvatarFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetAvatarFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetAvatarFrame(ctx, req.(*CPlayer_SetAvatarFrame_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetAnimatedAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetAnimatedAvatar_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAnimatedAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetAnimatedAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAnimatedAvatar(ctx, req.(*CPlayer_GetAnimatedAvatar_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetAnimatedAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetAnimatedAvatar_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetAnimatedAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetAnimatedAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetAnimatedAvatar(ctx, req.(*CPlayer_SetAnimatedAvatar_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetSteamDeckKeyboardSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetSteamDeckKeyboardSkin_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetSteamDeckKeyboardSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetSteamDeckKeyboardSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetSteamDeckKeyboardSkin(ctx, req.(*CPlayer_GetSteamDeckKeyboardSkin_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetSteamDeckKeyboardSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetSteamDeckKeyboardSkin_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetSteamDeckKeyboardSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetSteamDeckKeyboardSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetSteamDeckKeyboardSkin(ctx, req.(*CPlayer_SetSteamDeckKeyboardSkin_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetProfileItemsOwned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetProfileItemsOwned_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetProfileItemsOwned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetProfileItemsOwned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetProfileItemsOwned(ctx, req.(*CPlayer_GetProfileItemsOwned_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetProfileItemsEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetProfileItemsEquipped_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetProfileItemsEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetProfileItemsEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetProfileItemsEquipped(ctx, req.(*CPlayer_GetProfileItemsEquipped_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetEquippedProfileItemFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetEquippedProfileItemFlags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetEquippedProfileItemFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetEquippedProfileItemFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetEquippedProfileItemFlags(ctx, req.(*CPlayer_SetEquippedProfileItemFlags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetEmoticonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetEmoticonList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetEmoticonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetEmoticonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetEmoticonList(ctx, req.(*CPlayer_GetEmoticonList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetCommunityBadgeProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetCommunityBadgeProgress_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetCommunityBadgeProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetCommunityBadgeProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetCommunityBadgeProgress(ctx, req.(*CPlayer_GetCommunityBadgeProgress_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetTopAchievementsForGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetTopAchievementsForGames_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetTopAchievementsForGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetTopAchievementsForGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetTopAchievementsForGames(ctx, req.(*CPlayer_GetTopAchievementsForGames_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetAchievementsProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetAchievementsProgress_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAchievementsProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetAchievementsProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAchievementsProgress(ctx, req.(*CPlayer_GetAchievementsProgress_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetGameAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetGameAchievements_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetGameAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetGameAchievements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetGameAchievements(ctx, req.(*CPlayer_GetGameAchievements_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetFavoriteBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetFavoriteBadge_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetFavoriteBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetFavoriteBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetFavoriteBadge(ctx, req.(*CPlayer_GetFavoriteBadge_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetFavoriteBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetFavoriteBadge_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetFavoriteBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetFavoriteBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetFavoriteBadge(ctx, req.(*CPlayer_SetFavoriteBadge_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetProfileCustomization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetProfileCustomization_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetProfileCustomization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetProfileCustomization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetProfileCustomization(ctx, req.(*CPlayer_GetProfileCustomization_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPurchasedProfileCustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPurchasedProfileCustomizations_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPurchasedProfileCustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPurchasedProfileCustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPurchasedProfileCustomizations(ctx, req.(*CPlayer_GetPurchasedProfileCustomizations_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPurchasedAndUpgradedProfileCustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPurchasedAndUpgradedProfileCustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPurchasedAndUpgradedProfileCustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPurchasedAndUpgradedProfileCustomizations(ctx, req.(*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetProfileThemesAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetProfileThemesAvailable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetProfileThemesAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetProfileThemesAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetProfileThemesAvailable(ctx, req.(*CPlayer_GetProfileThemesAvailable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetProfileTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetProfileTheme_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetProfileTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetProfileTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetProfileTheme(ctx, req.(*CPlayer_SetProfileTheme_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetProfilePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetProfilePreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetProfilePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetProfilePreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetProfilePreferences(ctx, req.(*CPlayer_SetProfilePreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PostStatusToFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_PostStatusToFriends_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PostStatusToFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/PostStatusToFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PostStatusToFriends(ctx, req.(*CPlayer_PostStatusToFriends_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPostedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPostedStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPostedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPostedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPostedStatus(ctx, req.(*CPlayer_GetPostedStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_DeletePostedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_DeletePostedStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).DeletePostedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/DeletePostedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).DeletePostedStatus(ctx, req.(*CPlayer_DeletePostedStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_ClientGetLastPlayedTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetLastPlayedTimes_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).ClientGetLastPlayedTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/ClientGetLastPlayedTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).ClientGetLastPlayedTimes(ctx, req.(*CPlayer_GetLastPlayedTimes_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetTimeSSAAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetTimeSSAAccepted_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetTimeSSAAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetTimeSSAAccepted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetTimeSSAAccepted(ctx, req.(*CPlayer_GetTimeSSAAccepted_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_AcceptSSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_AcceptSSA_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).AcceptSSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/AcceptSSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).AcceptSSA(ctx, req.(*CPlayer_AcceptSSA_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetNicknameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetNicknameList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetNicknameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetNicknameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetNicknameList(ctx, req.(*CPlayer_GetNicknameList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPerFriendPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPerFriendPreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPerFriendPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPerFriendPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPerFriendPreferences(ctx, req.(*CPlayer_GetPerFriendPreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetPerFriendPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetPerFriendPreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetPerFriendPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetPerFriendPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetPerFriendPreferences(ctx, req.(*CPlayer_SetPerFriendPreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_AddFriend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).AddFriend(ctx, req.(*CPlayer_AddFriend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_RemoveFriend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/RemoveFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).RemoveFriend(ctx, req.(*CPlayer_RemoveFriend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_IgnoreFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_IgnoreFriend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).IgnoreFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/IgnoreFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).IgnoreFriend(ctx, req.(*CPlayer_IgnoreFriend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetCommunityPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetCommunityPreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetCommunityPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetCommunityPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetCommunityPreferences(ctx, req.(*CPlayer_GetCommunityPreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetCommunityPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_SetCommunityPreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetCommunityPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/SetCommunityPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetCommunityPreferences(ctx, req.(*CPlayer_SetCommunityPreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetTextFilterWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetTextFilterWords_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetTextFilterWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetTextFilterWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetTextFilterWords(ctx, req.(*CPlayer_GetTextFilterWords_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetNewSteamAnnouncementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetNewSteamAnnouncementState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetNewSteamAnnouncementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetNewSteamAnnouncementState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetNewSteamAnnouncementState(ctx, req.(*CPlayer_GetNewSteamAnnouncementState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_UpdateSteamAnnouncementLastRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_UpdateSteamAnnouncementLastRead_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).UpdateSteamAnnouncementLastRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/UpdateSteamAnnouncementLastRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).UpdateSteamAnnouncementLastRead(ctx, req.(*CPlayer_UpdateSteamAnnouncementLastRead_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetPrivacySettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPrivacySettings(ctx, req.(*CPlayer_GetPrivacySettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetDurationControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_GetDurationControl_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetDurationControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetDurationControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetDurationControl(ctx, req.(*CPlayer_GetDurationControl_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_RecordDisconnectedPlaytime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_RecordDisconnectedPlaytime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).RecordDisconnectedPlaytime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/RecordDisconnectedPlaytime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).RecordDisconnectedPlaytime(ctx, req.(*CPlayer_RecordDisconnectedPlaytime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Player_ServiceDesc is the grpc.ServiceDesc for Player service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Player_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecentPlaytimeSessionsForChild",
			Handler:    _Player_GetRecentPlaytimeSessionsForChild_Handler,
		},
		{
			MethodName: "GetPlayerLinkDetails",
			Handler:    _Player_GetPlayerLinkDetails_Handler,
		},
		{
			MethodName: "GetMutualFriendsForIncomingInvites",
			Handler:    _Player_GetMutualFriendsForIncomingInvites_Handler,
		},
		{
			MethodName: "GetOwnedGames",
			Handler:    _Player_GetOwnedGames_Handler,
		},
		{
			MethodName: "GetPlayNext",
			Handler:    _Player_GetPlayNext_Handler,
		},
		{
			MethodName: "GetFriendsGameplayInfo",
			Handler:    _Player_GetFriendsGameplayInfo_Handler,
		},
		{
			MethodName: "GetGameBadgeLevels",
			Handler:    _Player_GetGameBadgeLevels_Handler,
		},
		{
			MethodName: "GetProfileBackground",
			Handler:    _Player_GetProfileBackground_Handler,
		},
		{
			MethodName: "SetProfileBackground",
			Handler:    _Player_SetProfileBackground_Handler,
		},
		{
			MethodName: "GetMiniProfileBackground",
			Handler:    _Player_GetMiniProfileBackground_Handler,
		},
		{
			MethodName: "SetMiniProfileBackground",
			Handler:    _Player_SetMiniProfileBackground_Handler,
		},
		{
			MethodName: "GetAvatarFrame",
			Handler:    _Player_GetAvatarFrame_Handler,
		},
		{
			MethodName: "SetAvatarFrame",
			Handler:    _Player_SetAvatarFrame_Handler,
		},
		{
			MethodName: "GetAnimatedAvatar",
			Handler:    _Player_GetAnimatedAvatar_Handler,
		},
		{
			MethodName: "SetAnimatedAvatar",
			Handler:    _Player_SetAnimatedAvatar_Handler,
		},
		{
			MethodName: "GetSteamDeckKeyboardSkin",
			Handler:    _Player_GetSteamDeckKeyboardSkin_Handler,
		},
		{
			MethodName: "SetSteamDeckKeyboardSkin",
			Handler:    _Player_SetSteamDeckKeyboardSkin_Handler,
		},
		{
			MethodName: "GetProfileItemsOwned",
			Handler:    _Player_GetProfileItemsOwned_Handler,
		},
		{
			MethodName: "GetProfileItemsEquipped",
			Handler:    _Player_GetProfileItemsEquipped_Handler,
		},
		{
			MethodName: "SetEquippedProfileItemFlags",
			Handler:    _Player_SetEquippedProfileItemFlags_Handler,
		},
		{
			MethodName: "GetEmoticonList",
			Handler:    _Player_GetEmoticonList_Handler,
		},
		{
			MethodName: "GetCommunityBadgeProgress",
			Handler:    _Player_GetCommunityBadgeProgress_Handler,
		},
		{
			MethodName: "GetTopAchievementsForGames",
			Handler:    _Player_GetTopAchievementsForGames_Handler,
		},
		{
			MethodName: "GetAchievementsProgress",
			Handler:    _Player_GetAchievementsProgress_Handler,
		},
		{
			MethodName: "GetGameAchievements",
			Handler:    _Player_GetGameAchievements_Handler,
		},
		{
			MethodName: "GetFavoriteBadge",
			Handler:    _Player_GetFavoriteBadge_Handler,
		},
		{
			MethodName: "SetFavoriteBadge",
			Handler:    _Player_SetFavoriteBadge_Handler,
		},
		{
			MethodName: "GetProfileCustomization",
			Handler:    _Player_GetProfileCustomization_Handler,
		},
		{
			MethodName: "GetPurchasedProfileCustomizations",
			Handler:    _Player_GetPurchasedProfileCustomizations_Handler,
		},
		{
			MethodName: "GetPurchasedAndUpgradedProfileCustomizations",
			Handler:    _Player_GetPurchasedAndUpgradedProfileCustomizations_Handler,
		},
		{
			MethodName: "GetProfileThemesAvailable",
			Handler:    _Player_GetProfileThemesAvailable_Handler,
		},
		{
			MethodName: "SetProfileTheme",
			Handler:    _Player_SetProfileTheme_Handler,
		},
		{
			MethodName: "SetProfilePreferences",
			Handler:    _Player_SetProfilePreferences_Handler,
		},
		{
			MethodName: "PostStatusToFriends",
			Handler:    _Player_PostStatusToFriends_Handler,
		},
		{
			MethodName: "GetPostedStatus",
			Handler:    _Player_GetPostedStatus_Handler,
		},
		{
			MethodName: "DeletePostedStatus",
			Handler:    _Player_DeletePostedStatus_Handler,
		},
		{
			MethodName: "ClientGetLastPlayedTimes",
			Handler:    _Player_ClientGetLastPlayedTimes_Handler,
		},
		{
			MethodName: "GetTimeSSAAccepted",
			Handler:    _Player_GetTimeSSAAccepted_Handler,
		},
		{
			MethodName: "AcceptSSA",
			Handler:    _Player_AcceptSSA_Handler,
		},
		{
			MethodName: "GetNicknameList",
			Handler:    _Player_GetNicknameList_Handler,
		},
		{
			MethodName: "GetPerFriendPreferences",
			Handler:    _Player_GetPerFriendPreferences_Handler,
		},
		{
			MethodName: "SetPerFriendPreferences",
			Handler:    _Player_SetPerFriendPreferences_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Player_AddFriend_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _Player_RemoveFriend_Handler,
		},
		{
			MethodName: "IgnoreFriend",
			Handler:    _Player_IgnoreFriend_Handler,
		},
		{
			MethodName: "GetCommunityPreferences",
			Handler:    _Player_GetCommunityPreferences_Handler,
		},
		{
			MethodName: "SetCommunityPreferences",
			Handler:    _Player_SetCommunityPreferences_Handler,
		},
		{
			MethodName: "GetTextFilterWords",
			Handler:    _Player_GetTextFilterWords_Handler,
		},
		{
			MethodName: "GetNewSteamAnnouncementState",
			Handler:    _Player_GetNewSteamAnnouncementState_Handler,
		},
		{
			MethodName: "UpdateSteamAnnouncementLastRead",
			Handler:    _Player_UpdateSteamAnnouncementLastRead_Handler,
		},
		{
			MethodName: "GetPrivacySettings",
			Handler:    _Player_GetPrivacySettings_Handler,
		},
		{
			MethodName: "GetDurationControl",
			Handler:    _Player_GetDurationControl_Handler,
		},
		{
			MethodName: "RecordDisconnectedPlaytime",
			Handler:    _Player_RecordDisconnectedPlaytime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_player.steamclient.proto",
}

// PlayerClientClient is the client API for PlayerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClientClient interface {
	NotifyLastPlayedTimes(ctx context.Context, in *CPlayer_LastPlayedTimes_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyFriendNicknameChanged(ctx context.Context, in *CPlayer_FriendNicknameChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyFriendEquippedProfileItemsChanged(ctx context.Context, in *CPlayer_FriendEquippedProfileItemsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyNewSteamAnnouncementState(ctx context.Context, in *CPlayer_NewSteamAnnouncementState_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyCommunityPreferencesChanged(ctx context.Context, in *CPlayer_CommunityPreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyTextFilterWordsChanged(ctx context.Context, in *CPlayer_TextFilterWordsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyPerFriendPreferencesChanged(ctx context.Context, in *CPlayer_PerFriendPreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyPrivacyPrivacySettingsChanged(ctx context.Context, in *CPlayer_PrivacySettingsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type playerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClientClient(cc grpc.ClientConnInterface) PlayerClientClient {
	return &playerClientClient{cc}
}

func (c *playerClientClient) NotifyLastPlayedTimes(ctx context.Context, in *CPlayer_LastPlayedTimes_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyLastPlayedTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyFriendNicknameChanged(ctx context.Context, in *CPlayer_FriendNicknameChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyFriendNicknameChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyFriendEquippedProfileItemsChanged(ctx context.Context, in *CPlayer_FriendEquippedProfileItemsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyFriendEquippedProfileItemsChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyNewSteamAnnouncementState(ctx context.Context, in *CPlayer_NewSteamAnnouncementState_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyNewSteamAnnouncementState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyCommunityPreferencesChanged(ctx context.Context, in *CPlayer_CommunityPreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyCommunityPreferencesChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyTextFilterWordsChanged(ctx context.Context, in *CPlayer_TextFilterWordsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyTextFilterWordsChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyPerFriendPreferencesChanged(ctx context.Context, in *CPlayer_PerFriendPreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyPerFriendPreferencesChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClientClient) NotifyPrivacyPrivacySettingsChanged(ctx context.Context, in *CPlayer_PrivacySettingsChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PlayerClient/NotifyPrivacyPrivacySettingsChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerClientServer is the server API for PlayerClient service.
// All implementations must embed UnimplementedPlayerClientServer
// for forward compatibility
type PlayerClientServer interface {
	NotifyLastPlayedTimes(context.Context, *CPlayer_LastPlayedTimes_Notification) (*NoResponse, error)
	NotifyFriendNicknameChanged(context.Context, *CPlayer_FriendNicknameChanged_Notification) (*NoResponse, error)
	NotifyFriendEquippedProfileItemsChanged(context.Context, *CPlayer_FriendEquippedProfileItemsChanged_Notification) (*NoResponse, error)
	NotifyNewSteamAnnouncementState(context.Context, *CPlayer_NewSteamAnnouncementState_Notification) (*NoResponse, error)
	NotifyCommunityPreferencesChanged(context.Context, *CPlayer_CommunityPreferencesChanged_Notification) (*NoResponse, error)
	NotifyTextFilterWordsChanged(context.Context, *CPlayer_TextFilterWordsChanged_Notification) (*NoResponse, error)
	NotifyPerFriendPreferencesChanged(context.Context, *CPlayer_PerFriendPreferencesChanged_Notification) (*NoResponse, error)
	NotifyPrivacyPrivacySettingsChanged(context.Context, *CPlayer_PrivacySettingsChanged_Notification) (*NoResponse, error)
	mustEmbedUnimplementedPlayerClientServer()
}

// UnimplementedPlayerClientServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerClientServer struct {
}

func (UnimplementedPlayerClientServer) NotifyLastPlayedTimes(context.Context, *CPlayer_LastPlayedTimes_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLastPlayedTimes not implemented")
}
func (UnimplementedPlayerClientServer) NotifyFriendNicknameChanged(context.Context, *CPlayer_FriendNicknameChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFriendNicknameChanged not implemented")
}
func (UnimplementedPlayerClientServer) NotifyFriendEquippedProfileItemsChanged(context.Context, *CPlayer_FriendEquippedProfileItemsChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFriendEquippedProfileItemsChanged not implemented")
}
func (UnimplementedPlayerClientServer) NotifyNewSteamAnnouncementState(context.Context, *CPlayer_NewSteamAnnouncementState_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNewSteamAnnouncementState not implemented")
}
func (UnimplementedPlayerClientServer) NotifyCommunityPreferencesChanged(context.Context, *CPlayer_CommunityPreferencesChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCommunityPreferencesChanged not implemented")
}
func (UnimplementedPlayerClientServer) NotifyTextFilterWordsChanged(context.Context, *CPlayer_TextFilterWordsChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTextFilterWordsChanged not implemented")
}
func (UnimplementedPlayerClientServer) NotifyPerFriendPreferencesChanged(context.Context, *CPlayer_PerFriendPreferencesChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPerFriendPreferencesChanged not implemented")
}
func (UnimplementedPlayerClientServer) NotifyPrivacyPrivacySettingsChanged(context.Context, *CPlayer_PrivacySettingsChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPrivacyPrivacySettingsChanged not implemented")
}
func (UnimplementedPlayerClientServer) mustEmbedUnimplementedPlayerClientServer() {}

// UnsafePlayerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerClientServer will
// result in compilation errors.
type UnsafePlayerClientServer interface {
	mustEmbedUnimplementedPlayerClientServer()
}

func RegisterPlayerClientServer(s grpc.ServiceRegistrar, srv PlayerClientServer) {
	s.RegisterService(&PlayerClient_ServiceDesc, srv)
}

func _PlayerClient_NotifyLastPlayedTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_LastPlayedTimes_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyLastPlayedTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyLastPlayedTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyLastPlayedTimes(ctx, req.(*CPlayer_LastPlayedTimes_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyFriendNicknameChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_FriendNicknameChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyFriendNicknameChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyFriendNicknameChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyFriendNicknameChanged(ctx, req.(*CPlayer_FriendNicknameChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyFriendEquippedProfileItemsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_FriendEquippedProfileItemsChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyFriendEquippedProfileItemsChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyFriendEquippedProfileItemsChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyFriendEquippedProfileItemsChanged(ctx, req.(*CPlayer_FriendEquippedProfileItemsChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyNewSteamAnnouncementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_NewSteamAnnouncementState_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyNewSteamAnnouncementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyNewSteamAnnouncementState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyNewSteamAnnouncementState(ctx, req.(*CPlayer_NewSteamAnnouncementState_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyCommunityPreferencesChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_CommunityPreferencesChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyCommunityPreferencesChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyCommunityPreferencesChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyCommunityPreferencesChanged(ctx, req.(*CPlayer_CommunityPreferencesChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyTextFilterWordsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_TextFilterWordsChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyTextFilterWordsChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyTextFilterWordsChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyTextFilterWordsChanged(ctx, req.(*CPlayer_TextFilterWordsChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyPerFriendPreferencesChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_PerFriendPreferencesChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyPerFriendPreferencesChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyPerFriendPreferencesChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyPerFriendPreferencesChanged(ctx, req.(*CPlayer_PerFriendPreferencesChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerClient_NotifyPrivacyPrivacySettingsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayer_PrivacySettingsChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerClientServer).NotifyPrivacyPrivacySettingsChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PlayerClient/NotifyPrivacyPrivacySettingsChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerClientServer).NotifyPrivacyPrivacySettingsChanged(ctx, req.(*CPlayer_PrivacySettingsChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerClient_ServiceDesc is the grpc.ServiceDesc for PlayerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlayerClient",
	HandlerType: (*PlayerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyLastPlayedTimes",
			Handler:    _PlayerClient_NotifyLastPlayedTimes_Handler,
		},
		{
			MethodName: "NotifyFriendNicknameChanged",
			Handler:    _PlayerClient_NotifyFriendNicknameChanged_Handler,
		},
		{
			MethodName: "NotifyFriendEquippedProfileItemsChanged",
			Handler:    _PlayerClient_NotifyFriendEquippedProfileItemsChanged_Handler,
		},
		{
			MethodName: "NotifyNewSteamAnnouncementState",
			Handler:    _PlayerClient_NotifyNewSteamAnnouncementState_Handler,
		},
		{
			MethodName: "NotifyCommunityPreferencesChanged",
			Handler:    _PlayerClient_NotifyCommunityPreferencesChanged_Handler,
		},
		{
			MethodName: "NotifyTextFilterWordsChanged",
			Handler:    _PlayerClient_NotifyTextFilterWordsChanged_Handler,
		},
		{
			MethodName: "NotifyPerFriendPreferencesChanged",
			Handler:    _PlayerClient_NotifyPerFriendPreferencesChanged_Handler,
		},
		{
			MethodName: "NotifyPrivacyPrivacySettingsChanged",
			Handler:    _PlayerClient_NotifyPrivacyPrivacySettingsChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_player.steamclient.proto",
}
