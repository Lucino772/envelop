// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_publishedfile.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublishedFileClient is the client API for PublishedFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishedFileClient interface {
	Vote(ctx context.Context, in *CPublishedFile_Vote_Request, opts ...grpc.CallOption) (*CPublishedFile_Vote_Response, error)
	Subscribe(ctx context.Context, in *CPublishedFile_Subscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_Subscribe_Response, error)
	Unsubscribe(ctx context.Context, in *CPublishedFile_Unsubscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_Unsubscribe_Response, error)
	CanSubscribe(ctx context.Context, in *CPublishedFile_CanSubscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_CanSubscribe_Response, error)
	GetSubSectionData(ctx context.Context, in *CPublishedFile_GetSubSectionData_Request, opts ...grpc.CallOption) (*CPublishedFile_GetSubSectionData_Response, error)
	Publish(ctx context.Context, in *CPublishedFile_Publish_Request, opts ...grpc.CallOption) (*CPublishedFile_Publish_Response, error)
	GetDetails(ctx context.Context, in *CPublishedFile_GetDetails_Request, opts ...grpc.CallOption) (*CPublishedFile_GetDetails_Response, error)
	GetItemInfo(ctx context.Context, in *CPublishedFile_GetItemInfo_Request, opts ...grpc.CallOption) (*CPublishedFile_GetItemInfo_Response, error)
	GetUserFiles(ctx context.Context, in *CPublishedFile_GetUserFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserFiles_Response, error)
	GetUserFileCount(ctx context.Context, in *CPublishedFile_GetUserFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserFiles_Response, error)
	AreFilesInSubscriptionList(ctx context.Context, in *CPublishedFile_AreFilesInSubscriptionList_Request, opts ...grpc.CallOption) (*CPublishedFile_AreFilesInSubscriptionList_Response, error)
	Update(ctx context.Context, in *CPublishedFile_Update_Request, opts ...grpc.CallOption) (*CPublishedFile_Update_Response, error)
	Delete(ctx context.Context, in *CPublishedFile_Delete_Request, opts ...grpc.CallOption) (*CPublishedFile_Delete_Response, error)
	GetChangeHistoryEntry(ctx context.Context, in *CPublishedFile_GetChangeHistoryEntry_Request, opts ...grpc.CallOption) (*CPublishedFile_GetChangeHistoryEntry_Response, error)
	GetChangeHistory(ctx context.Context, in *CPublishedFile_GetChangeHistory_Request, opts ...grpc.CallOption) (*CPublishedFile_GetChangeHistory_Response, error)
	RefreshVotingQueue(ctx context.Context, in *CPublishedFile_RefreshVotingQueue_Request, opts ...grpc.CallOption) (*CPublishedFile_RefreshVotingQueue_Response, error)
	QueryFiles(ctx context.Context, in *CPublishedFile_QueryFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_QueryFiles_Response, error)
	AddAppRelationship(ctx context.Context, in *CPublishedFile_AddAppRelationship_Request, opts ...grpc.CallOption) (*CPublishedFile_AddAppRelationship_Response, error)
	RemoveAppRelationship(ctx context.Context, in *CPublishedFile_RemoveAppRelationship_Request, opts ...grpc.CallOption) (*CPublishedFile_RemoveAppRelationship_Response, error)
	GetAppRelationships(ctx context.Context, in *CPublishedFile_GetAppRelationships_Request, opts ...grpc.CallOption) (*CPublishedFile_GetAppRelationships_Response, error)
	GetAppRelationshipsBatched(ctx context.Context, in *CPublishedFile_GetAppRelationshipsBatched_Request, opts ...grpc.CallOption) (*CPublishedFile_GetAppRelationshipsBatched_Response, error)
	StartPlaytimeTracking(ctx context.Context, in *CPublishedFile_StartPlaytimeTracking_Request, opts ...grpc.CallOption) (*CPublishedFile_StartPlaytimeTracking_Response, error)
	StopPlaytimeTracking(ctx context.Context, in *CPublishedFile_StopPlaytimeTracking_Request, opts ...grpc.CallOption) (*CPublishedFile_StopPlaytimeTracking_Response, error)
	StopPlaytimeTrackingForAllAppItems(ctx context.Context, in *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, opts ...grpc.CallOption) (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, error)
	SetPlaytimeForControllerConfigs(ctx context.Context, in *CPublishedFile_SetPlaytimeForControllerConfigs_Request, opts ...grpc.CallOption) (*CPublishedFile_SetPlaytimeForControllerConfigs_Response, error)
	AddChild(ctx context.Context, in *CPublishedFile_AddChild_Request, opts ...grpc.CallOption) (*CPublishedFile_AddChild_Response, error)
	RemoveChild(ctx context.Context, in *CPublishedFile_RemoveChild_Request, opts ...grpc.CallOption) (*CPublishedFile_RemoveChild_Response, error)
	SetCollectionChildren(ctx context.Context, in *CPublishedFile_SetCollectionChildren_Request, opts ...grpc.CallOption) (*CPublishedFile_SetCollectionChildren_Response, error)
	SetSubscriptionListFromCollection(ctx context.Context, in *CPublishedFile_SetSubscriptionListFromCollection_Request, opts ...grpc.CallOption) (*CPublishedFile_SetSubscriptionListFromCollection_Response, error)
	GetUserVoteSummary(ctx context.Context, in *CPublishedFile_GetUserVoteSummary_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserVoteSummary_Response, error)
	GetItemChanges(ctx context.Context, in *CPublishedFile_GetItemChanges_Request, opts ...grpc.CallOption) (*CPublishedFile_GetItemChanges_Response, error)
	GetContentDescriptors(ctx context.Context, in *CPublishedFile_GetContentDescriptors_Request, opts ...grpc.CallOption) (*CPublishedFile_GetContentDescriptors_Response, error)
	UpdateContentDescriptors(ctx context.Context, in *CPublishedFile_UpdateContentDescriptors_Request, opts ...grpc.CallOption) (*CPublishedFile_UpdateContentDescriptors_Response, error)
}

type publishedFileClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishedFileClient(cc grpc.ClientConnInterface) PublishedFileClient {
	return &publishedFileClient{cc}
}

func (c *publishedFileClient) Vote(ctx context.Context, in *CPublishedFile_Vote_Request, opts ...grpc.CallOption) (*CPublishedFile_Vote_Response, error) {
	out := new(CPublishedFile_Vote_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) Subscribe(ctx context.Context, in *CPublishedFile_Subscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_Subscribe_Response, error) {
	out := new(CPublishedFile_Subscribe_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) Unsubscribe(ctx context.Context, in *CPublishedFile_Unsubscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_Unsubscribe_Response, error) {
	out := new(CPublishedFile_Unsubscribe_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) CanSubscribe(ctx context.Context, in *CPublishedFile_CanSubscribe_Request, opts ...grpc.CallOption) (*CPublishedFile_CanSubscribe_Response, error) {
	out := new(CPublishedFile_CanSubscribe_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/CanSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetSubSectionData(ctx context.Context, in *CPublishedFile_GetSubSectionData_Request, opts ...grpc.CallOption) (*CPublishedFile_GetSubSectionData_Response, error) {
	out := new(CPublishedFile_GetSubSectionData_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetSubSectionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) Publish(ctx context.Context, in *CPublishedFile_Publish_Request, opts ...grpc.CallOption) (*CPublishedFile_Publish_Response, error) {
	out := new(CPublishedFile_Publish_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetDetails(ctx context.Context, in *CPublishedFile_GetDetails_Request, opts ...grpc.CallOption) (*CPublishedFile_GetDetails_Response, error) {
	out := new(CPublishedFile_GetDetails_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetItemInfo(ctx context.Context, in *CPublishedFile_GetItemInfo_Request, opts ...grpc.CallOption) (*CPublishedFile_GetItemInfo_Response, error) {
	out := new(CPublishedFile_GetItemInfo_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetItemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetUserFiles(ctx context.Context, in *CPublishedFile_GetUserFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserFiles_Response, error) {
	out := new(CPublishedFile_GetUserFiles_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetUserFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetUserFileCount(ctx context.Context, in *CPublishedFile_GetUserFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserFiles_Response, error) {
	out := new(CPublishedFile_GetUserFiles_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetUserFileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) AreFilesInSubscriptionList(ctx context.Context, in *CPublishedFile_AreFilesInSubscriptionList_Request, opts ...grpc.CallOption) (*CPublishedFile_AreFilesInSubscriptionList_Response, error) {
	out := new(CPublishedFile_AreFilesInSubscriptionList_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/AreFilesInSubscriptionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) Update(ctx context.Context, in *CPublishedFile_Update_Request, opts ...grpc.CallOption) (*CPublishedFile_Update_Response, error) {
	out := new(CPublishedFile_Update_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) Delete(ctx context.Context, in *CPublishedFile_Delete_Request, opts ...grpc.CallOption) (*CPublishedFile_Delete_Response, error) {
	out := new(CPublishedFile_Delete_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetChangeHistoryEntry(ctx context.Context, in *CPublishedFile_GetChangeHistoryEntry_Request, opts ...grpc.CallOption) (*CPublishedFile_GetChangeHistoryEntry_Response, error) {
	out := new(CPublishedFile_GetChangeHistoryEntry_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetChangeHistoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetChangeHistory(ctx context.Context, in *CPublishedFile_GetChangeHistory_Request, opts ...grpc.CallOption) (*CPublishedFile_GetChangeHistory_Response, error) {
	out := new(CPublishedFile_GetChangeHistory_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetChangeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) RefreshVotingQueue(ctx context.Context, in *CPublishedFile_RefreshVotingQueue_Request, opts ...grpc.CallOption) (*CPublishedFile_RefreshVotingQueue_Response, error) {
	out := new(CPublishedFile_RefreshVotingQueue_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/RefreshVotingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) QueryFiles(ctx context.Context, in *CPublishedFile_QueryFiles_Request, opts ...grpc.CallOption) (*CPublishedFile_QueryFiles_Response, error) {
	out := new(CPublishedFile_QueryFiles_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/QueryFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) AddAppRelationship(ctx context.Context, in *CPublishedFile_AddAppRelationship_Request, opts ...grpc.CallOption) (*CPublishedFile_AddAppRelationship_Response, error) {
	out := new(CPublishedFile_AddAppRelationship_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/AddAppRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) RemoveAppRelationship(ctx context.Context, in *CPublishedFile_RemoveAppRelationship_Request, opts ...grpc.CallOption) (*CPublishedFile_RemoveAppRelationship_Response, error) {
	out := new(CPublishedFile_RemoveAppRelationship_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/RemoveAppRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetAppRelationships(ctx context.Context, in *CPublishedFile_GetAppRelationships_Request, opts ...grpc.CallOption) (*CPublishedFile_GetAppRelationships_Response, error) {
	out := new(CPublishedFile_GetAppRelationships_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetAppRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetAppRelationshipsBatched(ctx context.Context, in *CPublishedFile_GetAppRelationshipsBatched_Request, opts ...grpc.CallOption) (*CPublishedFile_GetAppRelationshipsBatched_Response, error) {
	out := new(CPublishedFile_GetAppRelationshipsBatched_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetAppRelationshipsBatched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) StartPlaytimeTracking(ctx context.Context, in *CPublishedFile_StartPlaytimeTracking_Request, opts ...grpc.CallOption) (*CPublishedFile_StartPlaytimeTracking_Response, error) {
	out := new(CPublishedFile_StartPlaytimeTracking_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/StartPlaytimeTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) StopPlaytimeTracking(ctx context.Context, in *CPublishedFile_StopPlaytimeTracking_Request, opts ...grpc.CallOption) (*CPublishedFile_StopPlaytimeTracking_Response, error) {
	out := new(CPublishedFile_StopPlaytimeTracking_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/StopPlaytimeTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) StopPlaytimeTrackingForAllAppItems(ctx context.Context, in *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, opts ...grpc.CallOption) (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, error) {
	out := new(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/StopPlaytimeTrackingForAllAppItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) SetPlaytimeForControllerConfigs(ctx context.Context, in *CPublishedFile_SetPlaytimeForControllerConfigs_Request, opts ...grpc.CallOption) (*CPublishedFile_SetPlaytimeForControllerConfigs_Response, error) {
	out := new(CPublishedFile_SetPlaytimeForControllerConfigs_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/SetPlaytimeForControllerConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) AddChild(ctx context.Context, in *CPublishedFile_AddChild_Request, opts ...grpc.CallOption) (*CPublishedFile_AddChild_Response, error) {
	out := new(CPublishedFile_AddChild_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/AddChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) RemoveChild(ctx context.Context, in *CPublishedFile_RemoveChild_Request, opts ...grpc.CallOption) (*CPublishedFile_RemoveChild_Response, error) {
	out := new(CPublishedFile_RemoveChild_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/RemoveChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) SetCollectionChildren(ctx context.Context, in *CPublishedFile_SetCollectionChildren_Request, opts ...grpc.CallOption) (*CPublishedFile_SetCollectionChildren_Response, error) {
	out := new(CPublishedFile_SetCollectionChildren_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/SetCollectionChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) SetSubscriptionListFromCollection(ctx context.Context, in *CPublishedFile_SetSubscriptionListFromCollection_Request, opts ...grpc.CallOption) (*CPublishedFile_SetSubscriptionListFromCollection_Response, error) {
	out := new(CPublishedFile_SetSubscriptionListFromCollection_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/SetSubscriptionListFromCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetUserVoteSummary(ctx context.Context, in *CPublishedFile_GetUserVoteSummary_Request, opts ...grpc.CallOption) (*CPublishedFile_GetUserVoteSummary_Response, error) {
	out := new(CPublishedFile_GetUserVoteSummary_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetUserVoteSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetItemChanges(ctx context.Context, in *CPublishedFile_GetItemChanges_Request, opts ...grpc.CallOption) (*CPublishedFile_GetItemChanges_Response, error) {
	out := new(CPublishedFile_GetItemChanges_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetItemChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) GetContentDescriptors(ctx context.Context, in *CPublishedFile_GetContentDescriptors_Request, opts ...grpc.CallOption) (*CPublishedFile_GetContentDescriptors_Response, error) {
	out := new(CPublishedFile_GetContentDescriptors_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/GetContentDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClient) UpdateContentDescriptors(ctx context.Context, in *CPublishedFile_UpdateContentDescriptors_Request, opts ...grpc.CallOption) (*CPublishedFile_UpdateContentDescriptors_Response, error) {
	out := new(CPublishedFile_UpdateContentDescriptors_Response)
	err := c.cc.Invoke(ctx, "/PublishedFile/UpdateContentDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishedFileServer is the server API for PublishedFile service.
// All implementations must embed UnimplementedPublishedFileServer
// for forward compatibility
type PublishedFileServer interface {
	Vote(context.Context, *CPublishedFile_Vote_Request) (*CPublishedFile_Vote_Response, error)
	Subscribe(context.Context, *CPublishedFile_Subscribe_Request) (*CPublishedFile_Subscribe_Response, error)
	Unsubscribe(context.Context, *CPublishedFile_Unsubscribe_Request) (*CPublishedFile_Unsubscribe_Response, error)
	CanSubscribe(context.Context, *CPublishedFile_CanSubscribe_Request) (*CPublishedFile_CanSubscribe_Response, error)
	GetSubSectionData(context.Context, *CPublishedFile_GetSubSectionData_Request) (*CPublishedFile_GetSubSectionData_Response, error)
	Publish(context.Context, *CPublishedFile_Publish_Request) (*CPublishedFile_Publish_Response, error)
	GetDetails(context.Context, *CPublishedFile_GetDetails_Request) (*CPublishedFile_GetDetails_Response, error)
	GetItemInfo(context.Context, *CPublishedFile_GetItemInfo_Request) (*CPublishedFile_GetItemInfo_Response, error)
	GetUserFiles(context.Context, *CPublishedFile_GetUserFiles_Request) (*CPublishedFile_GetUserFiles_Response, error)
	GetUserFileCount(context.Context, *CPublishedFile_GetUserFiles_Request) (*CPublishedFile_GetUserFiles_Response, error)
	AreFilesInSubscriptionList(context.Context, *CPublishedFile_AreFilesInSubscriptionList_Request) (*CPublishedFile_AreFilesInSubscriptionList_Response, error)
	Update(context.Context, *CPublishedFile_Update_Request) (*CPublishedFile_Update_Response, error)
	Delete(context.Context, *CPublishedFile_Delete_Request) (*CPublishedFile_Delete_Response, error)
	GetChangeHistoryEntry(context.Context, *CPublishedFile_GetChangeHistoryEntry_Request) (*CPublishedFile_GetChangeHistoryEntry_Response, error)
	GetChangeHistory(context.Context, *CPublishedFile_GetChangeHistory_Request) (*CPublishedFile_GetChangeHistory_Response, error)
	RefreshVotingQueue(context.Context, *CPublishedFile_RefreshVotingQueue_Request) (*CPublishedFile_RefreshVotingQueue_Response, error)
	QueryFiles(context.Context, *CPublishedFile_QueryFiles_Request) (*CPublishedFile_QueryFiles_Response, error)
	AddAppRelationship(context.Context, *CPublishedFile_AddAppRelationship_Request) (*CPublishedFile_AddAppRelationship_Response, error)
	RemoveAppRelationship(context.Context, *CPublishedFile_RemoveAppRelationship_Request) (*CPublishedFile_RemoveAppRelationship_Response, error)
	GetAppRelationships(context.Context, *CPublishedFile_GetAppRelationships_Request) (*CPublishedFile_GetAppRelationships_Response, error)
	GetAppRelationshipsBatched(context.Context, *CPublishedFile_GetAppRelationshipsBatched_Request) (*CPublishedFile_GetAppRelationshipsBatched_Response, error)
	StartPlaytimeTracking(context.Context, *CPublishedFile_StartPlaytimeTracking_Request) (*CPublishedFile_StartPlaytimeTracking_Response, error)
	StopPlaytimeTracking(context.Context, *CPublishedFile_StopPlaytimeTracking_Request) (*CPublishedFile_StopPlaytimeTracking_Response, error)
	StopPlaytimeTrackingForAllAppItems(context.Context, *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, error)
	SetPlaytimeForControllerConfigs(context.Context, *CPublishedFile_SetPlaytimeForControllerConfigs_Request) (*CPublishedFile_SetPlaytimeForControllerConfigs_Response, error)
	AddChild(context.Context, *CPublishedFile_AddChild_Request) (*CPublishedFile_AddChild_Response, error)
	RemoveChild(context.Context, *CPublishedFile_RemoveChild_Request) (*CPublishedFile_RemoveChild_Response, error)
	SetCollectionChildren(context.Context, *CPublishedFile_SetCollectionChildren_Request) (*CPublishedFile_SetCollectionChildren_Response, error)
	SetSubscriptionListFromCollection(context.Context, *CPublishedFile_SetSubscriptionListFromCollection_Request) (*CPublishedFile_SetSubscriptionListFromCollection_Response, error)
	GetUserVoteSummary(context.Context, *CPublishedFile_GetUserVoteSummary_Request) (*CPublishedFile_GetUserVoteSummary_Response, error)
	GetItemChanges(context.Context, *CPublishedFile_GetItemChanges_Request) (*CPublishedFile_GetItemChanges_Response, error)
	GetContentDescriptors(context.Context, *CPublishedFile_GetContentDescriptors_Request) (*CPublishedFile_GetContentDescriptors_Response, error)
	UpdateContentDescriptors(context.Context, *CPublishedFile_UpdateContentDescriptors_Request) (*CPublishedFile_UpdateContentDescriptors_Response, error)
	mustEmbedUnimplementedPublishedFileServer()
}

// UnimplementedPublishedFileServer must be embedded to have forward compatible implementations.
type UnimplementedPublishedFileServer struct {
}

func (UnimplementedPublishedFileServer) Vote(context.Context, *CPublishedFile_Vote_Request) (*CPublishedFile_Vote_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedPublishedFileServer) Subscribe(context.Context, *CPublishedFile_Subscribe_Request) (*CPublishedFile_Subscribe_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublishedFileServer) Unsubscribe(context.Context, *CPublishedFile_Unsubscribe_Request) (*CPublishedFile_Unsubscribe_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedPublishedFileServer) CanSubscribe(context.Context, *CPublishedFile_CanSubscribe_Request) (*CPublishedFile_CanSubscribe_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSubscribe not implemented")
}
func (UnimplementedPublishedFileServer) GetSubSectionData(context.Context, *CPublishedFile_GetSubSectionData_Request) (*CPublishedFile_GetSubSectionData_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubSectionData not implemented")
}
func (UnimplementedPublishedFileServer) Publish(context.Context, *CPublishedFile_Publish_Request) (*CPublishedFile_Publish_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublishedFileServer) GetDetails(context.Context, *CPublishedFile_GetDetails_Request) (*CPublishedFile_GetDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedPublishedFileServer) GetItemInfo(context.Context, *CPublishedFile_GetItemInfo_Request) (*CPublishedFile_GetItemInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemInfo not implemented")
}
func (UnimplementedPublishedFileServer) GetUserFiles(context.Context, *CPublishedFile_GetUserFiles_Request) (*CPublishedFile_GetUserFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFiles not implemented")
}
func (UnimplementedPublishedFileServer) GetUserFileCount(context.Context, *CPublishedFile_GetUserFiles_Request) (*CPublishedFile_GetUserFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileCount not implemented")
}
func (UnimplementedPublishedFileServer) AreFilesInSubscriptionList(context.Context, *CPublishedFile_AreFilesInSubscriptionList_Request) (*CPublishedFile_AreFilesInSubscriptionList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreFilesInSubscriptionList not implemented")
}
func (UnimplementedPublishedFileServer) Update(context.Context, *CPublishedFile_Update_Request) (*CPublishedFile_Update_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPublishedFileServer) Delete(context.Context, *CPublishedFile_Delete_Request) (*CPublishedFile_Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublishedFileServer) GetChangeHistoryEntry(context.Context, *CPublishedFile_GetChangeHistoryEntry_Request) (*CPublishedFile_GetChangeHistoryEntry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeHistoryEntry not implemented")
}
func (UnimplementedPublishedFileServer) GetChangeHistory(context.Context, *CPublishedFile_GetChangeHistory_Request) (*CPublishedFile_GetChangeHistory_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeHistory not implemented")
}
func (UnimplementedPublishedFileServer) RefreshVotingQueue(context.Context, *CPublishedFile_RefreshVotingQueue_Request) (*CPublishedFile_RefreshVotingQueue_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVotingQueue not implemented")
}
func (UnimplementedPublishedFileServer) QueryFiles(context.Context, *CPublishedFile_QueryFiles_Request) (*CPublishedFile_QueryFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFiles not implemented")
}
func (UnimplementedPublishedFileServer) AddAppRelationship(context.Context, *CPublishedFile_AddAppRelationship_Request) (*CPublishedFile_AddAppRelationship_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppRelationship not implemented")
}
func (UnimplementedPublishedFileServer) RemoveAppRelationship(context.Context, *CPublishedFile_RemoveAppRelationship_Request) (*CPublishedFile_RemoveAppRelationship_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppRelationship not implemented")
}
func (UnimplementedPublishedFileServer) GetAppRelationships(context.Context, *CPublishedFile_GetAppRelationships_Request) (*CPublishedFile_GetAppRelationships_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRelationships not implemented")
}
func (UnimplementedPublishedFileServer) GetAppRelationshipsBatched(context.Context, *CPublishedFile_GetAppRelationshipsBatched_Request) (*CPublishedFile_GetAppRelationshipsBatched_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRelationshipsBatched not implemented")
}
func (UnimplementedPublishedFileServer) StartPlaytimeTracking(context.Context, *CPublishedFile_StartPlaytimeTracking_Request) (*CPublishedFile_StartPlaytimeTracking_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlaytimeTracking not implemented")
}
func (UnimplementedPublishedFileServer) StopPlaytimeTracking(context.Context, *CPublishedFile_StopPlaytimeTracking_Request) (*CPublishedFile_StopPlaytimeTracking_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlaytimeTracking not implemented")
}
func (UnimplementedPublishedFileServer) StopPlaytimeTrackingForAllAppItems(context.Context, *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlaytimeTrackingForAllAppItems not implemented")
}
func (UnimplementedPublishedFileServer) SetPlaytimeForControllerConfigs(context.Context, *CPublishedFile_SetPlaytimeForControllerConfigs_Request) (*CPublishedFile_SetPlaytimeForControllerConfigs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlaytimeForControllerConfigs not implemented")
}
func (UnimplementedPublishedFileServer) AddChild(context.Context, *CPublishedFile_AddChild_Request) (*CPublishedFile_AddChild_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChild not implemented")
}
func (UnimplementedPublishedFileServer) RemoveChild(context.Context, *CPublishedFile_RemoveChild_Request) (*CPublishedFile_RemoveChild_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChild not implemented")
}
func (UnimplementedPublishedFileServer) SetCollectionChildren(context.Context, *CPublishedFile_SetCollectionChildren_Request) (*CPublishedFile_SetCollectionChildren_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCollectionChildren not implemented")
}
func (UnimplementedPublishedFileServer) SetSubscriptionListFromCollection(context.Context, *CPublishedFile_SetSubscriptionListFromCollection_Request) (*CPublishedFile_SetSubscriptionListFromCollection_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubscriptionListFromCollection not implemented")
}
func (UnimplementedPublishedFileServer) GetUserVoteSummary(context.Context, *CPublishedFile_GetUserVoteSummary_Request) (*CPublishedFile_GetUserVoteSummary_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVoteSummary not implemented")
}
func (UnimplementedPublishedFileServer) GetItemChanges(context.Context, *CPublishedFile_GetItemChanges_Request) (*CPublishedFile_GetItemChanges_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemChanges not implemented")
}
func (UnimplementedPublishedFileServer) GetContentDescriptors(context.Context, *CPublishedFile_GetContentDescriptors_Request) (*CPublishedFile_GetContentDescriptors_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentDescriptors not implemented")
}
func (UnimplementedPublishedFileServer) UpdateContentDescriptors(context.Context, *CPublishedFile_UpdateContentDescriptors_Request) (*CPublishedFile_UpdateContentDescriptors_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContentDescriptors not implemented")
}
func (UnimplementedPublishedFileServer) mustEmbedUnimplementedPublishedFileServer() {}

// UnsafePublishedFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishedFileServer will
// result in compilation errors.
type UnsafePublishedFileServer interface {
	mustEmbedUnimplementedPublishedFileServer()
}

func RegisterPublishedFileServer(s grpc.ServiceRegistrar, srv PublishedFileServer) {
	s.RegisterService(&PublishedFile_ServiceDesc, srv)
}

func _PublishedFile_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Vote_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Vote(ctx, req.(*CPublishedFile_Vote_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Subscribe_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Subscribe(ctx, req.(*CPublishedFile_Subscribe_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Unsubscribe_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Unsubscribe(ctx, req.(*CPublishedFile_Unsubscribe_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_CanSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_CanSubscribe_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).CanSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/CanSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).CanSubscribe(ctx, req.(*CPublishedFile_CanSubscribe_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetSubSectionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetSubSectionData_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetSubSectionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetSubSectionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetSubSectionData(ctx, req.(*CPublishedFile_GetSubSectionData_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Publish_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Publish(ctx, req.(*CPublishedFile_Publish_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetDetails(ctx, req.(*CPublishedFile_GetDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetItemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetItemInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetItemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetItemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetItemInfo(ctx, req.(*CPublishedFile_GetItemInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetUserFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetUserFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetUserFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetUserFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetUserFiles(ctx, req.(*CPublishedFile_GetUserFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetUserFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetUserFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetUserFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetUserFileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetUserFileCount(ctx, req.(*CPublishedFile_GetUserFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_AreFilesInSubscriptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_AreFilesInSubscriptionList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).AreFilesInSubscriptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/AreFilesInSubscriptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).AreFilesInSubscriptionList(ctx, req.(*CPublishedFile_AreFilesInSubscriptionList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Update_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Update(ctx, req.(*CPublishedFile_Update_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).Delete(ctx, req.(*CPublishedFile_Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetChangeHistoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetChangeHistoryEntry_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetChangeHistoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetChangeHistoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetChangeHistoryEntry(ctx, req.(*CPublishedFile_GetChangeHistoryEntry_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetChangeHistory_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetChangeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetChangeHistory(ctx, req.(*CPublishedFile_GetChangeHistory_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_RefreshVotingQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_RefreshVotingQueue_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).RefreshVotingQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/RefreshVotingQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).RefreshVotingQueue(ctx, req.(*CPublishedFile_RefreshVotingQueue_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_QueryFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_QueryFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).QueryFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/QueryFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).QueryFiles(ctx, req.(*CPublishedFile_QueryFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_AddAppRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_AddAppRelationship_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).AddAppRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/AddAppRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).AddAppRelationship(ctx, req.(*CPublishedFile_AddAppRelationship_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_RemoveAppRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_RemoveAppRelationship_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).RemoveAppRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/RemoveAppRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).RemoveAppRelationship(ctx, req.(*CPublishedFile_RemoveAppRelationship_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetAppRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetAppRelationships_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetAppRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetAppRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetAppRelationships(ctx, req.(*CPublishedFile_GetAppRelationships_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetAppRelationshipsBatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetAppRelationshipsBatched_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetAppRelationshipsBatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetAppRelationshipsBatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetAppRelationshipsBatched(ctx, req.(*CPublishedFile_GetAppRelationshipsBatched_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_StartPlaytimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_StartPlaytimeTracking_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).StartPlaytimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/StartPlaytimeTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).StartPlaytimeTracking(ctx, req.(*CPublishedFile_StartPlaytimeTracking_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_StopPlaytimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_StopPlaytimeTracking_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).StopPlaytimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/StopPlaytimeTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).StopPlaytimeTracking(ctx, req.(*CPublishedFile_StopPlaytimeTracking_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_StopPlaytimeTrackingForAllAppItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).StopPlaytimeTrackingForAllAppItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/StopPlaytimeTrackingForAllAppItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).StopPlaytimeTrackingForAllAppItems(ctx, req.(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_SetPlaytimeForControllerConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_SetPlaytimeForControllerConfigs_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).SetPlaytimeForControllerConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/SetPlaytimeForControllerConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).SetPlaytimeForControllerConfigs(ctx, req.(*CPublishedFile_SetPlaytimeForControllerConfigs_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_AddChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_AddChild_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).AddChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/AddChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).AddChild(ctx, req.(*CPublishedFile_AddChild_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_RemoveChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_RemoveChild_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).RemoveChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/RemoveChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).RemoveChild(ctx, req.(*CPublishedFile_RemoveChild_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_SetCollectionChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_SetCollectionChildren_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).SetCollectionChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/SetCollectionChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).SetCollectionChildren(ctx, req.(*CPublishedFile_SetCollectionChildren_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_SetSubscriptionListFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_SetSubscriptionListFromCollection_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).SetSubscriptionListFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/SetSubscriptionListFromCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).SetSubscriptionListFromCollection(ctx, req.(*CPublishedFile_SetSubscriptionListFromCollection_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetUserVoteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetUserVoteSummary_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetUserVoteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetUserVoteSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetUserVoteSummary(ctx, req.(*CPublishedFile_GetUserVoteSummary_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetItemChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetItemChanges_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetItemChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetItemChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetItemChanges(ctx, req.(*CPublishedFile_GetItemChanges_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_GetContentDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_GetContentDescriptors_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).GetContentDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/GetContentDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).GetContentDescriptors(ctx, req.(*CPublishedFile_GetContentDescriptors_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFile_UpdateContentDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_UpdateContentDescriptors_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileServer).UpdateContentDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFile/UpdateContentDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileServer).UpdateContentDescriptors(ctx, req.(*CPublishedFile_UpdateContentDescriptors_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishedFile_ServiceDesc is the grpc.ServiceDesc for PublishedFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishedFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PublishedFile",
	HandlerType: (*PublishedFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _PublishedFile_Vote_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _PublishedFile_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PublishedFile_Unsubscribe_Handler,
		},
		{
			MethodName: "CanSubscribe",
			Handler:    _PublishedFile_CanSubscribe_Handler,
		},
		{
			MethodName: "GetSubSectionData",
			Handler:    _PublishedFile_GetSubSectionData_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _PublishedFile_Publish_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _PublishedFile_GetDetails_Handler,
		},
		{
			MethodName: "GetItemInfo",
			Handler:    _PublishedFile_GetItemInfo_Handler,
		},
		{
			MethodName: "GetUserFiles",
			Handler:    _PublishedFile_GetUserFiles_Handler,
		},
		{
			MethodName: "GetUserFileCount",
			Handler:    _PublishedFile_GetUserFileCount_Handler,
		},
		{
			MethodName: "AreFilesInSubscriptionList",
			Handler:    _PublishedFile_AreFilesInSubscriptionList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PublishedFile_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PublishedFile_Delete_Handler,
		},
		{
			MethodName: "GetChangeHistoryEntry",
			Handler:    _PublishedFile_GetChangeHistoryEntry_Handler,
		},
		{
			MethodName: "GetChangeHistory",
			Handler:    _PublishedFile_GetChangeHistory_Handler,
		},
		{
			MethodName: "RefreshVotingQueue",
			Handler:    _PublishedFile_RefreshVotingQueue_Handler,
		},
		{
			MethodName: "QueryFiles",
			Handler:    _PublishedFile_QueryFiles_Handler,
		},
		{
			MethodName: "AddAppRelationship",
			Handler:    _PublishedFile_AddAppRelationship_Handler,
		},
		{
			MethodName: "RemoveAppRelationship",
			Handler:    _PublishedFile_RemoveAppRelationship_Handler,
		},
		{
			MethodName: "GetAppRelationships",
			Handler:    _PublishedFile_GetAppRelationships_Handler,
		},
		{
			MethodName: "GetAppRelationshipsBatched",
			Handler:    _PublishedFile_GetAppRelationshipsBatched_Handler,
		},
		{
			MethodName: "StartPlaytimeTracking",
			Handler:    _PublishedFile_StartPlaytimeTracking_Handler,
		},
		{
			MethodName: "StopPlaytimeTracking",
			Handler:    _PublishedFile_StopPlaytimeTracking_Handler,
		},
		{
			MethodName: "StopPlaytimeTrackingForAllAppItems",
			Handler:    _PublishedFile_StopPlaytimeTrackingForAllAppItems_Handler,
		},
		{
			MethodName: "SetPlaytimeForControllerConfigs",
			Handler:    _PublishedFile_SetPlaytimeForControllerConfigs_Handler,
		},
		{
			MethodName: "AddChild",
			Handler:    _PublishedFile_AddChild_Handler,
		},
		{
			MethodName: "RemoveChild",
			Handler:    _PublishedFile_RemoveChild_Handler,
		},
		{
			MethodName: "SetCollectionChildren",
			Handler:    _PublishedFile_SetCollectionChildren_Handler,
		},
		{
			MethodName: "SetSubscriptionListFromCollection",
			Handler:    _PublishedFile_SetSubscriptionListFromCollection_Handler,
		},
		{
			MethodName: "GetUserVoteSummary",
			Handler:    _PublishedFile_GetUserVoteSummary_Handler,
		},
		{
			MethodName: "GetItemChanges",
			Handler:    _PublishedFile_GetItemChanges_Handler,
		},
		{
			MethodName: "GetContentDescriptors",
			Handler:    _PublishedFile_GetContentDescriptors_Handler,
		},
		{
			MethodName: "UpdateContentDescriptors",
			Handler:    _PublishedFile_UpdateContentDescriptors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_publishedfile.steamclient.proto",
}

// PublishedFileClientClient is the client API for PublishedFileClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishedFileClientClient interface {
	NotifyFileSubscribed(ctx context.Context, in *CPublishedFile_FileSubscribed_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyFileUnsubscribed(ctx context.Context, in *CPublishedFile_FileUnsubscribed_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyFileDeleted(ctx context.Context, in *CPublishedFile_FileDeleted_Client_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type publishedFileClientClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishedFileClientClient(cc grpc.ClientConnInterface) PublishedFileClientClient {
	return &publishedFileClientClient{cc}
}

func (c *publishedFileClientClient) NotifyFileSubscribed(ctx context.Context, in *CPublishedFile_FileSubscribed_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PublishedFileClient/NotifyFileSubscribed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClientClient) NotifyFileUnsubscribed(ctx context.Context, in *CPublishedFile_FileUnsubscribed_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PublishedFileClient/NotifyFileUnsubscribed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishedFileClientClient) NotifyFileDeleted(ctx context.Context, in *CPublishedFile_FileDeleted_Client_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/PublishedFileClient/NotifyFileDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishedFileClientServer is the server API for PublishedFileClient service.
// All implementations must embed UnimplementedPublishedFileClientServer
// for forward compatibility
type PublishedFileClientServer interface {
	NotifyFileSubscribed(context.Context, *CPublishedFile_FileSubscribed_Notification) (*NoResponse, error)
	NotifyFileUnsubscribed(context.Context, *CPublishedFile_FileUnsubscribed_Notification) (*NoResponse, error)
	NotifyFileDeleted(context.Context, *CPublishedFile_FileDeleted_Client_Notification) (*NoResponse, error)
	mustEmbedUnimplementedPublishedFileClientServer()
}

// UnimplementedPublishedFileClientServer must be embedded to have forward compatible implementations.
type UnimplementedPublishedFileClientServer struct {
}

func (UnimplementedPublishedFileClientServer) NotifyFileSubscribed(context.Context, *CPublishedFile_FileSubscribed_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFileSubscribed not implemented")
}
func (UnimplementedPublishedFileClientServer) NotifyFileUnsubscribed(context.Context, *CPublishedFile_FileUnsubscribed_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFileUnsubscribed not implemented")
}
func (UnimplementedPublishedFileClientServer) NotifyFileDeleted(context.Context, *CPublishedFile_FileDeleted_Client_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFileDeleted not implemented")
}
func (UnimplementedPublishedFileClientServer) mustEmbedUnimplementedPublishedFileClientServer() {}

// UnsafePublishedFileClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishedFileClientServer will
// result in compilation errors.
type UnsafePublishedFileClientServer interface {
	mustEmbedUnimplementedPublishedFileClientServer()
}

func RegisterPublishedFileClientServer(s grpc.ServiceRegistrar, srv PublishedFileClientServer) {
	s.RegisterService(&PublishedFileClient_ServiceDesc, srv)
}

func _PublishedFileClient_NotifyFileSubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_FileSubscribed_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileClientServer).NotifyFileSubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFileClient/NotifyFileSubscribed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileClientServer).NotifyFileSubscribed(ctx, req.(*CPublishedFile_FileSubscribed_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFileClient_NotifyFileUnsubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_FileUnsubscribed_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileClientServer).NotifyFileUnsubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFileClient/NotifyFileUnsubscribed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileClientServer).NotifyFileUnsubscribed(ctx, req.(*CPublishedFile_FileUnsubscribed_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishedFileClient_NotifyFileDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPublishedFile_FileDeleted_Client_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishedFileClientServer).NotifyFileDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublishedFileClient/NotifyFileDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishedFileClientServer).NotifyFileDeleted(ctx, req.(*CPublishedFile_FileDeleted_Client_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishedFileClient_ServiceDesc is the grpc.ServiceDesc for PublishedFileClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishedFileClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PublishedFileClient",
	HandlerType: (*PublishedFileClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyFileSubscribed",
			Handler:    _PublishedFileClient_NotifyFileSubscribed_Handler,
		},
		{
			MethodName: "NotifyFileUnsubscribed",
			Handler:    _PublishedFileClient_NotifyFileUnsubscribed_Handler,
		},
		{
			MethodName: "NotifyFileDeleted",
			Handler:    _PublishedFileClient_NotifyFileDeleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_publishedfile.steamclient.proto",
}
