// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_qms.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueuedMatchmakingClient is the client API for QueuedMatchmaking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueuedMatchmakingClient interface {
	SearchForGame(ctx context.Context, in *CQueuedMatchmaking_SearchForGame_Request, opts ...grpc.CallOption) (*CQueuedMatchmaking_SearchForGame_Response, error)
}

type queuedMatchmakingClient struct {
	cc grpc.ClientConnInterface
}

func NewQueuedMatchmakingClient(cc grpc.ClientConnInterface) QueuedMatchmakingClient {
	return &queuedMatchmakingClient{cc}
}

func (c *queuedMatchmakingClient) SearchForGame(ctx context.Context, in *CQueuedMatchmaking_SearchForGame_Request, opts ...grpc.CallOption) (*CQueuedMatchmaking_SearchForGame_Response, error) {
	out := new(CQueuedMatchmaking_SearchForGame_Response)
	err := c.cc.Invoke(ctx, "/QueuedMatchmaking/SearchForGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueuedMatchmakingServer is the server API for QueuedMatchmaking service.
// All implementations must embed UnimplementedQueuedMatchmakingServer
// for forward compatibility
type QueuedMatchmakingServer interface {
	SearchForGame(context.Context, *CQueuedMatchmaking_SearchForGame_Request) (*CQueuedMatchmaking_SearchForGame_Response, error)
	mustEmbedUnimplementedQueuedMatchmakingServer()
}

// UnimplementedQueuedMatchmakingServer must be embedded to have forward compatible implementations.
type UnimplementedQueuedMatchmakingServer struct {
}

func (UnimplementedQueuedMatchmakingServer) SearchForGame(context.Context, *CQueuedMatchmaking_SearchForGame_Request) (*CQueuedMatchmaking_SearchForGame_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForGame not implemented")
}
func (UnimplementedQueuedMatchmakingServer) mustEmbedUnimplementedQueuedMatchmakingServer() {}

// UnsafeQueuedMatchmakingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueuedMatchmakingServer will
// result in compilation errors.
type UnsafeQueuedMatchmakingServer interface {
	mustEmbedUnimplementedQueuedMatchmakingServer()
}

func RegisterQueuedMatchmakingServer(s grpc.ServiceRegistrar, srv QueuedMatchmakingServer) {
	s.RegisterService(&QueuedMatchmaking_ServiceDesc, srv)
}

func _QueuedMatchmaking_SearchForGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueuedMatchmaking_SearchForGame_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuedMatchmakingServer).SearchForGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueuedMatchmaking/SearchForGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuedMatchmakingServer).SearchForGame(ctx, req.(*CQueuedMatchmaking_SearchForGame_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// QueuedMatchmaking_ServiceDesc is the grpc.ServiceDesc for QueuedMatchmaking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueuedMatchmaking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QueuedMatchmaking",
	HandlerType: (*QueuedMatchmakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchForGame",
			Handler:    _QueuedMatchmaking_SearchForGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_qms.steamclient.proto",
}

// QueuedMatchmakingGameHostClient is the client API for QueuedMatchmakingGameHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueuedMatchmakingGameHostClient interface {
	SearchForPlayers(ctx context.Context, in *CQueuedMatchmakingGameHost_SearchForPlayers_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_SearchForPlayers_Response, error)
	SubmitPlayerResult(ctx context.Context, in *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, error)
	EndGame(ctx context.Context, in *CQueuedMatchmakingGameHost_EndGame_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_EndGame_Response, error)
}

type queuedMatchmakingGameHostClient struct {
	cc grpc.ClientConnInterface
}

func NewQueuedMatchmakingGameHostClient(cc grpc.ClientConnInterface) QueuedMatchmakingGameHostClient {
	return &queuedMatchmakingGameHostClient{cc}
}

func (c *queuedMatchmakingGameHostClient) SearchForPlayers(ctx context.Context, in *CQueuedMatchmakingGameHost_SearchForPlayers_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_SearchForPlayers_Response, error) {
	out := new(CQueuedMatchmakingGameHost_SearchForPlayers_Response)
	err := c.cc.Invoke(ctx, "/QueuedMatchmakingGameHost/SearchForPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuedMatchmakingGameHostClient) SubmitPlayerResult(ctx context.Context, in *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, error) {
	out := new(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
	err := c.cc.Invoke(ctx, "/QueuedMatchmakingGameHost/SubmitPlayerResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuedMatchmakingGameHostClient) EndGame(ctx context.Context, in *CQueuedMatchmakingGameHost_EndGame_Request, opts ...grpc.CallOption) (*CQueuedMatchmakingGameHost_EndGame_Response, error) {
	out := new(CQueuedMatchmakingGameHost_EndGame_Response)
	err := c.cc.Invoke(ctx, "/QueuedMatchmakingGameHost/EndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueuedMatchmakingGameHostServer is the server API for QueuedMatchmakingGameHost service.
// All implementations must embed UnimplementedQueuedMatchmakingGameHostServer
// for forward compatibility
type QueuedMatchmakingGameHostServer interface {
	SearchForPlayers(context.Context, *CQueuedMatchmakingGameHost_SearchForPlayers_Request) (*CQueuedMatchmakingGameHost_SearchForPlayers_Response, error)
	SubmitPlayerResult(context.Context, *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, error)
	EndGame(context.Context, *CQueuedMatchmakingGameHost_EndGame_Request) (*CQueuedMatchmakingGameHost_EndGame_Response, error)
	mustEmbedUnimplementedQueuedMatchmakingGameHostServer()
}

// UnimplementedQueuedMatchmakingGameHostServer must be embedded to have forward compatible implementations.
type UnimplementedQueuedMatchmakingGameHostServer struct {
}

func (UnimplementedQueuedMatchmakingGameHostServer) SearchForPlayers(context.Context, *CQueuedMatchmakingGameHost_SearchForPlayers_Request) (*CQueuedMatchmakingGameHost_SearchForPlayers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForPlayers not implemented")
}
func (UnimplementedQueuedMatchmakingGameHostServer) SubmitPlayerResult(context.Context, *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPlayerResult not implemented")
}
func (UnimplementedQueuedMatchmakingGameHostServer) EndGame(context.Context, *CQueuedMatchmakingGameHost_EndGame_Request) (*CQueuedMatchmakingGameHost_EndGame_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedQueuedMatchmakingGameHostServer) mustEmbedUnimplementedQueuedMatchmakingGameHostServer() {
}

// UnsafeQueuedMatchmakingGameHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueuedMatchmakingGameHostServer will
// result in compilation errors.
type UnsafeQueuedMatchmakingGameHostServer interface {
	mustEmbedUnimplementedQueuedMatchmakingGameHostServer()
}

func RegisterQueuedMatchmakingGameHostServer(s grpc.ServiceRegistrar, srv QueuedMatchmakingGameHostServer) {
	s.RegisterService(&QueuedMatchmakingGameHost_ServiceDesc, srv)
}

func _QueuedMatchmakingGameHost_SearchForPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueuedMatchmakingGameHost_SearchForPlayers_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuedMatchmakingGameHostServer).SearchForPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueuedMatchmakingGameHost/SearchForPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuedMatchmakingGameHostServer).SearchForPlayers(ctx, req.(*CQueuedMatchmakingGameHost_SearchForPlayers_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuedMatchmakingGameHost_SubmitPlayerResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuedMatchmakingGameHostServer).SubmitPlayerResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueuedMatchmakingGameHost/SubmitPlayerResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuedMatchmakingGameHostServer).SubmitPlayerResult(ctx, req.(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuedMatchmakingGameHost_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueuedMatchmakingGameHost_EndGame_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuedMatchmakingGameHostServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueuedMatchmakingGameHost/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuedMatchmakingGameHostServer).EndGame(ctx, req.(*CQueuedMatchmakingGameHost_EndGame_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// QueuedMatchmakingGameHost_ServiceDesc is the grpc.ServiceDesc for QueuedMatchmakingGameHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueuedMatchmakingGameHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QueuedMatchmakingGameHost",
	HandlerType: (*QueuedMatchmakingGameHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchForPlayers",
			Handler:    _QueuedMatchmakingGameHost_SearchForPlayers_Handler,
		},
		{
			MethodName: "SubmitPlayerResult",
			Handler:    _QueuedMatchmakingGameHost_SubmitPlayerResult_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _QueuedMatchmakingGameHost_EndGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_qms.steamclient.proto",
}
