// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_remoteclient_service.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteClientClient is the client API for RemoteClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteClientClient interface {
	GetPairingInfo(ctx context.Context, in *CRemoteClient_GetPairingInfo_Request, opts ...grpc.CallOption) (*CRemoteClient_GetPairingInfo_Response, error)
	NotifyOnline(ctx context.Context, in *CRemoteClient_Online_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetRecentClients(ctx context.Context, in *CRemoteClient_GetRecentClients_Request, opts ...grpc.CallOption) (*CRemoteClient_GetRecentClients_Response, error)
	MarkTaskComplete(ctx context.Context, in *CRemoteClient_MarkTaskComplete_Request, opts ...grpc.CallOption) (*CRemoteClient_MarkTaskComplete_Response, error)
	NotifyReplyPacket(ctx context.Context, in *CRemoteClient_ReplyPacket_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	AllocateRelayServer(ctx context.Context, in *CRemoteClient_AllocateRelayServer_Request, opts ...grpc.CallOption) (*CRemoteClient_AllocateRelayServer_Response, error)
	AllocateSDR(ctx context.Context, in *CRemoteClient_AllocateSDR_Request, opts ...grpc.CallOption) (*CRemoteClient_AllocateSDR_Response, error)
	SendSteamBroadcastPacket(ctx context.Context, in *CRemoteClient_SteamBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SendSteamToSteamPacket(ctx context.Context, in *CRemoteClient_SteamToSteam_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SendRemotePlaySessionStarted(ctx context.Context, in *CRemotePlay_SessionStarted_Request, opts ...grpc.CallOption) (*CRemotePlay_SessionStarted_Response, error)
	SendRemotePlaySessionStopped(ctx context.Context, in *CRemotePlay_SessionStopped_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SendRemotePlayTogetherPacket(ctx context.Context, in *CRemotePlayTogether_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	CreateRemotePlayTogetherInvitation(ctx context.Context, in *CRemoteClient_CreateRemotePlayTogetherInvitation_Request, opts ...grpc.CallOption) (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response, error)
	DeleteRemotePlayTogetherInvitation(ctx context.Context, in *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, opts ...grpc.CallOption) (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, error)
}

type remoteClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClientClient(cc grpc.ClientConnInterface) RemoteClientClient {
	return &remoteClientClient{cc}
}

func (c *remoteClientClient) GetPairingInfo(ctx context.Context, in *CRemoteClient_GetPairingInfo_Request, opts ...grpc.CallOption) (*CRemoteClient_GetPairingInfo_Response, error) {
	out := new(CRemoteClient_GetPairingInfo_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/GetPairingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) NotifyOnline(ctx context.Context, in *CRemoteClient_Online_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/NotifyOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) GetRecentClients(ctx context.Context, in *CRemoteClient_GetRecentClients_Request, opts ...grpc.CallOption) (*CRemoteClient_GetRecentClients_Response, error) {
	out := new(CRemoteClient_GetRecentClients_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/GetRecentClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) MarkTaskComplete(ctx context.Context, in *CRemoteClient_MarkTaskComplete_Request, opts ...grpc.CallOption) (*CRemoteClient_MarkTaskComplete_Response, error) {
	out := new(CRemoteClient_MarkTaskComplete_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/MarkTaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) NotifyReplyPacket(ctx context.Context, in *CRemoteClient_ReplyPacket_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/NotifyReplyPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) AllocateRelayServer(ctx context.Context, in *CRemoteClient_AllocateRelayServer_Request, opts ...grpc.CallOption) (*CRemoteClient_AllocateRelayServer_Response, error) {
	out := new(CRemoteClient_AllocateRelayServer_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/AllocateRelayServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) AllocateSDR(ctx context.Context, in *CRemoteClient_AllocateSDR_Request, opts ...grpc.CallOption) (*CRemoteClient_AllocateSDR_Response, error) {
	out := new(CRemoteClient_AllocateSDR_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/AllocateSDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) SendSteamBroadcastPacket(ctx context.Context, in *CRemoteClient_SteamBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/SendSteamBroadcastPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) SendSteamToSteamPacket(ctx context.Context, in *CRemoteClient_SteamToSteam_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/SendSteamToSteamPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) SendRemotePlaySessionStarted(ctx context.Context, in *CRemotePlay_SessionStarted_Request, opts ...grpc.CallOption) (*CRemotePlay_SessionStarted_Response, error) {
	out := new(CRemotePlay_SessionStarted_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/SendRemotePlaySessionStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) SendRemotePlaySessionStopped(ctx context.Context, in *CRemotePlay_SessionStopped_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/SendRemotePlaySessionStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) SendRemotePlayTogetherPacket(ctx context.Context, in *CRemotePlayTogether_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClient/SendRemotePlayTogetherPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) CreateRemotePlayTogetherInvitation(ctx context.Context, in *CRemoteClient_CreateRemotePlayTogetherInvitation_Request, opts ...grpc.CallOption) (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response, error) {
	out := new(CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/CreateRemotePlayTogetherInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientClient) DeleteRemotePlayTogetherInvitation(ctx context.Context, in *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, opts ...grpc.CallOption) (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, error) {
	out := new(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
	err := c.cc.Invoke(ctx, "/RemoteClient/DeleteRemotePlayTogetherInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteClientServer is the server API for RemoteClient service.
// All implementations must embed UnimplementedRemoteClientServer
// for forward compatibility
type RemoteClientServer interface {
	GetPairingInfo(context.Context, *CRemoteClient_GetPairingInfo_Request) (*CRemoteClient_GetPairingInfo_Response, error)
	NotifyOnline(context.Context, *CRemoteClient_Online_Notification) (*NoResponse, error)
	GetRecentClients(context.Context, *CRemoteClient_GetRecentClients_Request) (*CRemoteClient_GetRecentClients_Response, error)
	MarkTaskComplete(context.Context, *CRemoteClient_MarkTaskComplete_Request) (*CRemoteClient_MarkTaskComplete_Response, error)
	NotifyReplyPacket(context.Context, *CRemoteClient_ReplyPacket_Notification) (*NoResponse, error)
	AllocateRelayServer(context.Context, *CRemoteClient_AllocateRelayServer_Request) (*CRemoteClient_AllocateRelayServer_Response, error)
	AllocateSDR(context.Context, *CRemoteClient_AllocateSDR_Request) (*CRemoteClient_AllocateSDR_Response, error)
	SendSteamBroadcastPacket(context.Context, *CRemoteClient_SteamBroadcast_Notification) (*NoResponse, error)
	SendSteamToSteamPacket(context.Context, *CRemoteClient_SteamToSteam_Notification) (*NoResponse, error)
	SendRemotePlaySessionStarted(context.Context, *CRemotePlay_SessionStarted_Request) (*CRemotePlay_SessionStarted_Response, error)
	SendRemotePlaySessionStopped(context.Context, *CRemotePlay_SessionStopped_Notification) (*NoResponse, error)
	SendRemotePlayTogetherPacket(context.Context, *CRemotePlayTogether_Notification) (*NoResponse, error)
	CreateRemotePlayTogetherInvitation(context.Context, *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response, error)
	DeleteRemotePlayTogetherInvitation(context.Context, *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, error)
	mustEmbedUnimplementedRemoteClientServer()
}

// UnimplementedRemoteClientServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteClientServer struct {
}

func (UnimplementedRemoteClientServer) GetPairingInfo(context.Context, *CRemoteClient_GetPairingInfo_Request) (*CRemoteClient_GetPairingInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairingInfo not implemented")
}
func (UnimplementedRemoteClientServer) NotifyOnline(context.Context, *CRemoteClient_Online_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOnline not implemented")
}
func (UnimplementedRemoteClientServer) GetRecentClients(context.Context, *CRemoteClient_GetRecentClients_Request) (*CRemoteClient_GetRecentClients_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentClients not implemented")
}
func (UnimplementedRemoteClientServer) MarkTaskComplete(context.Context, *CRemoteClient_MarkTaskComplete_Request) (*CRemoteClient_MarkTaskComplete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskComplete not implemented")
}
func (UnimplementedRemoteClientServer) NotifyReplyPacket(context.Context, *CRemoteClient_ReplyPacket_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyReplyPacket not implemented")
}
func (UnimplementedRemoteClientServer) AllocateRelayServer(context.Context, *CRemoteClient_AllocateRelayServer_Request) (*CRemoteClient_AllocateRelayServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateRelayServer not implemented")
}
func (UnimplementedRemoteClientServer) AllocateSDR(context.Context, *CRemoteClient_AllocateSDR_Request) (*CRemoteClient_AllocateSDR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSDR not implemented")
}
func (UnimplementedRemoteClientServer) SendSteamBroadcastPacket(context.Context, *CRemoteClient_SteamBroadcast_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSteamBroadcastPacket not implemented")
}
func (UnimplementedRemoteClientServer) SendSteamToSteamPacket(context.Context, *CRemoteClient_SteamToSteam_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSteamToSteamPacket not implemented")
}
func (UnimplementedRemoteClientServer) SendRemotePlaySessionStarted(context.Context, *CRemotePlay_SessionStarted_Request) (*CRemotePlay_SessionStarted_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRemotePlaySessionStarted not implemented")
}
func (UnimplementedRemoteClientServer) SendRemotePlaySessionStopped(context.Context, *CRemotePlay_SessionStopped_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRemotePlaySessionStopped not implemented")
}
func (UnimplementedRemoteClientServer) SendRemotePlayTogetherPacket(context.Context, *CRemotePlayTogether_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRemotePlayTogetherPacket not implemented")
}
func (UnimplementedRemoteClientServer) CreateRemotePlayTogetherInvitation(context.Context, *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemotePlayTogetherInvitation not implemented")
}
func (UnimplementedRemoteClientServer) DeleteRemotePlayTogetherInvitation(context.Context, *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemotePlayTogetherInvitation not implemented")
}
func (UnimplementedRemoteClientServer) mustEmbedUnimplementedRemoteClientServer() {}

// UnsafeRemoteClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteClientServer will
// result in compilation errors.
type UnsafeRemoteClientServer interface {
	mustEmbedUnimplementedRemoteClientServer()
}

func RegisterRemoteClientServer(s grpc.ServiceRegistrar, srv RemoteClientServer) {
	s.RegisterService(&RemoteClient_ServiceDesc, srv)
}

func _RemoteClient_GetPairingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_GetPairingInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).GetPairingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/GetPairingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).GetPairingInfo(ctx, req.(*CRemoteClient_GetPairingInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_NotifyOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_Online_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).NotifyOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/NotifyOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).NotifyOnline(ctx, req.(*CRemoteClient_Online_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_GetRecentClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_GetRecentClients_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).GetRecentClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/GetRecentClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).GetRecentClients(ctx, req.(*CRemoteClient_GetRecentClients_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_MarkTaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_MarkTaskComplete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).MarkTaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/MarkTaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).MarkTaskComplete(ctx, req.(*CRemoteClient_MarkTaskComplete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_NotifyReplyPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_ReplyPacket_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).NotifyReplyPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/NotifyReplyPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).NotifyReplyPacket(ctx, req.(*CRemoteClient_ReplyPacket_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_AllocateRelayServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_AllocateRelayServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).AllocateRelayServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/AllocateRelayServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).AllocateRelayServer(ctx, req.(*CRemoteClient_AllocateRelayServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_AllocateSDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_AllocateSDR_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).AllocateSDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/AllocateSDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).AllocateSDR(ctx, req.(*CRemoteClient_AllocateSDR_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_SendSteamBroadcastPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_SteamBroadcast_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).SendSteamBroadcastPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/SendSteamBroadcastPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).SendSteamBroadcastPacket(ctx, req.(*CRemoteClient_SteamBroadcast_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_SendSteamToSteamPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_SteamToSteam_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).SendSteamToSteamPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/SendSteamToSteamPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).SendSteamToSteamPacket(ctx, req.(*CRemoteClient_SteamToSteam_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_SendRemotePlaySessionStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemotePlay_SessionStarted_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).SendRemotePlaySessionStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/SendRemotePlaySessionStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).SendRemotePlaySessionStarted(ctx, req.(*CRemotePlay_SessionStarted_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_SendRemotePlaySessionStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemotePlay_SessionStopped_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).SendRemotePlaySessionStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/SendRemotePlaySessionStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).SendRemotePlaySessionStopped(ctx, req.(*CRemotePlay_SessionStopped_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_SendRemotePlayTogetherPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemotePlayTogether_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).SendRemotePlayTogetherPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/SendRemotePlayTogetherPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).SendRemotePlayTogetherPacket(ctx, req.(*CRemotePlayTogether_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_CreateRemotePlayTogetherInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).CreateRemotePlayTogetherInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/CreateRemotePlayTogetherInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).CreateRemotePlayTogetherInvitation(ctx, req.(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClient_DeleteRemotePlayTogetherInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientServer).DeleteRemotePlayTogetherInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClient/DeleteRemotePlayTogetherInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientServer).DeleteRemotePlayTogetherInvitation(ctx, req.(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteClient_ServiceDesc is the grpc.ServiceDesc for RemoteClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteClient",
	HandlerType: (*RemoteClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPairingInfo",
			Handler:    _RemoteClient_GetPairingInfo_Handler,
		},
		{
			MethodName: "NotifyOnline",
			Handler:    _RemoteClient_NotifyOnline_Handler,
		},
		{
			MethodName: "GetRecentClients",
			Handler:    _RemoteClient_GetRecentClients_Handler,
		},
		{
			MethodName: "MarkTaskComplete",
			Handler:    _RemoteClient_MarkTaskComplete_Handler,
		},
		{
			MethodName: "NotifyReplyPacket",
			Handler:    _RemoteClient_NotifyReplyPacket_Handler,
		},
		{
			MethodName: "AllocateRelayServer",
			Handler:    _RemoteClient_AllocateRelayServer_Handler,
		},
		{
			MethodName: "AllocateSDR",
			Handler:    _RemoteClient_AllocateSDR_Handler,
		},
		{
			MethodName: "SendSteamBroadcastPacket",
			Handler:    _RemoteClient_SendSteamBroadcastPacket_Handler,
		},
		{
			MethodName: "SendSteamToSteamPacket",
			Handler:    _RemoteClient_SendSteamToSteamPacket_Handler,
		},
		{
			MethodName: "SendRemotePlaySessionStarted",
			Handler:    _RemoteClient_SendRemotePlaySessionStarted_Handler,
		},
		{
			MethodName: "SendRemotePlaySessionStopped",
			Handler:    _RemoteClient_SendRemotePlaySessionStopped_Handler,
		},
		{
			MethodName: "SendRemotePlayTogetherPacket",
			Handler:    _RemoteClient_SendRemotePlayTogetherPacket_Handler,
		},
		{
			MethodName: "CreateRemotePlayTogetherInvitation",
			Handler:    _RemoteClient_CreateRemotePlayTogetherInvitation_Handler,
		},
		{
			MethodName: "DeleteRemotePlayTogetherInvitation",
			Handler:    _RemoteClient_DeleteRemotePlayTogetherInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_remoteclient_service.steamclient.proto",
}

// RemoteClientSteamClientClient is the client API for RemoteClientSteamClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteClientSteamClientClient interface {
	NotifyRegisterStatusUpdate(ctx context.Context, in *CRemoteClient_RegisterStatusUpdate_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyUnregisterStatusUpdate(ctx context.Context, in *CRemoteClient_UnregisterStatusUpdate_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyRemotePacket(ctx context.Context, in *CRemoteClient_RemotePacket_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifySteamBroadcastPacket(ctx context.Context, in *CRemoteClient_SteamBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifySteamToSteamPacket(ctx context.Context, in *CRemoteClient_SteamToSteam_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyRemotePlayTogetherPacket(ctx context.Context, in *CRemotePlayTogether_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	NotifyTaskList(ctx context.Context, in *CRemoteClient_TaskList_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type remoteClientSteamClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClientSteamClientClient(cc grpc.ClientConnInterface) RemoteClientSteamClientClient {
	return &remoteClientSteamClientClient{cc}
}

func (c *remoteClientSteamClientClient) NotifyRegisterStatusUpdate(ctx context.Context, in *CRemoteClient_RegisterStatusUpdate_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifyRegisterStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifyUnregisterStatusUpdate(ctx context.Context, in *CRemoteClient_UnregisterStatusUpdate_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifyUnregisterStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifyRemotePacket(ctx context.Context, in *CRemoteClient_RemotePacket_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifyRemotePacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifySteamBroadcastPacket(ctx context.Context, in *CRemoteClient_SteamBroadcast_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifySteamBroadcastPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifySteamToSteamPacket(ctx context.Context, in *CRemoteClient_SteamToSteam_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifySteamToSteamPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifyRemotePlayTogetherPacket(ctx context.Context, in *CRemotePlayTogether_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifyRemotePlayTogetherPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClientSteamClientClient) NotifyTaskList(ctx context.Context, in *CRemoteClient_TaskList_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/RemoteClientSteamClient/NotifyTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteClientSteamClientServer is the server API for RemoteClientSteamClient service.
// All implementations must embed UnimplementedRemoteClientSteamClientServer
// for forward compatibility
type RemoteClientSteamClientServer interface {
	NotifyRegisterStatusUpdate(context.Context, *CRemoteClient_RegisterStatusUpdate_Notification) (*NoResponse, error)
	NotifyUnregisterStatusUpdate(context.Context, *CRemoteClient_UnregisterStatusUpdate_Notification) (*NoResponse, error)
	NotifyRemotePacket(context.Context, *CRemoteClient_RemotePacket_Notification) (*NoResponse, error)
	NotifySteamBroadcastPacket(context.Context, *CRemoteClient_SteamBroadcast_Notification) (*NoResponse, error)
	NotifySteamToSteamPacket(context.Context, *CRemoteClient_SteamToSteam_Notification) (*NoResponse, error)
	NotifyRemotePlayTogetherPacket(context.Context, *CRemotePlayTogether_Notification) (*NoResponse, error)
	NotifyTaskList(context.Context, *CRemoteClient_TaskList_Notification) (*NoResponse, error)
	mustEmbedUnimplementedRemoteClientSteamClientServer()
}

// UnimplementedRemoteClientSteamClientServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteClientSteamClientServer struct {
}

func (UnimplementedRemoteClientSteamClientServer) NotifyRegisterStatusUpdate(context.Context, *CRemoteClient_RegisterStatusUpdate_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRegisterStatusUpdate not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifyUnregisterStatusUpdate(context.Context, *CRemoteClient_UnregisterStatusUpdate_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUnregisterStatusUpdate not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifyRemotePacket(context.Context, *CRemoteClient_RemotePacket_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRemotePacket not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifySteamBroadcastPacket(context.Context, *CRemoteClient_SteamBroadcast_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySteamBroadcastPacket not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifySteamToSteamPacket(context.Context, *CRemoteClient_SteamToSteam_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySteamToSteamPacket not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifyRemotePlayTogetherPacket(context.Context, *CRemotePlayTogether_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRemotePlayTogetherPacket not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) NotifyTaskList(context.Context, *CRemoteClient_TaskList_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTaskList not implemented")
}
func (UnimplementedRemoteClientSteamClientServer) mustEmbedUnimplementedRemoteClientSteamClientServer() {
}

// UnsafeRemoteClientSteamClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteClientSteamClientServer will
// result in compilation errors.
type UnsafeRemoteClientSteamClientServer interface {
	mustEmbedUnimplementedRemoteClientSteamClientServer()
}

func RegisterRemoteClientSteamClientServer(s grpc.ServiceRegistrar, srv RemoteClientSteamClientServer) {
	s.RegisterService(&RemoteClientSteamClient_ServiceDesc, srv)
}

func _RemoteClientSteamClient_NotifyRegisterStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_RegisterStatusUpdate_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifyRegisterStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifyRegisterStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifyRegisterStatusUpdate(ctx, req.(*CRemoteClient_RegisterStatusUpdate_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifyUnregisterStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_UnregisterStatusUpdate_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifyUnregisterStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifyUnregisterStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifyUnregisterStatusUpdate(ctx, req.(*CRemoteClient_UnregisterStatusUpdate_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifyRemotePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_RemotePacket_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifyRemotePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifyRemotePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifyRemotePacket(ctx, req.(*CRemoteClient_RemotePacket_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifySteamBroadcastPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_SteamBroadcast_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifySteamBroadcastPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifySteamBroadcastPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifySteamBroadcastPacket(ctx, req.(*CRemoteClient_SteamBroadcast_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifySteamToSteamPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_SteamToSteam_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifySteamToSteamPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifySteamToSteamPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifySteamToSteamPacket(ctx, req.(*CRemoteClient_SteamToSteam_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifyRemotePlayTogetherPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemotePlayTogether_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifyRemotePlayTogetherPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifyRemotePlayTogetherPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifyRemotePlayTogetherPacket(ctx, req.(*CRemotePlayTogether_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteClientSteamClient_NotifyTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRemoteClient_TaskList_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteClientSteamClientServer).NotifyTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteClientSteamClient/NotifyTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteClientSteamClientServer).NotifyTaskList(ctx, req.(*CRemoteClient_TaskList_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteClientSteamClient_ServiceDesc is the grpc.ServiceDesc for RemoteClientSteamClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteClientSteamClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteClientSteamClient",
	HandlerType: (*RemoteClientSteamClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRegisterStatusUpdate",
			Handler:    _RemoteClientSteamClient_NotifyRegisterStatusUpdate_Handler,
		},
		{
			MethodName: "NotifyUnregisterStatusUpdate",
			Handler:    _RemoteClientSteamClient_NotifyUnregisterStatusUpdate_Handler,
		},
		{
			MethodName: "NotifyRemotePacket",
			Handler:    _RemoteClientSteamClient_NotifyRemotePacket_Handler,
		},
		{
			MethodName: "NotifySteamBroadcastPacket",
			Handler:    _RemoteClientSteamClient_NotifySteamBroadcastPacket_Handler,
		},
		{
			MethodName: "NotifySteamToSteamPacket",
			Handler:    _RemoteClientSteamClient_NotifySteamToSteamPacket_Handler,
		},
		{
			MethodName: "NotifyRemotePlayTogetherPacket",
			Handler:    _RemoteClientSteamClient_NotifyRemotePlayTogetherPacket_Handler,
		},
		{
			MethodName: "NotifyTaskList",
			Handler:    _RemoteClientSteamClient_NotifyTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_remoteclient_service.steamclient.proto",
}
