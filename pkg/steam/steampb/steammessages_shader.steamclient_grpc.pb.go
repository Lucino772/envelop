// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_shader.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShaderClient is the client API for Shader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShaderClient interface {
	GetShaderReportingCadence(ctx context.Context, in *CShader_GetShaderReportingCadence_Request, opts ...grpc.CallOption) (*CShader_GetShaderReportingCadence_Response, error)
	RegisterShader(ctx context.Context, in *CShader_RegisterShader_Request, opts ...grpc.CallOption) (*CShader_RegisterShader_Response, error)
	SendShader(ctx context.Context, in *CShader_SendShader_Request, opts ...grpc.CallOption) (*CShader_SendShader_Response, error)
	GetBucketManifest(ctx context.Context, in *CShader_GetBucketManifest_Request, opts ...grpc.CallOption) (*CShader_GetBucketManifest_Response, error)
	GetStaleBucket(ctx context.Context, in *CShader_GetStaleBucket_Request, opts ...grpc.CallOption) (*CShader_GetStaleBucket_Response, error)
	ReportExternalBuild(ctx context.Context, in *CShader_ReportExternalBuild_Request, opts ...grpc.CallOption) (*CShader_ReportExternalBuild_Response, error)
}

type shaderClient struct {
	cc grpc.ClientConnInterface
}

func NewShaderClient(cc grpc.ClientConnInterface) ShaderClient {
	return &shaderClient{cc}
}

func (c *shaderClient) GetShaderReportingCadence(ctx context.Context, in *CShader_GetShaderReportingCadence_Request, opts ...grpc.CallOption) (*CShader_GetShaderReportingCadence_Response, error) {
	out := new(CShader_GetShaderReportingCadence_Response)
	err := c.cc.Invoke(ctx, "/Shader/GetShaderReportingCadence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaderClient) RegisterShader(ctx context.Context, in *CShader_RegisterShader_Request, opts ...grpc.CallOption) (*CShader_RegisterShader_Response, error) {
	out := new(CShader_RegisterShader_Response)
	err := c.cc.Invoke(ctx, "/Shader/RegisterShader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaderClient) SendShader(ctx context.Context, in *CShader_SendShader_Request, opts ...grpc.CallOption) (*CShader_SendShader_Response, error) {
	out := new(CShader_SendShader_Response)
	err := c.cc.Invoke(ctx, "/Shader/SendShader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaderClient) GetBucketManifest(ctx context.Context, in *CShader_GetBucketManifest_Request, opts ...grpc.CallOption) (*CShader_GetBucketManifest_Response, error) {
	out := new(CShader_GetBucketManifest_Response)
	err := c.cc.Invoke(ctx, "/Shader/GetBucketManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaderClient) GetStaleBucket(ctx context.Context, in *CShader_GetStaleBucket_Request, opts ...grpc.CallOption) (*CShader_GetStaleBucket_Response, error) {
	out := new(CShader_GetStaleBucket_Response)
	err := c.cc.Invoke(ctx, "/Shader/GetStaleBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaderClient) ReportExternalBuild(ctx context.Context, in *CShader_ReportExternalBuild_Request, opts ...grpc.CallOption) (*CShader_ReportExternalBuild_Response, error) {
	out := new(CShader_ReportExternalBuild_Response)
	err := c.cc.Invoke(ctx, "/Shader/ReportExternalBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShaderServer is the server API for Shader service.
// All implementations must embed UnimplementedShaderServer
// for forward compatibility
type ShaderServer interface {
	GetShaderReportingCadence(context.Context, *CShader_GetShaderReportingCadence_Request) (*CShader_GetShaderReportingCadence_Response, error)
	RegisterShader(context.Context, *CShader_RegisterShader_Request) (*CShader_RegisterShader_Response, error)
	SendShader(context.Context, *CShader_SendShader_Request) (*CShader_SendShader_Response, error)
	GetBucketManifest(context.Context, *CShader_GetBucketManifest_Request) (*CShader_GetBucketManifest_Response, error)
	GetStaleBucket(context.Context, *CShader_GetStaleBucket_Request) (*CShader_GetStaleBucket_Response, error)
	ReportExternalBuild(context.Context, *CShader_ReportExternalBuild_Request) (*CShader_ReportExternalBuild_Response, error)
	mustEmbedUnimplementedShaderServer()
}

// UnimplementedShaderServer must be embedded to have forward compatible implementations.
type UnimplementedShaderServer struct {
}

func (UnimplementedShaderServer) GetShaderReportingCadence(context.Context, *CShader_GetShaderReportingCadence_Request) (*CShader_GetShaderReportingCadence_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShaderReportingCadence not implemented")
}
func (UnimplementedShaderServer) RegisterShader(context.Context, *CShader_RegisterShader_Request) (*CShader_RegisterShader_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterShader not implemented")
}
func (UnimplementedShaderServer) SendShader(context.Context, *CShader_SendShader_Request) (*CShader_SendShader_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShader not implemented")
}
func (UnimplementedShaderServer) GetBucketManifest(context.Context, *CShader_GetBucketManifest_Request) (*CShader_GetBucketManifest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketManifest not implemented")
}
func (UnimplementedShaderServer) GetStaleBucket(context.Context, *CShader_GetStaleBucket_Request) (*CShader_GetStaleBucket_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaleBucket not implemented")
}
func (UnimplementedShaderServer) ReportExternalBuild(context.Context, *CShader_ReportExternalBuild_Request) (*CShader_ReportExternalBuild_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportExternalBuild not implemented")
}
func (UnimplementedShaderServer) mustEmbedUnimplementedShaderServer() {}

// UnsafeShaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShaderServer will
// result in compilation errors.
type UnsafeShaderServer interface {
	mustEmbedUnimplementedShaderServer()
}

func RegisterShaderServer(s grpc.ServiceRegistrar, srv ShaderServer) {
	s.RegisterService(&Shader_ServiceDesc, srv)
}

func _Shader_GetShaderReportingCadence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_GetShaderReportingCadence_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).GetShaderReportingCadence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/GetShaderReportingCadence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).GetShaderReportingCadence(ctx, req.(*CShader_GetShaderReportingCadence_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shader_RegisterShader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_RegisterShader_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).RegisterShader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/RegisterShader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).RegisterShader(ctx, req.(*CShader_RegisterShader_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shader_SendShader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_SendShader_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).SendShader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/SendShader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).SendShader(ctx, req.(*CShader_SendShader_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shader_GetBucketManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_GetBucketManifest_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).GetBucketManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/GetBucketManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).GetBucketManifest(ctx, req.(*CShader_GetBucketManifest_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shader_GetStaleBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_GetStaleBucket_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).GetStaleBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/GetStaleBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).GetStaleBucket(ctx, req.(*CShader_GetStaleBucket_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shader_ReportExternalBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CShader_ReportExternalBuild_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaderServer).ReportExternalBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shader/ReportExternalBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaderServer).ReportExternalBuild(ctx, req.(*CShader_ReportExternalBuild_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Shader_ServiceDesc is the grpc.ServiceDesc for Shader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Shader",
	HandlerType: (*ShaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShaderReportingCadence",
			Handler:    _Shader_GetShaderReportingCadence_Handler,
		},
		{
			MethodName: "RegisterShader",
			Handler:    _Shader_RegisterShader_Handler,
		},
		{
			MethodName: "SendShader",
			Handler:    _Shader_SendShader_Handler,
		},
		{
			MethodName: "GetBucketManifest",
			Handler:    _Shader_GetBucketManifest_Handler,
		},
		{
			MethodName: "GetStaleBucket",
			Handler:    _Shader_GetStaleBucket_Handler,
		},
		{
			MethodName: "ReportExternalBuild",
			Handler:    _Shader_ReportExternalBuild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_shader.steamclient.proto",
}
