// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_steamtv.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SteamTVClient is the client API for SteamTV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteamTVClient interface {
	CreateBroadcastChannel(ctx context.Context, in *CSteamTV_CreateBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_CreateBroadcastChannel_Response, error)
	GetBroadcastChannelID(ctx context.Context, in *CSteamTV_GetBroadcastChannelID_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelID_Response, error)
	SetBroadcastChannelProfile(ctx context.Context, in *CSteamTV_SetBroadcastChannelProfile_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelProfile_Response, error)
	GetBroadcastChannelProfile(ctx context.Context, in *CSteamTV_GetBroadcastChannelProfile_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelProfile_Response, error)
	SetBroadcastChannelImage(ctx context.Context, in *CSteamTV_SetBroadcastChannelImage_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelImage_Response, error)
	GetBroadcastChannelImages(ctx context.Context, in *CSteamTV_GetBroadcastChannelImages_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelImages_Response, error)
	SetBroadcastChannelLinkRegions(ctx context.Context, in *CSteamTV_SetBroadcastChannelLinkRegions_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelLinkRegions_Response, error)
	GetBroadcastChannelLinks(ctx context.Context, in *CSteamTV_GetBroadcastChannelLinks_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelLinks_Response, error)
	GetBroadcastChannelBroadcasters(ctx context.Context, in *CSteamTV_GetBroadcastChannelBroadcasters_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelBroadcasters_Response, error)
	GetFollowedChannels(ctx context.Context, in *CSteamTV_GetFollowedChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetFollowedChannels_Response, error)
	GetSubscribedChannels(ctx context.Context, in *CSteamTV_GetSubscribedChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetSubscribedChannels_Response, error)
	GetBroadcastChannelStatus(ctx context.Context, in *CSteamTV_GetBroadcastChannelStatus_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelStatus_Response, error)
	FollowBroadcastChannel(ctx context.Context, in *CSteamTV_FollowBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_FollowBroadcastChannel_Response, error)
	SubscribeBroadcastChannel(ctx context.Context, in *CSteamTV_SubscribeBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_SubscribeBroadcastChannel_Response, error)
	GetBroadcastChannelClips(ctx context.Context, in *CSteamTV_GetBroadcastChannelClips_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelClips_Response, error)
	ReportBroadcastChannel(ctx context.Context, in *CSteamTV_ReportBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_ReportBroadcastChannel_Response, error)
	GetBroadcastChannelInteraction(ctx context.Context, in *CSteamTV_GetBroadcastChannelInteraction_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelInteraction_Response, error)
	GetGames(ctx context.Context, in *CSteamTV_GetGames_Request, opts ...grpc.CallOption) (*CSteamTV_GetGames_Response, error)
	GetChannels(ctx context.Context, in *CSteamTV_GetChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetChannels_Response, error)
	AddChatBan(ctx context.Context, in *CSteamTV_AddChatBan_Request, opts ...grpc.CallOption) (*CSteamTV_AddChatBan_Response, error)
	GetChatBans(ctx context.Context, in *CSteamTV_GetChatBans_Request, opts ...grpc.CallOption) (*CSteamTV_GetChatBans_Response, error)
	AddChatModerator(ctx context.Context, in *CSteamTV_AddChatModerator_Request, opts ...grpc.CallOption) (*CSteamTV_AddChatModerator_Response, error)
	GetChatModerators(ctx context.Context, in *CSteamTV_GetChatModerators_Request, opts ...grpc.CallOption) (*CSteamTV_GetChatModerators_Response, error)
	AddWordBan(ctx context.Context, in *CSteamTV_AddWordBan_Request, opts ...grpc.CallOption) (*CSteamTV_AddWordBan_Response, error)
	GetWordBans(ctx context.Context, in *CSteamTV_GetWordBans_Request, opts ...grpc.CallOption) (*CSteamTV_GetWordBans_Response, error)
	JoinChat(ctx context.Context, in *CSteamTV_JoinChat_Request, opts ...grpc.CallOption) (*CSteamTV_JoinChat_Response, error)
	Search(ctx context.Context, in *CSteamTV_Search_Request, opts ...grpc.CallOption) (*CSteamTV_Search_Response, error)
	GetSteamTVUserSettings(ctx context.Context, in *CSteamTV_GetSteamTVUserSettings_Request, opts ...grpc.CallOption) (*CSteamTV_GetSteamTVUserSettings_Response, error)
	SetSteamTVUserSettings(ctx context.Context, in *CSteamTV_SetSteamTVUserSettings_Request, opts ...grpc.CallOption) (*CSteamTV_SetSteamTVUserSettings_Response, error)
	GetMyBroadcastChannels(ctx context.Context, in *CSteamTV_GetMyBroadcastChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetMyBroadcastChannels_Response, error)
	GetHomePageContents(ctx context.Context, in *CSteamTV_GetHomePageContents_Request, opts ...grpc.CallOption) (*CSteamTV_GetHomePageContents_Response, error)
	AppCheer(ctx context.Context, in *CSteamTV_AppCheer_Request, opts ...grpc.CallOption) (*CSteamTV_AppCheer_Response, error)
}

type steamTVClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamTVClient(cc grpc.ClientConnInterface) SteamTVClient {
	return &steamTVClient{cc}
}

func (c *steamTVClient) CreateBroadcastChannel(ctx context.Context, in *CSteamTV_CreateBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_CreateBroadcastChannel_Response, error) {
	out := new(CSteamTV_CreateBroadcastChannel_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/CreateBroadcastChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelID(ctx context.Context, in *CSteamTV_GetBroadcastChannelID_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelID_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelID_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) SetBroadcastChannelProfile(ctx context.Context, in *CSteamTV_SetBroadcastChannelProfile_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelProfile_Response, error) {
	out := new(CSteamTV_SetBroadcastChannelProfile_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/SetBroadcastChannelProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelProfile(ctx context.Context, in *CSteamTV_GetBroadcastChannelProfile_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelProfile_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelProfile_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) SetBroadcastChannelImage(ctx context.Context, in *CSteamTV_SetBroadcastChannelImage_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelImage_Response, error) {
	out := new(CSteamTV_SetBroadcastChannelImage_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/SetBroadcastChannelImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelImages(ctx context.Context, in *CSteamTV_GetBroadcastChannelImages_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelImages_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelImages_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) SetBroadcastChannelLinkRegions(ctx context.Context, in *CSteamTV_SetBroadcastChannelLinkRegions_Request, opts ...grpc.CallOption) (*CSteamTV_SetBroadcastChannelLinkRegions_Response, error) {
	out := new(CSteamTV_SetBroadcastChannelLinkRegions_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/SetBroadcastChannelLinkRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelLinks(ctx context.Context, in *CSteamTV_GetBroadcastChannelLinks_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelLinks_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelLinks_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelBroadcasters(ctx context.Context, in *CSteamTV_GetBroadcastChannelBroadcasters_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelBroadcasters_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelBroadcasters_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelBroadcasters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetFollowedChannels(ctx context.Context, in *CSteamTV_GetFollowedChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetFollowedChannels_Response, error) {
	out := new(CSteamTV_GetFollowedChannels_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetFollowedChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetSubscribedChannels(ctx context.Context, in *CSteamTV_GetSubscribedChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetSubscribedChannels_Response, error) {
	out := new(CSteamTV_GetSubscribedChannels_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetSubscribedChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelStatus(ctx context.Context, in *CSteamTV_GetBroadcastChannelStatus_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelStatus_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelStatus_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) FollowBroadcastChannel(ctx context.Context, in *CSteamTV_FollowBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_FollowBroadcastChannel_Response, error) {
	out := new(CSteamTV_FollowBroadcastChannel_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/FollowBroadcastChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) SubscribeBroadcastChannel(ctx context.Context, in *CSteamTV_SubscribeBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_SubscribeBroadcastChannel_Response, error) {
	out := new(CSteamTV_SubscribeBroadcastChannel_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/SubscribeBroadcastChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelClips(ctx context.Context, in *CSteamTV_GetBroadcastChannelClips_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelClips_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelClips_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelClips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) ReportBroadcastChannel(ctx context.Context, in *CSteamTV_ReportBroadcastChannel_Request, opts ...grpc.CallOption) (*CSteamTV_ReportBroadcastChannel_Response, error) {
	out := new(CSteamTV_ReportBroadcastChannel_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/ReportBroadcastChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetBroadcastChannelInteraction(ctx context.Context, in *CSteamTV_GetBroadcastChannelInteraction_Request, opts ...grpc.CallOption) (*CSteamTV_GetBroadcastChannelInteraction_Response, error) {
	out := new(CSteamTV_GetBroadcastChannelInteraction_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetBroadcastChannelInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetGames(ctx context.Context, in *CSteamTV_GetGames_Request, opts ...grpc.CallOption) (*CSteamTV_GetGames_Response, error) {
	out := new(CSteamTV_GetGames_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetChannels(ctx context.Context, in *CSteamTV_GetChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetChannels_Response, error) {
	out := new(CSteamTV_GetChannels_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) AddChatBan(ctx context.Context, in *CSteamTV_AddChatBan_Request, opts ...grpc.CallOption) (*CSteamTV_AddChatBan_Response, error) {
	out := new(CSteamTV_AddChatBan_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/AddChatBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetChatBans(ctx context.Context, in *CSteamTV_GetChatBans_Request, opts ...grpc.CallOption) (*CSteamTV_GetChatBans_Response, error) {
	out := new(CSteamTV_GetChatBans_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetChatBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) AddChatModerator(ctx context.Context, in *CSteamTV_AddChatModerator_Request, opts ...grpc.CallOption) (*CSteamTV_AddChatModerator_Response, error) {
	out := new(CSteamTV_AddChatModerator_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/AddChatModerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetChatModerators(ctx context.Context, in *CSteamTV_GetChatModerators_Request, opts ...grpc.CallOption) (*CSteamTV_GetChatModerators_Response, error) {
	out := new(CSteamTV_GetChatModerators_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetChatModerators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) AddWordBan(ctx context.Context, in *CSteamTV_AddWordBan_Request, opts ...grpc.CallOption) (*CSteamTV_AddWordBan_Response, error) {
	out := new(CSteamTV_AddWordBan_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/AddWordBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetWordBans(ctx context.Context, in *CSteamTV_GetWordBans_Request, opts ...grpc.CallOption) (*CSteamTV_GetWordBans_Response, error) {
	out := new(CSteamTV_GetWordBans_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetWordBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) JoinChat(ctx context.Context, in *CSteamTV_JoinChat_Request, opts ...grpc.CallOption) (*CSteamTV_JoinChat_Response, error) {
	out := new(CSteamTV_JoinChat_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/JoinChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) Search(ctx context.Context, in *CSteamTV_Search_Request, opts ...grpc.CallOption) (*CSteamTV_Search_Response, error) {
	out := new(CSteamTV_Search_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetSteamTVUserSettings(ctx context.Context, in *CSteamTV_GetSteamTVUserSettings_Request, opts ...grpc.CallOption) (*CSteamTV_GetSteamTVUserSettings_Response, error) {
	out := new(CSteamTV_GetSteamTVUserSettings_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetSteamTVUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) SetSteamTVUserSettings(ctx context.Context, in *CSteamTV_SetSteamTVUserSettings_Request, opts ...grpc.CallOption) (*CSteamTV_SetSteamTVUserSettings_Response, error) {
	out := new(CSteamTV_SetSteamTVUserSettings_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/SetSteamTVUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetMyBroadcastChannels(ctx context.Context, in *CSteamTV_GetMyBroadcastChannels_Request, opts ...grpc.CallOption) (*CSteamTV_GetMyBroadcastChannels_Response, error) {
	out := new(CSteamTV_GetMyBroadcastChannels_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetMyBroadcastChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) GetHomePageContents(ctx context.Context, in *CSteamTV_GetHomePageContents_Request, opts ...grpc.CallOption) (*CSteamTV_GetHomePageContents_Response, error) {
	out := new(CSteamTV_GetHomePageContents_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/GetHomePageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamTVClient) AppCheer(ctx context.Context, in *CSteamTV_AppCheer_Request, opts ...grpc.CallOption) (*CSteamTV_AppCheer_Response, error) {
	out := new(CSteamTV_AppCheer_Response)
	err := c.cc.Invoke(ctx, "/SteamTV/AppCheer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamTVServer is the server API for SteamTV service.
// All implementations must embed UnimplementedSteamTVServer
// for forward compatibility
type SteamTVServer interface {
	CreateBroadcastChannel(context.Context, *CSteamTV_CreateBroadcastChannel_Request) (*CSteamTV_CreateBroadcastChannel_Response, error)
	GetBroadcastChannelID(context.Context, *CSteamTV_GetBroadcastChannelID_Request) (*CSteamTV_GetBroadcastChannelID_Response, error)
	SetBroadcastChannelProfile(context.Context, *CSteamTV_SetBroadcastChannelProfile_Request) (*CSteamTV_SetBroadcastChannelProfile_Response, error)
	GetBroadcastChannelProfile(context.Context, *CSteamTV_GetBroadcastChannelProfile_Request) (*CSteamTV_GetBroadcastChannelProfile_Response, error)
	SetBroadcastChannelImage(context.Context, *CSteamTV_SetBroadcastChannelImage_Request) (*CSteamTV_SetBroadcastChannelImage_Response, error)
	GetBroadcastChannelImages(context.Context, *CSteamTV_GetBroadcastChannelImages_Request) (*CSteamTV_GetBroadcastChannelImages_Response, error)
	SetBroadcastChannelLinkRegions(context.Context, *CSteamTV_SetBroadcastChannelLinkRegions_Request) (*CSteamTV_SetBroadcastChannelLinkRegions_Response, error)
	GetBroadcastChannelLinks(context.Context, *CSteamTV_GetBroadcastChannelLinks_Request) (*CSteamTV_GetBroadcastChannelLinks_Response, error)
	GetBroadcastChannelBroadcasters(context.Context, *CSteamTV_GetBroadcastChannelBroadcasters_Request) (*CSteamTV_GetBroadcastChannelBroadcasters_Response, error)
	GetFollowedChannels(context.Context, *CSteamTV_GetFollowedChannels_Request) (*CSteamTV_GetFollowedChannels_Response, error)
	GetSubscribedChannels(context.Context, *CSteamTV_GetSubscribedChannels_Request) (*CSteamTV_GetSubscribedChannels_Response, error)
	GetBroadcastChannelStatus(context.Context, *CSteamTV_GetBroadcastChannelStatus_Request) (*CSteamTV_GetBroadcastChannelStatus_Response, error)
	FollowBroadcastChannel(context.Context, *CSteamTV_FollowBroadcastChannel_Request) (*CSteamTV_FollowBroadcastChannel_Response, error)
	SubscribeBroadcastChannel(context.Context, *CSteamTV_SubscribeBroadcastChannel_Request) (*CSteamTV_SubscribeBroadcastChannel_Response, error)
	GetBroadcastChannelClips(context.Context, *CSteamTV_GetBroadcastChannelClips_Request) (*CSteamTV_GetBroadcastChannelClips_Response, error)
	ReportBroadcastChannel(context.Context, *CSteamTV_ReportBroadcastChannel_Request) (*CSteamTV_ReportBroadcastChannel_Response, error)
	GetBroadcastChannelInteraction(context.Context, *CSteamTV_GetBroadcastChannelInteraction_Request) (*CSteamTV_GetBroadcastChannelInteraction_Response, error)
	GetGames(context.Context, *CSteamTV_GetGames_Request) (*CSteamTV_GetGames_Response, error)
	GetChannels(context.Context, *CSteamTV_GetChannels_Request) (*CSteamTV_GetChannels_Response, error)
	AddChatBan(context.Context, *CSteamTV_AddChatBan_Request) (*CSteamTV_AddChatBan_Response, error)
	GetChatBans(context.Context, *CSteamTV_GetChatBans_Request) (*CSteamTV_GetChatBans_Response, error)
	AddChatModerator(context.Context, *CSteamTV_AddChatModerator_Request) (*CSteamTV_AddChatModerator_Response, error)
	GetChatModerators(context.Context, *CSteamTV_GetChatModerators_Request) (*CSteamTV_GetChatModerators_Response, error)
	AddWordBan(context.Context, *CSteamTV_AddWordBan_Request) (*CSteamTV_AddWordBan_Response, error)
	GetWordBans(context.Context, *CSteamTV_GetWordBans_Request) (*CSteamTV_GetWordBans_Response, error)
	JoinChat(context.Context, *CSteamTV_JoinChat_Request) (*CSteamTV_JoinChat_Response, error)
	Search(context.Context, *CSteamTV_Search_Request) (*CSteamTV_Search_Response, error)
	GetSteamTVUserSettings(context.Context, *CSteamTV_GetSteamTVUserSettings_Request) (*CSteamTV_GetSteamTVUserSettings_Response, error)
	SetSteamTVUserSettings(context.Context, *CSteamTV_SetSteamTVUserSettings_Request) (*CSteamTV_SetSteamTVUserSettings_Response, error)
	GetMyBroadcastChannels(context.Context, *CSteamTV_GetMyBroadcastChannels_Request) (*CSteamTV_GetMyBroadcastChannels_Response, error)
	GetHomePageContents(context.Context, *CSteamTV_GetHomePageContents_Request) (*CSteamTV_GetHomePageContents_Response, error)
	AppCheer(context.Context, *CSteamTV_AppCheer_Request) (*CSteamTV_AppCheer_Response, error)
	mustEmbedUnimplementedSteamTVServer()
}

// UnimplementedSteamTVServer must be embedded to have forward compatible implementations.
type UnimplementedSteamTVServer struct {
}

func (UnimplementedSteamTVServer) CreateBroadcastChannel(context.Context, *CSteamTV_CreateBroadcastChannel_Request) (*CSteamTV_CreateBroadcastChannel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBroadcastChannel not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelID(context.Context, *CSteamTV_GetBroadcastChannelID_Request) (*CSteamTV_GetBroadcastChannelID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelID not implemented")
}
func (UnimplementedSteamTVServer) SetBroadcastChannelProfile(context.Context, *CSteamTV_SetBroadcastChannelProfile_Request) (*CSteamTV_SetBroadcastChannelProfile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBroadcastChannelProfile not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelProfile(context.Context, *CSteamTV_GetBroadcastChannelProfile_Request) (*CSteamTV_GetBroadcastChannelProfile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelProfile not implemented")
}
func (UnimplementedSteamTVServer) SetBroadcastChannelImage(context.Context, *CSteamTV_SetBroadcastChannelImage_Request) (*CSteamTV_SetBroadcastChannelImage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBroadcastChannelImage not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelImages(context.Context, *CSteamTV_GetBroadcastChannelImages_Request) (*CSteamTV_GetBroadcastChannelImages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelImages not implemented")
}
func (UnimplementedSteamTVServer) SetBroadcastChannelLinkRegions(context.Context, *CSteamTV_SetBroadcastChannelLinkRegions_Request) (*CSteamTV_SetBroadcastChannelLinkRegions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBroadcastChannelLinkRegions not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelLinks(context.Context, *CSteamTV_GetBroadcastChannelLinks_Request) (*CSteamTV_GetBroadcastChannelLinks_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelLinks not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelBroadcasters(context.Context, *CSteamTV_GetBroadcastChannelBroadcasters_Request) (*CSteamTV_GetBroadcastChannelBroadcasters_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelBroadcasters not implemented")
}
func (UnimplementedSteamTVServer) GetFollowedChannels(context.Context, *CSteamTV_GetFollowedChannels_Request) (*CSteamTV_GetFollowedChannels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedChannels not implemented")
}
func (UnimplementedSteamTVServer) GetSubscribedChannels(context.Context, *CSteamTV_GetSubscribedChannels_Request) (*CSteamTV_GetSubscribedChannels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribedChannels not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelStatus(context.Context, *CSteamTV_GetBroadcastChannelStatus_Request) (*CSteamTV_GetBroadcastChannelStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelStatus not implemented")
}
func (UnimplementedSteamTVServer) FollowBroadcastChannel(context.Context, *CSteamTV_FollowBroadcastChannel_Request) (*CSteamTV_FollowBroadcastChannel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowBroadcastChannel not implemented")
}
func (UnimplementedSteamTVServer) SubscribeBroadcastChannel(context.Context, *CSteamTV_SubscribeBroadcastChannel_Request) (*CSteamTV_SubscribeBroadcastChannel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeBroadcastChannel not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelClips(context.Context, *CSteamTV_GetBroadcastChannelClips_Request) (*CSteamTV_GetBroadcastChannelClips_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelClips not implemented")
}
func (UnimplementedSteamTVServer) ReportBroadcastChannel(context.Context, *CSteamTV_ReportBroadcastChannel_Request) (*CSteamTV_ReportBroadcastChannel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBroadcastChannel not implemented")
}
func (UnimplementedSteamTVServer) GetBroadcastChannelInteraction(context.Context, *CSteamTV_GetBroadcastChannelInteraction_Request) (*CSteamTV_GetBroadcastChannelInteraction_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastChannelInteraction not implemented")
}
func (UnimplementedSteamTVServer) GetGames(context.Context, *CSteamTV_GetGames_Request) (*CSteamTV_GetGames_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedSteamTVServer) GetChannels(context.Context, *CSteamTV_GetChannels_Request) (*CSteamTV_GetChannels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedSteamTVServer) AddChatBan(context.Context, *CSteamTV_AddChatBan_Request) (*CSteamTV_AddChatBan_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatBan not implemented")
}
func (UnimplementedSteamTVServer) GetChatBans(context.Context, *CSteamTV_GetChatBans_Request) (*CSteamTV_GetChatBans_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatBans not implemented")
}
func (UnimplementedSteamTVServer) AddChatModerator(context.Context, *CSteamTV_AddChatModerator_Request) (*CSteamTV_AddChatModerator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatModerator not implemented")
}
func (UnimplementedSteamTVServer) GetChatModerators(context.Context, *CSteamTV_GetChatModerators_Request) (*CSteamTV_GetChatModerators_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatModerators not implemented")
}
func (UnimplementedSteamTVServer) AddWordBan(context.Context, *CSteamTV_AddWordBan_Request) (*CSteamTV_AddWordBan_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWordBan not implemented")
}
func (UnimplementedSteamTVServer) GetWordBans(context.Context, *CSteamTV_GetWordBans_Request) (*CSteamTV_GetWordBans_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordBans not implemented")
}
func (UnimplementedSteamTVServer) JoinChat(context.Context, *CSteamTV_JoinChat_Request) (*CSteamTV_JoinChat_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedSteamTVServer) Search(context.Context, *CSteamTV_Search_Request) (*CSteamTV_Search_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSteamTVServer) GetSteamTVUserSettings(context.Context, *CSteamTV_GetSteamTVUserSettings_Request) (*CSteamTV_GetSteamTVUserSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteamTVUserSettings not implemented")
}
func (UnimplementedSteamTVServer) SetSteamTVUserSettings(context.Context, *CSteamTV_SetSteamTVUserSettings_Request) (*CSteamTV_SetSteamTVUserSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSteamTVUserSettings not implemented")
}
func (UnimplementedSteamTVServer) GetMyBroadcastChannels(context.Context, *CSteamTV_GetMyBroadcastChannels_Request) (*CSteamTV_GetMyBroadcastChannels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyBroadcastChannels not implemented")
}
func (UnimplementedSteamTVServer) GetHomePageContents(context.Context, *CSteamTV_GetHomePageContents_Request) (*CSteamTV_GetHomePageContents_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomePageContents not implemented")
}
func (UnimplementedSteamTVServer) AppCheer(context.Context, *CSteamTV_AppCheer_Request) (*CSteamTV_AppCheer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCheer not implemented")
}
func (UnimplementedSteamTVServer) mustEmbedUnimplementedSteamTVServer() {}

// UnsafeSteamTVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamTVServer will
// result in compilation errors.
type UnsafeSteamTVServer interface {
	mustEmbedUnimplementedSteamTVServer()
}

func RegisterSteamTVServer(s grpc.ServiceRegistrar, srv SteamTVServer) {
	s.RegisterService(&SteamTV_ServiceDesc, srv)
}

func _SteamTV_CreateBroadcastChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_CreateBroadcastChannel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).CreateBroadcastChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/CreateBroadcastChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).CreateBroadcastChannel(ctx, req.(*CSteamTV_CreateBroadcastChannel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelID(ctx, req.(*CSteamTV_GetBroadcastChannelID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_SetBroadcastChannelProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_SetBroadcastChannelProfile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).SetBroadcastChannelProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/SetBroadcastChannelProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).SetBroadcastChannelProfile(ctx, req.(*CSteamTV_SetBroadcastChannelProfile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelProfile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelProfile(ctx, req.(*CSteamTV_GetBroadcastChannelProfile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_SetBroadcastChannelImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_SetBroadcastChannelImage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).SetBroadcastChannelImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/SetBroadcastChannelImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).SetBroadcastChannelImage(ctx, req.(*CSteamTV_SetBroadcastChannelImage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelImages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelImages(ctx, req.(*CSteamTV_GetBroadcastChannelImages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_SetBroadcastChannelLinkRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_SetBroadcastChannelLinkRegions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).SetBroadcastChannelLinkRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/SetBroadcastChannelLinkRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).SetBroadcastChannelLinkRegions(ctx, req.(*CSteamTV_SetBroadcastChannelLinkRegions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelLinks_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelLinks(ctx, req.(*CSteamTV_GetBroadcastChannelLinks_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelBroadcasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelBroadcasters_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelBroadcasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelBroadcasters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelBroadcasters(ctx, req.(*CSteamTV_GetBroadcastChannelBroadcasters_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetFollowedChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetFollowedChannels_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetFollowedChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetFollowedChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetFollowedChannels(ctx, req.(*CSteamTV_GetFollowedChannels_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetSubscribedChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetSubscribedChannels_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetSubscribedChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetSubscribedChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetSubscribedChannels(ctx, req.(*CSteamTV_GetSubscribedChannels_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelStatus(ctx, req.(*CSteamTV_GetBroadcastChannelStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_FollowBroadcastChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_FollowBroadcastChannel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).FollowBroadcastChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/FollowBroadcastChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).FollowBroadcastChannel(ctx, req.(*CSteamTV_FollowBroadcastChannel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_SubscribeBroadcastChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_SubscribeBroadcastChannel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).SubscribeBroadcastChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/SubscribeBroadcastChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).SubscribeBroadcastChannel(ctx, req.(*CSteamTV_SubscribeBroadcastChannel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelClips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelClips_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelClips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelClips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelClips(ctx, req.(*CSteamTV_GetBroadcastChannelClips_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_ReportBroadcastChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_ReportBroadcastChannel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).ReportBroadcastChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/ReportBroadcastChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).ReportBroadcastChannel(ctx, req.(*CSteamTV_ReportBroadcastChannel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetBroadcastChannelInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetBroadcastChannelInteraction_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetBroadcastChannelInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetBroadcastChannelInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetBroadcastChannelInteraction(ctx, req.(*CSteamTV_GetBroadcastChannelInteraction_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetGames_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetGames(ctx, req.(*CSteamTV_GetGames_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetChannels_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetChannels(ctx, req.(*CSteamTV_GetChannels_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_AddChatBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_AddChatBan_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).AddChatBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/AddChatBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).AddChatBan(ctx, req.(*CSteamTV_AddChatBan_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetChatBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetChatBans_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetChatBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetChatBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetChatBans(ctx, req.(*CSteamTV_GetChatBans_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_AddChatModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_AddChatModerator_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).AddChatModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/AddChatModerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).AddChatModerator(ctx, req.(*CSteamTV_AddChatModerator_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetChatModerators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetChatModerators_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetChatModerators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetChatModerators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetChatModerators(ctx, req.(*CSteamTV_GetChatModerators_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_AddWordBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_AddWordBan_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).AddWordBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/AddWordBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).AddWordBan(ctx, req.(*CSteamTV_AddWordBan_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetWordBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetWordBans_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetWordBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetWordBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetWordBans(ctx, req.(*CSteamTV_GetWordBans_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_JoinChat_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/JoinChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).JoinChat(ctx, req.(*CSteamTV_JoinChat_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_Search_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).Search(ctx, req.(*CSteamTV_Search_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetSteamTVUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetSteamTVUserSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetSteamTVUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetSteamTVUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetSteamTVUserSettings(ctx, req.(*CSteamTV_GetSteamTVUserSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_SetSteamTVUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_SetSteamTVUserSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).SetSteamTVUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/SetSteamTVUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).SetSteamTVUserSettings(ctx, req.(*CSteamTV_SetSteamTVUserSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetMyBroadcastChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetMyBroadcastChannels_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetMyBroadcastChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetMyBroadcastChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetMyBroadcastChannels(ctx, req.(*CSteamTV_GetMyBroadcastChannels_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_GetHomePageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_GetHomePageContents_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).GetHomePageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/GetHomePageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).GetHomePageContents(ctx, req.(*CSteamTV_GetHomePageContents_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamTV_AppCheer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamTV_AppCheer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamTVServer).AppCheer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamTV/AppCheer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamTVServer).AppCheer(ctx, req.(*CSteamTV_AppCheer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamTV_ServiceDesc is the grpc.ServiceDesc for SteamTV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamTV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SteamTV",
	HandlerType: (*SteamTVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBroadcastChannel",
			Handler:    _SteamTV_CreateBroadcastChannel_Handler,
		},
		{
			MethodName: "GetBroadcastChannelID",
			Handler:    _SteamTV_GetBroadcastChannelID_Handler,
		},
		{
			MethodName: "SetBroadcastChannelProfile",
			Handler:    _SteamTV_SetBroadcastChannelProfile_Handler,
		},
		{
			MethodName: "GetBroadcastChannelProfile",
			Handler:    _SteamTV_GetBroadcastChannelProfile_Handler,
		},
		{
			MethodName: "SetBroadcastChannelImage",
			Handler:    _SteamTV_SetBroadcastChannelImage_Handler,
		},
		{
			MethodName: "GetBroadcastChannelImages",
			Handler:    _SteamTV_GetBroadcastChannelImages_Handler,
		},
		{
			MethodName: "SetBroadcastChannelLinkRegions",
			Handler:    _SteamTV_SetBroadcastChannelLinkRegions_Handler,
		},
		{
			MethodName: "GetBroadcastChannelLinks",
			Handler:    _SteamTV_GetBroadcastChannelLinks_Handler,
		},
		{
			MethodName: "GetBroadcastChannelBroadcasters",
			Handler:    _SteamTV_GetBroadcastChannelBroadcasters_Handler,
		},
		{
			MethodName: "GetFollowedChannels",
			Handler:    _SteamTV_GetFollowedChannels_Handler,
		},
		{
			MethodName: "GetSubscribedChannels",
			Handler:    _SteamTV_GetSubscribedChannels_Handler,
		},
		{
			MethodName: "GetBroadcastChannelStatus",
			Handler:    _SteamTV_GetBroadcastChannelStatus_Handler,
		},
		{
			MethodName: "FollowBroadcastChannel",
			Handler:    _SteamTV_FollowBroadcastChannel_Handler,
		},
		{
			MethodName: "SubscribeBroadcastChannel",
			Handler:    _SteamTV_SubscribeBroadcastChannel_Handler,
		},
		{
			MethodName: "GetBroadcastChannelClips",
			Handler:    _SteamTV_GetBroadcastChannelClips_Handler,
		},
		{
			MethodName: "ReportBroadcastChannel",
			Handler:    _SteamTV_ReportBroadcastChannel_Handler,
		},
		{
			MethodName: "GetBroadcastChannelInteraction",
			Handler:    _SteamTV_GetBroadcastChannelInteraction_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _SteamTV_GetGames_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _SteamTV_GetChannels_Handler,
		},
		{
			MethodName: "AddChatBan",
			Handler:    _SteamTV_AddChatBan_Handler,
		},
		{
			MethodName: "GetChatBans",
			Handler:    _SteamTV_GetChatBans_Handler,
		},
		{
			MethodName: "AddChatModerator",
			Handler:    _SteamTV_AddChatModerator_Handler,
		},
		{
			MethodName: "GetChatModerators",
			Handler:    _SteamTV_GetChatModerators_Handler,
		},
		{
			MethodName: "AddWordBan",
			Handler:    _SteamTV_AddWordBan_Handler,
		},
		{
			MethodName: "GetWordBans",
			Handler:    _SteamTV_GetWordBans_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _SteamTV_JoinChat_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SteamTV_Search_Handler,
		},
		{
			MethodName: "GetSteamTVUserSettings",
			Handler:    _SteamTV_GetSteamTVUserSettings_Handler,
		},
		{
			MethodName: "SetSteamTVUserSettings",
			Handler:    _SteamTV_SetSteamTVUserSettings_Handler,
		},
		{
			MethodName: "GetMyBroadcastChannels",
			Handler:    _SteamTV_GetMyBroadcastChannels_Handler,
		},
		{
			MethodName: "GetHomePageContents",
			Handler:    _SteamTV_GetHomePageContents_Handler,
		},
		{
			MethodName: "AppCheer",
			Handler:    _SteamTV_AppCheer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_steamtv.steamclient.proto",
}
