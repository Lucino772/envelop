// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_store.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	RegisterCDKey(ctx context.Context, in *CStore_RegisterCDKey_Request, opts ...grpc.CallOption) (*CStore_RegisterCDKey_Response, error)
	GetMostPopularTags(ctx context.Context, in *CStore_GetMostPopularTags_Request, opts ...grpc.CallOption) (*CStore_GetMostPopularTags_Response, error)
	GetLocalizedNameForTags(ctx context.Context, in *CStore_GetLocalizedNameForTags_Request, opts ...grpc.CallOption) (*CStore_GetLocalizedNameForTags_Response, error)
	GetTagList(ctx context.Context, in *CStore_GetTagList_Request, opts ...grpc.CallOption) (*CStore_GetTagList_Response, error)
	GetDiscoveryQueue(ctx context.Context, in *CStore_GetDiscoveryQueue_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueue_Response, error)
	GetDiscoveryQueueSettings(ctx context.Context, in *CStore_GetDiscoveryQueueSettings_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueueSettings_Response, error)
	SkipDiscoveryQueueItem(ctx context.Context, in *CStore_SkipDiscoveryQueueItem_Request, opts ...grpc.CallOption) (*CStore_SkipDiscoveryQueueItem_Response, error)
	GetUserGameInterestState(ctx context.Context, in *CStore_GetUserGameInterestState_Request, opts ...grpc.CallOption) (*CStore_GetUserGameInterestState_Response, error)
	GetDiscoveryQueueSkippedApps(ctx context.Context, in *CStore_GetDiscoveryQueueSkippedApps_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueueSkippedApps_Response, error)
	ReportApp(ctx context.Context, in *CStore_ReportApp_Request, opts ...grpc.CallOption) (*CStore_ReportApp_Response, error)
	GetStorePreferences(ctx context.Context, in *CStore_GetStorePreferences_Request, opts ...grpc.CallOption) (*CStore_GetStorePreferences_Response, error)
	GetTrendingAppsAmongFriends(ctx context.Context, in *CStore_GetTrendingAppsAmongFriends_Request, opts ...grpc.CallOption) (*CStore_GetTrendingAppsAmongFriends_Response, error)
	MigratePartnerLinkTracking(ctx context.Context, in *CStore_MigratePartnerLinkTracking_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	UpdatePackageReservations(ctx context.Context, in *CStore_UpdatePackageReservations_Request, opts ...grpc.CallOption) (*CStore_UpdatePackageReservations_Response, error)
	GetWishlistDemoEmailStatus(ctx context.Context, in *CStore_GetWishlistDemoEmailStatus_Request, opts ...grpc.CallOption) (*CStore_GetWishlistDemoEmailStatus_Response, error)
	QueueWishlistDemoEmailToFire(ctx context.Context, in *CStore_QueueWishlistDemoEmailToFire_Request, opts ...grpc.CallOption) (*CStore_QueueWishlistDemoEmailToFire_Response, error)
	SetReservationPositionMessage(ctx context.Context, in *CStore_SetReservationPositionMessage_Request, opts ...grpc.CallOption) (*CStore_SetReservationPositionMessage_Response, error)
	DeleteReservationPositionMessage(ctx context.Context, in *CStore_DeleteReservationPositionMessage_Request, opts ...grpc.CallOption) (*CStore_DeleteReservationPositionMessage_Response, error)
	GetAllReservationPositionMessages(ctx context.Context, in *CStore_GetAllReservationPositionMessages_Request, opts ...grpc.CallOption) (*CStore_GetAllReservationPositionMessages_Response, error)
	ReloadAllReservationPositionMessages(ctx context.Context, in *CStore_ReloadAllReservationPositionMessages_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	SetCompatibilityFeedback(ctx context.Context, in *CSteamDeckCompatibility_SetFeedback_Request, opts ...grpc.CallOption) (*CSteamDeckCompatibility_SetFeedback_Response, error)
	ShouldPromptForCompatibilityFeedback(ctx context.Context, in *CSteamDeckCompatibility_ShouldPrompt_Request, opts ...grpc.CallOption) (*CSteamDeckCompatibility_ShouldPrompt_Response, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) RegisterCDKey(ctx context.Context, in *CStore_RegisterCDKey_Request, opts ...grpc.CallOption) (*CStore_RegisterCDKey_Response, error) {
	out := new(CStore_RegisterCDKey_Response)
	err := c.cc.Invoke(ctx, "/Store/RegisterCDKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetMostPopularTags(ctx context.Context, in *CStore_GetMostPopularTags_Request, opts ...grpc.CallOption) (*CStore_GetMostPopularTags_Response, error) {
	out := new(CStore_GetMostPopularTags_Response)
	err := c.cc.Invoke(ctx, "/Store/GetMostPopularTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetLocalizedNameForTags(ctx context.Context, in *CStore_GetLocalizedNameForTags_Request, opts ...grpc.CallOption) (*CStore_GetLocalizedNameForTags_Response, error) {
	out := new(CStore_GetLocalizedNameForTags_Response)
	err := c.cc.Invoke(ctx, "/Store/GetLocalizedNameForTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetTagList(ctx context.Context, in *CStore_GetTagList_Request, opts ...grpc.CallOption) (*CStore_GetTagList_Response, error) {
	out := new(CStore_GetTagList_Response)
	err := c.cc.Invoke(ctx, "/Store/GetTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetDiscoveryQueue(ctx context.Context, in *CStore_GetDiscoveryQueue_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueue_Response, error) {
	out := new(CStore_GetDiscoveryQueue_Response)
	err := c.cc.Invoke(ctx, "/Store/GetDiscoveryQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetDiscoveryQueueSettings(ctx context.Context, in *CStore_GetDiscoveryQueueSettings_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueueSettings_Response, error) {
	out := new(CStore_GetDiscoveryQueueSettings_Response)
	err := c.cc.Invoke(ctx, "/Store/GetDiscoveryQueueSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) SkipDiscoveryQueueItem(ctx context.Context, in *CStore_SkipDiscoveryQueueItem_Request, opts ...grpc.CallOption) (*CStore_SkipDiscoveryQueueItem_Response, error) {
	out := new(CStore_SkipDiscoveryQueueItem_Response)
	err := c.cc.Invoke(ctx, "/Store/SkipDiscoveryQueueItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetUserGameInterestState(ctx context.Context, in *CStore_GetUserGameInterestState_Request, opts ...grpc.CallOption) (*CStore_GetUserGameInterestState_Response, error) {
	out := new(CStore_GetUserGameInterestState_Response)
	err := c.cc.Invoke(ctx, "/Store/GetUserGameInterestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetDiscoveryQueueSkippedApps(ctx context.Context, in *CStore_GetDiscoveryQueueSkippedApps_Request, opts ...grpc.CallOption) (*CStore_GetDiscoveryQueueSkippedApps_Response, error) {
	out := new(CStore_GetDiscoveryQueueSkippedApps_Response)
	err := c.cc.Invoke(ctx, "/Store/GetDiscoveryQueueSkippedApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ReportApp(ctx context.Context, in *CStore_ReportApp_Request, opts ...grpc.CallOption) (*CStore_ReportApp_Response, error) {
	out := new(CStore_ReportApp_Response)
	err := c.cc.Invoke(ctx, "/Store/ReportApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStorePreferences(ctx context.Context, in *CStore_GetStorePreferences_Request, opts ...grpc.CallOption) (*CStore_GetStorePreferences_Response, error) {
	out := new(CStore_GetStorePreferences_Response)
	err := c.cc.Invoke(ctx, "/Store/GetStorePreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetTrendingAppsAmongFriends(ctx context.Context, in *CStore_GetTrendingAppsAmongFriends_Request, opts ...grpc.CallOption) (*CStore_GetTrendingAppsAmongFriends_Response, error) {
	out := new(CStore_GetTrendingAppsAmongFriends_Response)
	err := c.cc.Invoke(ctx, "/Store/GetTrendingAppsAmongFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) MigratePartnerLinkTracking(ctx context.Context, in *CStore_MigratePartnerLinkTracking_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Store/MigratePartnerLinkTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdatePackageReservations(ctx context.Context, in *CStore_UpdatePackageReservations_Request, opts ...grpc.CallOption) (*CStore_UpdatePackageReservations_Response, error) {
	out := new(CStore_UpdatePackageReservations_Response)
	err := c.cc.Invoke(ctx, "/Store/UpdatePackageReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetWishlistDemoEmailStatus(ctx context.Context, in *CStore_GetWishlistDemoEmailStatus_Request, opts ...grpc.CallOption) (*CStore_GetWishlistDemoEmailStatus_Response, error) {
	out := new(CStore_GetWishlistDemoEmailStatus_Response)
	err := c.cc.Invoke(ctx, "/Store/GetWishlistDemoEmailStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) QueueWishlistDemoEmailToFire(ctx context.Context, in *CStore_QueueWishlistDemoEmailToFire_Request, opts ...grpc.CallOption) (*CStore_QueueWishlistDemoEmailToFire_Response, error) {
	out := new(CStore_QueueWishlistDemoEmailToFire_Response)
	err := c.cc.Invoke(ctx, "/Store/QueueWishlistDemoEmailToFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) SetReservationPositionMessage(ctx context.Context, in *CStore_SetReservationPositionMessage_Request, opts ...grpc.CallOption) (*CStore_SetReservationPositionMessage_Response, error) {
	out := new(CStore_SetReservationPositionMessage_Response)
	err := c.cc.Invoke(ctx, "/Store/SetReservationPositionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DeleteReservationPositionMessage(ctx context.Context, in *CStore_DeleteReservationPositionMessage_Request, opts ...grpc.CallOption) (*CStore_DeleteReservationPositionMessage_Response, error) {
	out := new(CStore_DeleteReservationPositionMessage_Response)
	err := c.cc.Invoke(ctx, "/Store/DeleteReservationPositionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetAllReservationPositionMessages(ctx context.Context, in *CStore_GetAllReservationPositionMessages_Request, opts ...grpc.CallOption) (*CStore_GetAllReservationPositionMessages_Response, error) {
	out := new(CStore_GetAllReservationPositionMessages_Response)
	err := c.cc.Invoke(ctx, "/Store/GetAllReservationPositionMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ReloadAllReservationPositionMessages(ctx context.Context, in *CStore_ReloadAllReservationPositionMessages_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Store/ReloadAllReservationPositionMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) SetCompatibilityFeedback(ctx context.Context, in *CSteamDeckCompatibility_SetFeedback_Request, opts ...grpc.CallOption) (*CSteamDeckCompatibility_SetFeedback_Response, error) {
	out := new(CSteamDeckCompatibility_SetFeedback_Response)
	err := c.cc.Invoke(ctx, "/Store/SetCompatibilityFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ShouldPromptForCompatibilityFeedback(ctx context.Context, in *CSteamDeckCompatibility_ShouldPrompt_Request, opts ...grpc.CallOption) (*CSteamDeckCompatibility_ShouldPrompt_Response, error) {
	out := new(CSteamDeckCompatibility_ShouldPrompt_Response)
	err := c.cc.Invoke(ctx, "/Store/ShouldPromptForCompatibilityFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	RegisterCDKey(context.Context, *CStore_RegisterCDKey_Request) (*CStore_RegisterCDKey_Response, error)
	GetMostPopularTags(context.Context, *CStore_GetMostPopularTags_Request) (*CStore_GetMostPopularTags_Response, error)
	GetLocalizedNameForTags(context.Context, *CStore_GetLocalizedNameForTags_Request) (*CStore_GetLocalizedNameForTags_Response, error)
	GetTagList(context.Context, *CStore_GetTagList_Request) (*CStore_GetTagList_Response, error)
	GetDiscoveryQueue(context.Context, *CStore_GetDiscoveryQueue_Request) (*CStore_GetDiscoveryQueue_Response, error)
	GetDiscoveryQueueSettings(context.Context, *CStore_GetDiscoveryQueueSettings_Request) (*CStore_GetDiscoveryQueueSettings_Response, error)
	SkipDiscoveryQueueItem(context.Context, *CStore_SkipDiscoveryQueueItem_Request) (*CStore_SkipDiscoveryQueueItem_Response, error)
	GetUserGameInterestState(context.Context, *CStore_GetUserGameInterestState_Request) (*CStore_GetUserGameInterestState_Response, error)
	GetDiscoveryQueueSkippedApps(context.Context, *CStore_GetDiscoveryQueueSkippedApps_Request) (*CStore_GetDiscoveryQueueSkippedApps_Response, error)
	ReportApp(context.Context, *CStore_ReportApp_Request) (*CStore_ReportApp_Response, error)
	GetStorePreferences(context.Context, *CStore_GetStorePreferences_Request) (*CStore_GetStorePreferences_Response, error)
	GetTrendingAppsAmongFriends(context.Context, *CStore_GetTrendingAppsAmongFriends_Request) (*CStore_GetTrendingAppsAmongFriends_Response, error)
	MigratePartnerLinkTracking(context.Context, *CStore_MigratePartnerLinkTracking_Notification) (*NoResponse, error)
	UpdatePackageReservations(context.Context, *CStore_UpdatePackageReservations_Request) (*CStore_UpdatePackageReservations_Response, error)
	GetWishlistDemoEmailStatus(context.Context, *CStore_GetWishlistDemoEmailStatus_Request) (*CStore_GetWishlistDemoEmailStatus_Response, error)
	QueueWishlistDemoEmailToFire(context.Context, *CStore_QueueWishlistDemoEmailToFire_Request) (*CStore_QueueWishlistDemoEmailToFire_Response, error)
	SetReservationPositionMessage(context.Context, *CStore_SetReservationPositionMessage_Request) (*CStore_SetReservationPositionMessage_Response, error)
	DeleteReservationPositionMessage(context.Context, *CStore_DeleteReservationPositionMessage_Request) (*CStore_DeleteReservationPositionMessage_Response, error)
	GetAllReservationPositionMessages(context.Context, *CStore_GetAllReservationPositionMessages_Request) (*CStore_GetAllReservationPositionMessages_Response, error)
	ReloadAllReservationPositionMessages(context.Context, *CStore_ReloadAllReservationPositionMessages_Notification) (*NoResponse, error)
	SetCompatibilityFeedback(context.Context, *CSteamDeckCompatibility_SetFeedback_Request) (*CSteamDeckCompatibility_SetFeedback_Response, error)
	ShouldPromptForCompatibilityFeedback(context.Context, *CSteamDeckCompatibility_ShouldPrompt_Request) (*CSteamDeckCompatibility_ShouldPrompt_Response, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) RegisterCDKey(context.Context, *CStore_RegisterCDKey_Request) (*CStore_RegisterCDKey_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCDKey not implemented")
}
func (UnimplementedStoreServer) GetMostPopularTags(context.Context, *CStore_GetMostPopularTags_Request) (*CStore_GetMostPopularTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostPopularTags not implemented")
}
func (UnimplementedStoreServer) GetLocalizedNameForTags(context.Context, *CStore_GetLocalizedNameForTags_Request) (*CStore_GetLocalizedNameForTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalizedNameForTags not implemented")
}
func (UnimplementedStoreServer) GetTagList(context.Context, *CStore_GetTagList_Request) (*CStore_GetTagList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}
func (UnimplementedStoreServer) GetDiscoveryQueue(context.Context, *CStore_GetDiscoveryQueue_Request) (*CStore_GetDiscoveryQueue_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryQueue not implemented")
}
func (UnimplementedStoreServer) GetDiscoveryQueueSettings(context.Context, *CStore_GetDiscoveryQueueSettings_Request) (*CStore_GetDiscoveryQueueSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryQueueSettings not implemented")
}
func (UnimplementedStoreServer) SkipDiscoveryQueueItem(context.Context, *CStore_SkipDiscoveryQueueItem_Request) (*CStore_SkipDiscoveryQueueItem_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipDiscoveryQueueItem not implemented")
}
func (UnimplementedStoreServer) GetUserGameInterestState(context.Context, *CStore_GetUserGameInterestState_Request) (*CStore_GetUserGameInterestState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGameInterestState not implemented")
}
func (UnimplementedStoreServer) GetDiscoveryQueueSkippedApps(context.Context, *CStore_GetDiscoveryQueueSkippedApps_Request) (*CStore_GetDiscoveryQueueSkippedApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryQueueSkippedApps not implemented")
}
func (UnimplementedStoreServer) ReportApp(context.Context, *CStore_ReportApp_Request) (*CStore_ReportApp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportApp not implemented")
}
func (UnimplementedStoreServer) GetStorePreferences(context.Context, *CStore_GetStorePreferences_Request) (*CStore_GetStorePreferences_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorePreferences not implemented")
}
func (UnimplementedStoreServer) GetTrendingAppsAmongFriends(context.Context, *CStore_GetTrendingAppsAmongFriends_Request) (*CStore_GetTrendingAppsAmongFriends_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingAppsAmongFriends not implemented")
}
func (UnimplementedStoreServer) MigratePartnerLinkTracking(context.Context, *CStore_MigratePartnerLinkTracking_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigratePartnerLinkTracking not implemented")
}
func (UnimplementedStoreServer) UpdatePackageReservations(context.Context, *CStore_UpdatePackageReservations_Request) (*CStore_UpdatePackageReservations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageReservations not implemented")
}
func (UnimplementedStoreServer) GetWishlistDemoEmailStatus(context.Context, *CStore_GetWishlistDemoEmailStatus_Request) (*CStore_GetWishlistDemoEmailStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlistDemoEmailStatus not implemented")
}
func (UnimplementedStoreServer) QueueWishlistDemoEmailToFire(context.Context, *CStore_QueueWishlistDemoEmailToFire_Request) (*CStore_QueueWishlistDemoEmailToFire_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueWishlistDemoEmailToFire not implemented")
}
func (UnimplementedStoreServer) SetReservationPositionMessage(context.Context, *CStore_SetReservationPositionMessage_Request) (*CStore_SetReservationPositionMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReservationPositionMessage not implemented")
}
func (UnimplementedStoreServer) DeleteReservationPositionMessage(context.Context, *CStore_DeleteReservationPositionMessage_Request) (*CStore_DeleteReservationPositionMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservationPositionMessage not implemented")
}
func (UnimplementedStoreServer) GetAllReservationPositionMessages(context.Context, *CStore_GetAllReservationPositionMessages_Request) (*CStore_GetAllReservationPositionMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReservationPositionMessages not implemented")
}
func (UnimplementedStoreServer) ReloadAllReservationPositionMessages(context.Context, *CStore_ReloadAllReservationPositionMessages_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAllReservationPositionMessages not implemented")
}
func (UnimplementedStoreServer) SetCompatibilityFeedback(context.Context, *CSteamDeckCompatibility_SetFeedback_Request) (*CSteamDeckCompatibility_SetFeedback_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompatibilityFeedback not implemented")
}
func (UnimplementedStoreServer) ShouldPromptForCompatibilityFeedback(context.Context, *CSteamDeckCompatibility_ShouldPrompt_Request) (*CSteamDeckCompatibility_ShouldPrompt_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldPromptForCompatibilityFeedback not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_RegisterCDKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_RegisterCDKey_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).RegisterCDKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/RegisterCDKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).RegisterCDKey(ctx, req.(*CStore_RegisterCDKey_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetMostPopularTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetMostPopularTags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetMostPopularTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetMostPopularTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetMostPopularTags(ctx, req.(*CStore_GetMostPopularTags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetLocalizedNameForTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetLocalizedNameForTags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetLocalizedNameForTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetLocalizedNameForTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetLocalizedNameForTags(ctx, req.(*CStore_GetLocalizedNameForTags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetTagList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetTagList(ctx, req.(*CStore_GetTagList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetDiscoveryQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetDiscoveryQueue_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetDiscoveryQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetDiscoveryQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetDiscoveryQueue(ctx, req.(*CStore_GetDiscoveryQueue_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetDiscoveryQueueSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetDiscoveryQueueSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetDiscoveryQueueSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetDiscoveryQueueSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetDiscoveryQueueSettings(ctx, req.(*CStore_GetDiscoveryQueueSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_SkipDiscoveryQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_SkipDiscoveryQueueItem_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SkipDiscoveryQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/SkipDiscoveryQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SkipDiscoveryQueueItem(ctx, req.(*CStore_SkipDiscoveryQueueItem_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetUserGameInterestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetUserGameInterestState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetUserGameInterestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetUserGameInterestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetUserGameInterestState(ctx, req.(*CStore_GetUserGameInterestState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetDiscoveryQueueSkippedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetDiscoveryQueueSkippedApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetDiscoveryQueueSkippedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetDiscoveryQueueSkippedApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetDiscoveryQueueSkippedApps(ctx, req.(*CStore_GetDiscoveryQueueSkippedApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ReportApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_ReportApp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ReportApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/ReportApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ReportApp(ctx, req.(*CStore_ReportApp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStorePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetStorePreferences_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStorePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetStorePreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStorePreferences(ctx, req.(*CStore_GetStorePreferences_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetTrendingAppsAmongFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetTrendingAppsAmongFriends_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetTrendingAppsAmongFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetTrendingAppsAmongFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetTrendingAppsAmongFriends(ctx, req.(*CStore_GetTrendingAppsAmongFriends_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_MigratePartnerLinkTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_MigratePartnerLinkTracking_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).MigratePartnerLinkTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/MigratePartnerLinkTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).MigratePartnerLinkTracking(ctx, req.(*CStore_MigratePartnerLinkTracking_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdatePackageReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_UpdatePackageReservations_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdatePackageReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/UpdatePackageReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdatePackageReservations(ctx, req.(*CStore_UpdatePackageReservations_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetWishlistDemoEmailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetWishlistDemoEmailStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetWishlistDemoEmailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetWishlistDemoEmailStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetWishlistDemoEmailStatus(ctx, req.(*CStore_GetWishlistDemoEmailStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_QueueWishlistDemoEmailToFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_QueueWishlistDemoEmailToFire_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).QueueWishlistDemoEmailToFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/QueueWishlistDemoEmailToFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).QueueWishlistDemoEmailToFire(ctx, req.(*CStore_QueueWishlistDemoEmailToFire_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_SetReservationPositionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_SetReservationPositionMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SetReservationPositionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/SetReservationPositionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SetReservationPositionMessage(ctx, req.(*CStore_SetReservationPositionMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DeleteReservationPositionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_DeleteReservationPositionMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteReservationPositionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/DeleteReservationPositionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteReservationPositionMessage(ctx, req.(*CStore_DeleteReservationPositionMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetAllReservationPositionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_GetAllReservationPositionMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetAllReservationPositionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/GetAllReservationPositionMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetAllReservationPositionMessages(ctx, req.(*CStore_GetAllReservationPositionMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ReloadAllReservationPositionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_ReloadAllReservationPositionMessages_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ReloadAllReservationPositionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/ReloadAllReservationPositionMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ReloadAllReservationPositionMessages(ctx, req.(*CStore_ReloadAllReservationPositionMessages_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_SetCompatibilityFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamDeckCompatibility_SetFeedback_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SetCompatibilityFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/SetCompatibilityFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SetCompatibilityFeedback(ctx, req.(*CSteamDeckCompatibility_SetFeedback_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ShouldPromptForCompatibilityFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamDeckCompatibility_ShouldPrompt_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ShouldPromptForCompatibilityFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/ShouldPromptForCompatibilityFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ShouldPromptForCompatibilityFeedback(ctx, req.(*CSteamDeckCompatibility_ShouldPrompt_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCDKey",
			Handler:    _Store_RegisterCDKey_Handler,
		},
		{
			MethodName: "GetMostPopularTags",
			Handler:    _Store_GetMostPopularTags_Handler,
		},
		{
			MethodName: "GetLocalizedNameForTags",
			Handler:    _Store_GetLocalizedNameForTags_Handler,
		},
		{
			MethodName: "GetTagList",
			Handler:    _Store_GetTagList_Handler,
		},
		{
			MethodName: "GetDiscoveryQueue",
			Handler:    _Store_GetDiscoveryQueue_Handler,
		},
		{
			MethodName: "GetDiscoveryQueueSettings",
			Handler:    _Store_GetDiscoveryQueueSettings_Handler,
		},
		{
			MethodName: "SkipDiscoveryQueueItem",
			Handler:    _Store_SkipDiscoveryQueueItem_Handler,
		},
		{
			MethodName: "GetUserGameInterestState",
			Handler:    _Store_GetUserGameInterestState_Handler,
		},
		{
			MethodName: "GetDiscoveryQueueSkippedApps",
			Handler:    _Store_GetDiscoveryQueueSkippedApps_Handler,
		},
		{
			MethodName: "ReportApp",
			Handler:    _Store_ReportApp_Handler,
		},
		{
			MethodName: "GetStorePreferences",
			Handler:    _Store_GetStorePreferences_Handler,
		},
		{
			MethodName: "GetTrendingAppsAmongFriends",
			Handler:    _Store_GetTrendingAppsAmongFriends_Handler,
		},
		{
			MethodName: "MigratePartnerLinkTracking",
			Handler:    _Store_MigratePartnerLinkTracking_Handler,
		},
		{
			MethodName: "UpdatePackageReservations",
			Handler:    _Store_UpdatePackageReservations_Handler,
		},
		{
			MethodName: "GetWishlistDemoEmailStatus",
			Handler:    _Store_GetWishlistDemoEmailStatus_Handler,
		},
		{
			MethodName: "QueueWishlistDemoEmailToFire",
			Handler:    _Store_QueueWishlistDemoEmailToFire_Handler,
		},
		{
			MethodName: "SetReservationPositionMessage",
			Handler:    _Store_SetReservationPositionMessage_Handler,
		},
		{
			MethodName: "DeleteReservationPositionMessage",
			Handler:    _Store_DeleteReservationPositionMessage_Handler,
		},
		{
			MethodName: "GetAllReservationPositionMessages",
			Handler:    _Store_GetAllReservationPositionMessages_Handler,
		},
		{
			MethodName: "ReloadAllReservationPositionMessages",
			Handler:    _Store_ReloadAllReservationPositionMessages_Handler,
		},
		{
			MethodName: "SetCompatibilityFeedback",
			Handler:    _Store_SetCompatibilityFeedback_Handler,
		},
		{
			MethodName: "ShouldPromptForCompatibilityFeedback",
			Handler:    _Store_ShouldPromptForCompatibilityFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_store.steamclient.proto",
}

// StoreClientClient is the client API for StoreClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClientClient interface {
	NotifyStorePreferencesChanged(ctx context.Context, in *CStore_StorePreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type storeClientClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClientClient(cc grpc.ClientConnInterface) StoreClientClient {
	return &storeClientClient{cc}
}

func (c *storeClientClient) NotifyStorePreferencesChanged(ctx context.Context, in *CStore_StorePreferencesChanged_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/StoreClient/NotifyStorePreferencesChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreClientServer is the server API for StoreClient service.
// All implementations must embed UnimplementedStoreClientServer
// for forward compatibility
type StoreClientServer interface {
	NotifyStorePreferencesChanged(context.Context, *CStore_StorePreferencesChanged_Notification) (*NoResponse, error)
	mustEmbedUnimplementedStoreClientServer()
}

// UnimplementedStoreClientServer must be embedded to have forward compatible implementations.
type UnimplementedStoreClientServer struct {
}

func (UnimplementedStoreClientServer) NotifyStorePreferencesChanged(context.Context, *CStore_StorePreferencesChanged_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStorePreferencesChanged not implemented")
}
func (UnimplementedStoreClientServer) mustEmbedUnimplementedStoreClientServer() {}

// UnsafeStoreClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreClientServer will
// result in compilation errors.
type UnsafeStoreClientServer interface {
	mustEmbedUnimplementedStoreClientServer()
}

func RegisterStoreClientServer(s grpc.ServiceRegistrar, srv StoreClientServer) {
	s.RegisterService(&StoreClient_ServiceDesc, srv)
}

func _StoreClient_NotifyStorePreferencesChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStore_StorePreferencesChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreClientServer).NotifyStorePreferencesChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreClient/NotifyStorePreferencesChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreClientServer).NotifyStorePreferencesChanged(ctx, req.(*CStore_StorePreferencesChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreClient_ServiceDesc is the grpc.ServiceDesc for StoreClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StoreClient",
	HandlerType: (*StoreClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyStorePreferencesChanged",
			Handler:    _StoreClient_NotifyStorePreferencesChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_store.steamclient.proto",
}
