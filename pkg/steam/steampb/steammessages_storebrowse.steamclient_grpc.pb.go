// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_storebrowse.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreBrowseClient is the client API for StoreBrowse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreBrowseClient interface {
	GetItems(ctx context.Context, in *CStoreBrowse_GetItems_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetItems_Response, error)
	GetStoreCategories(ctx context.Context, in *CStoreBrowse_GetStoreCategories_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetStoreCategories_Response, error)
	GetDLCForApps(ctx context.Context, in *CStoreBrowse_GetDLCForApps_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetDLCForApps_Response, error)
	GetDLCForAppsSolr(ctx context.Context, in *CStoreBrowse_GetDLCForAppsSolr_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetDLCForAppsSolr_Response, error)
	GetHardwareItems(ctx context.Context, in *CStoreBrowse_GetHardwareItems_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetHardwareItems_Response, error)
}

type storeBrowseClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreBrowseClient(cc grpc.ClientConnInterface) StoreBrowseClient {
	return &storeBrowseClient{cc}
}

func (c *storeBrowseClient) GetItems(ctx context.Context, in *CStoreBrowse_GetItems_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetItems_Response, error) {
	out := new(CStoreBrowse_GetItems_Response)
	err := c.cc.Invoke(ctx, "/StoreBrowse/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBrowseClient) GetStoreCategories(ctx context.Context, in *CStoreBrowse_GetStoreCategories_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetStoreCategories_Response, error) {
	out := new(CStoreBrowse_GetStoreCategories_Response)
	err := c.cc.Invoke(ctx, "/StoreBrowse/GetStoreCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBrowseClient) GetDLCForApps(ctx context.Context, in *CStoreBrowse_GetDLCForApps_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetDLCForApps_Response, error) {
	out := new(CStoreBrowse_GetDLCForApps_Response)
	err := c.cc.Invoke(ctx, "/StoreBrowse/GetDLCForApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBrowseClient) GetDLCForAppsSolr(ctx context.Context, in *CStoreBrowse_GetDLCForAppsSolr_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetDLCForAppsSolr_Response, error) {
	out := new(CStoreBrowse_GetDLCForAppsSolr_Response)
	err := c.cc.Invoke(ctx, "/StoreBrowse/GetDLCForAppsSolr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBrowseClient) GetHardwareItems(ctx context.Context, in *CStoreBrowse_GetHardwareItems_Request, opts ...grpc.CallOption) (*CStoreBrowse_GetHardwareItems_Response, error) {
	out := new(CStoreBrowse_GetHardwareItems_Response)
	err := c.cc.Invoke(ctx, "/StoreBrowse/GetHardwareItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreBrowseServer is the server API for StoreBrowse service.
// All implementations must embed UnimplementedStoreBrowseServer
// for forward compatibility
type StoreBrowseServer interface {
	GetItems(context.Context, *CStoreBrowse_GetItems_Request) (*CStoreBrowse_GetItems_Response, error)
	GetStoreCategories(context.Context, *CStoreBrowse_GetStoreCategories_Request) (*CStoreBrowse_GetStoreCategories_Response, error)
	GetDLCForApps(context.Context, *CStoreBrowse_GetDLCForApps_Request) (*CStoreBrowse_GetDLCForApps_Response, error)
	GetDLCForAppsSolr(context.Context, *CStoreBrowse_GetDLCForAppsSolr_Request) (*CStoreBrowse_GetDLCForAppsSolr_Response, error)
	GetHardwareItems(context.Context, *CStoreBrowse_GetHardwareItems_Request) (*CStoreBrowse_GetHardwareItems_Response, error)
	mustEmbedUnimplementedStoreBrowseServer()
}

// UnimplementedStoreBrowseServer must be embedded to have forward compatible implementations.
type UnimplementedStoreBrowseServer struct {
}

func (UnimplementedStoreBrowseServer) GetItems(context.Context, *CStoreBrowse_GetItems_Request) (*CStoreBrowse_GetItems_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedStoreBrowseServer) GetStoreCategories(context.Context, *CStoreBrowse_GetStoreCategories_Request) (*CStoreBrowse_GetStoreCategories_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreCategories not implemented")
}
func (UnimplementedStoreBrowseServer) GetDLCForApps(context.Context, *CStoreBrowse_GetDLCForApps_Request) (*CStoreBrowse_GetDLCForApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDLCForApps not implemented")
}
func (UnimplementedStoreBrowseServer) GetDLCForAppsSolr(context.Context, *CStoreBrowse_GetDLCForAppsSolr_Request) (*CStoreBrowse_GetDLCForAppsSolr_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDLCForAppsSolr not implemented")
}
func (UnimplementedStoreBrowseServer) GetHardwareItems(context.Context, *CStoreBrowse_GetHardwareItems_Request) (*CStoreBrowse_GetHardwareItems_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareItems not implemented")
}
func (UnimplementedStoreBrowseServer) mustEmbedUnimplementedStoreBrowseServer() {}

// UnsafeStoreBrowseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreBrowseServer will
// result in compilation errors.
type UnsafeStoreBrowseServer interface {
	mustEmbedUnimplementedStoreBrowseServer()
}

func RegisterStoreBrowseServer(s grpc.ServiceRegistrar, srv StoreBrowseServer) {
	s.RegisterService(&StoreBrowse_ServiceDesc, srv)
}

func _StoreBrowse_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStoreBrowse_GetItems_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBrowseServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreBrowse/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBrowseServer).GetItems(ctx, req.(*CStoreBrowse_GetItems_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBrowse_GetStoreCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStoreBrowse_GetStoreCategories_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBrowseServer).GetStoreCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreBrowse/GetStoreCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBrowseServer).GetStoreCategories(ctx, req.(*CStoreBrowse_GetStoreCategories_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBrowse_GetDLCForApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStoreBrowse_GetDLCForApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBrowseServer).GetDLCForApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreBrowse/GetDLCForApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBrowseServer).GetDLCForApps(ctx, req.(*CStoreBrowse_GetDLCForApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBrowse_GetDLCForAppsSolr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStoreBrowse_GetDLCForAppsSolr_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBrowseServer).GetDLCForAppsSolr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreBrowse/GetDLCForAppsSolr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBrowseServer).GetDLCForAppsSolr(ctx, req.(*CStoreBrowse_GetDLCForAppsSolr_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBrowse_GetHardwareItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStoreBrowse_GetHardwareItems_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBrowseServer).GetHardwareItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreBrowse/GetHardwareItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBrowseServer).GetHardwareItems(ctx, req.(*CStoreBrowse_GetHardwareItems_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreBrowse_ServiceDesc is the grpc.ServiceDesc for StoreBrowse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreBrowse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StoreBrowse",
	HandlerType: (*StoreBrowseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItems",
			Handler:    _StoreBrowse_GetItems_Handler,
		},
		{
			MethodName: "GetStoreCategories",
			Handler:    _StoreBrowse_GetStoreCategories_Handler,
		},
		{
			MethodName: "GetDLCForApps",
			Handler:    _StoreBrowse_GetDLCForApps_Handler,
		},
		{
			MethodName: "GetDLCForAppsSolr",
			Handler:    _StoreBrowse_GetDLCForAppsSolr_Handler,
		},
		{
			MethodName: "GetHardwareItems",
			Handler:    _StoreBrowse_GetHardwareItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_storebrowse.steamclient.proto",
}
