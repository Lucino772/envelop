// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_timedtrial.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimedTrialClient is the client API for TimedTrial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimedTrialClient interface {
	GetTimeRemaining(ctx context.Context, in *CTimedTrial_GetTimeRemaining_Request, opts ...grpc.CallOption) (*CTimedTrial_GetTimeRemaining_Response, error)
	RecordPlaytime(ctx context.Context, in *CTimedTrial_RecordPlaytime_Request, opts ...grpc.CallOption) (*CTimedTrial_RecordPlaytime_Response, error)
	ResetPlaytime(ctx context.Context, in *CTimedTrial_ResetPlaytime_Request, opts ...grpc.CallOption) (*CTimedTrial_ResetPlaytime_Response, error)
}

type timedTrialClient struct {
	cc grpc.ClientConnInterface
}

func NewTimedTrialClient(cc grpc.ClientConnInterface) TimedTrialClient {
	return &timedTrialClient{cc}
}

func (c *timedTrialClient) GetTimeRemaining(ctx context.Context, in *CTimedTrial_GetTimeRemaining_Request, opts ...grpc.CallOption) (*CTimedTrial_GetTimeRemaining_Response, error) {
	out := new(CTimedTrial_GetTimeRemaining_Response)
	err := c.cc.Invoke(ctx, "/TimedTrial/GetTimeRemaining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedTrialClient) RecordPlaytime(ctx context.Context, in *CTimedTrial_RecordPlaytime_Request, opts ...grpc.CallOption) (*CTimedTrial_RecordPlaytime_Response, error) {
	out := new(CTimedTrial_RecordPlaytime_Response)
	err := c.cc.Invoke(ctx, "/TimedTrial/RecordPlaytime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedTrialClient) ResetPlaytime(ctx context.Context, in *CTimedTrial_ResetPlaytime_Request, opts ...grpc.CallOption) (*CTimedTrial_ResetPlaytime_Response, error) {
	out := new(CTimedTrial_ResetPlaytime_Response)
	err := c.cc.Invoke(ctx, "/TimedTrial/ResetPlaytime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimedTrialServer is the server API for TimedTrial service.
// All implementations must embed UnimplementedTimedTrialServer
// for forward compatibility
type TimedTrialServer interface {
	GetTimeRemaining(context.Context, *CTimedTrial_GetTimeRemaining_Request) (*CTimedTrial_GetTimeRemaining_Response, error)
	RecordPlaytime(context.Context, *CTimedTrial_RecordPlaytime_Request) (*CTimedTrial_RecordPlaytime_Response, error)
	ResetPlaytime(context.Context, *CTimedTrial_ResetPlaytime_Request) (*CTimedTrial_ResetPlaytime_Response, error)
	mustEmbedUnimplementedTimedTrialServer()
}

// UnimplementedTimedTrialServer must be embedded to have forward compatible implementations.
type UnimplementedTimedTrialServer struct {
}

func (UnimplementedTimedTrialServer) GetTimeRemaining(context.Context, *CTimedTrial_GetTimeRemaining_Request) (*CTimedTrial_GetTimeRemaining_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeRemaining not implemented")
}
func (UnimplementedTimedTrialServer) RecordPlaytime(context.Context, *CTimedTrial_RecordPlaytime_Request) (*CTimedTrial_RecordPlaytime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPlaytime not implemented")
}
func (UnimplementedTimedTrialServer) ResetPlaytime(context.Context, *CTimedTrial_ResetPlaytime_Request) (*CTimedTrial_ResetPlaytime_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPlaytime not implemented")
}
func (UnimplementedTimedTrialServer) mustEmbedUnimplementedTimedTrialServer() {}

// UnsafeTimedTrialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimedTrialServer will
// result in compilation errors.
type UnsafeTimedTrialServer interface {
	mustEmbedUnimplementedTimedTrialServer()
}

func RegisterTimedTrialServer(s grpc.ServiceRegistrar, srv TimedTrialServer) {
	s.RegisterService(&TimedTrial_ServiceDesc, srv)
}

func _TimedTrial_GetTimeRemaining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTimedTrial_GetTimeRemaining_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedTrialServer).GetTimeRemaining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TimedTrial/GetTimeRemaining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedTrialServer).GetTimeRemaining(ctx, req.(*CTimedTrial_GetTimeRemaining_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimedTrial_RecordPlaytime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTimedTrial_RecordPlaytime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedTrialServer).RecordPlaytime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TimedTrial/RecordPlaytime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedTrialServer).RecordPlaytime(ctx, req.(*CTimedTrial_RecordPlaytime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimedTrial_ResetPlaytime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTimedTrial_ResetPlaytime_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedTrialServer).ResetPlaytime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TimedTrial/ResetPlaytime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedTrialServer).ResetPlaytime(ctx, req.(*CTimedTrial_ResetPlaytime_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TimedTrial_ServiceDesc is the grpc.ServiceDesc for TimedTrial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimedTrial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TimedTrial",
	HandlerType: (*TimedTrialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeRemaining",
			Handler:    _TimedTrial_GetTimeRemaining_Handler,
		},
		{
			MethodName: "RecordPlaytime",
			Handler:    _TimedTrial_RecordPlaytime_Handler,
		},
		{
			MethodName: "ResetPlaytime",
			Handler:    _TimedTrial_ResetPlaytime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_timedtrial.steamclient.proto",
}
