// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_twofactor.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoFactorClient is the client API for TwoFactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoFactorClient interface {
	QueryTime(ctx context.Context, in *CTwoFactor_Time_Request, opts ...grpc.CallOption) (*CTwoFactor_Time_Response, error)
	QueryStatus(ctx context.Context, in *CTwoFactor_Status_Request, opts ...grpc.CallOption) (*CTwoFactor_Status_Response, error)
	AddAuthenticator(ctx context.Context, in *CTwoFactor_AddAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_AddAuthenticator_Response, error)
	SendEmail(ctx context.Context, in *CTwoFactor_SendEmail_Request, opts ...grpc.CallOption) (*CTwoFactor_SendEmail_Response, error)
	FinalizeAddAuthenticator(ctx context.Context, in *CTwoFactor_FinalizeAddAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_FinalizeAddAuthenticator_Response, error)
	UpdateTokenVersion(ctx context.Context, in *CTwoFactor_UpdateTokenVersion_Request, opts ...grpc.CallOption) (*CTwoFactor_UpdateTokenVersion_Response, error)
	RemoveAuthenticator(ctx context.Context, in *CTwoFactor_RemoveAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticator_Response, error)
	RemoveAuthenticatorViaChallengeStart(ctx context.Context, in *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, error)
	RemoveAuthenticatorViaChallengeContinue(ctx context.Context, in *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, error)
}

type twoFactorClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoFactorClient(cc grpc.ClientConnInterface) TwoFactorClient {
	return &twoFactorClient{cc}
}

func (c *twoFactorClient) QueryTime(ctx context.Context, in *CTwoFactor_Time_Request, opts ...grpc.CallOption) (*CTwoFactor_Time_Response, error) {
	out := new(CTwoFactor_Time_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/QueryTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) QueryStatus(ctx context.Context, in *CTwoFactor_Status_Request, opts ...grpc.CallOption) (*CTwoFactor_Status_Response, error) {
	out := new(CTwoFactor_Status_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/QueryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) AddAuthenticator(ctx context.Context, in *CTwoFactor_AddAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_AddAuthenticator_Response, error) {
	out := new(CTwoFactor_AddAuthenticator_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/AddAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) SendEmail(ctx context.Context, in *CTwoFactor_SendEmail_Request, opts ...grpc.CallOption) (*CTwoFactor_SendEmail_Response, error) {
	out := new(CTwoFactor_SendEmail_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) FinalizeAddAuthenticator(ctx context.Context, in *CTwoFactor_FinalizeAddAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_FinalizeAddAuthenticator_Response, error) {
	out := new(CTwoFactor_FinalizeAddAuthenticator_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/FinalizeAddAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) UpdateTokenVersion(ctx context.Context, in *CTwoFactor_UpdateTokenVersion_Request, opts ...grpc.CallOption) (*CTwoFactor_UpdateTokenVersion_Response, error) {
	out := new(CTwoFactor_UpdateTokenVersion_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/UpdateTokenVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) RemoveAuthenticator(ctx context.Context, in *CTwoFactor_RemoveAuthenticator_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticator_Response, error) {
	out := new(CTwoFactor_RemoveAuthenticator_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/RemoveAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) RemoveAuthenticatorViaChallengeStart(ctx context.Context, in *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, error) {
	out := new(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/RemoveAuthenticatorViaChallengeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorClient) RemoveAuthenticatorViaChallengeContinue(ctx context.Context, in *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, opts ...grpc.CallOption) (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, error) {
	out := new(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
	err := c.cc.Invoke(ctx, "/TwoFactor/RemoveAuthenticatorViaChallengeContinue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoFactorServer is the server API for TwoFactor service.
// All implementations must embed UnimplementedTwoFactorServer
// for forward compatibility
type TwoFactorServer interface {
	QueryTime(context.Context, *CTwoFactor_Time_Request) (*CTwoFactor_Time_Response, error)
	QueryStatus(context.Context, *CTwoFactor_Status_Request) (*CTwoFactor_Status_Response, error)
	AddAuthenticator(context.Context, *CTwoFactor_AddAuthenticator_Request) (*CTwoFactor_AddAuthenticator_Response, error)
	SendEmail(context.Context, *CTwoFactor_SendEmail_Request) (*CTwoFactor_SendEmail_Response, error)
	FinalizeAddAuthenticator(context.Context, *CTwoFactor_FinalizeAddAuthenticator_Request) (*CTwoFactor_FinalizeAddAuthenticator_Response, error)
	UpdateTokenVersion(context.Context, *CTwoFactor_UpdateTokenVersion_Request) (*CTwoFactor_UpdateTokenVersion_Response, error)
	RemoveAuthenticator(context.Context, *CTwoFactor_RemoveAuthenticator_Request) (*CTwoFactor_RemoveAuthenticator_Response, error)
	RemoveAuthenticatorViaChallengeStart(context.Context, *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, error)
	RemoveAuthenticatorViaChallengeContinue(context.Context, *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, error)
	mustEmbedUnimplementedTwoFactorServer()
}

// UnimplementedTwoFactorServer must be embedded to have forward compatible implementations.
type UnimplementedTwoFactorServer struct {
}

func (UnimplementedTwoFactorServer) QueryTime(context.Context, *CTwoFactor_Time_Request) (*CTwoFactor_Time_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTime not implemented")
}
func (UnimplementedTwoFactorServer) QueryStatus(context.Context, *CTwoFactor_Status_Request) (*CTwoFactor_Status_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatus not implemented")
}
func (UnimplementedTwoFactorServer) AddAuthenticator(context.Context, *CTwoFactor_AddAuthenticator_Request) (*CTwoFactor_AddAuthenticator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthenticator not implemented")
}
func (UnimplementedTwoFactorServer) SendEmail(context.Context, *CTwoFactor_SendEmail_Request) (*CTwoFactor_SendEmail_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedTwoFactorServer) FinalizeAddAuthenticator(context.Context, *CTwoFactor_FinalizeAddAuthenticator_Request) (*CTwoFactor_FinalizeAddAuthenticator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeAddAuthenticator not implemented")
}
func (UnimplementedTwoFactorServer) UpdateTokenVersion(context.Context, *CTwoFactor_UpdateTokenVersion_Request) (*CTwoFactor_UpdateTokenVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenVersion not implemented")
}
func (UnimplementedTwoFactorServer) RemoveAuthenticator(context.Context, *CTwoFactor_RemoveAuthenticator_Request) (*CTwoFactor_RemoveAuthenticator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthenticator not implemented")
}
func (UnimplementedTwoFactorServer) RemoveAuthenticatorViaChallengeStart(context.Context, *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthenticatorViaChallengeStart not implemented")
}
func (UnimplementedTwoFactorServer) RemoveAuthenticatorViaChallengeContinue(context.Context, *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthenticatorViaChallengeContinue not implemented")
}
func (UnimplementedTwoFactorServer) mustEmbedUnimplementedTwoFactorServer() {}

// UnsafeTwoFactorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoFactorServer will
// result in compilation errors.
type UnsafeTwoFactorServer interface {
	mustEmbedUnimplementedTwoFactorServer()
}

func RegisterTwoFactorServer(s grpc.ServiceRegistrar, srv TwoFactorServer) {
	s.RegisterService(&TwoFactor_ServiceDesc, srv)
}

func _TwoFactor_QueryTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_Time_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).QueryTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/QueryTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).QueryTime(ctx, req.(*CTwoFactor_Time_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_QueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_Status_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).QueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/QueryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).QueryStatus(ctx, req.(*CTwoFactor_Status_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_AddAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_AddAuthenticator_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).AddAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/AddAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).AddAuthenticator(ctx, req.(*CTwoFactor_AddAuthenticator_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_SendEmail_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).SendEmail(ctx, req.(*CTwoFactor_SendEmail_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_FinalizeAddAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_FinalizeAddAuthenticator_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).FinalizeAddAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/FinalizeAddAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).FinalizeAddAuthenticator(ctx, req.(*CTwoFactor_FinalizeAddAuthenticator_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_UpdateTokenVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_UpdateTokenVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).UpdateTokenVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/UpdateTokenVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).UpdateTokenVersion(ctx, req.(*CTwoFactor_UpdateTokenVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_RemoveAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_RemoveAuthenticator_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).RemoveAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/RemoveAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).RemoveAuthenticator(ctx, req.(*CTwoFactor_RemoveAuthenticator_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_RemoveAuthenticatorViaChallengeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).RemoveAuthenticatorViaChallengeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/RemoveAuthenticatorViaChallengeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).RemoveAuthenticatorViaChallengeStart(ctx, req.(*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactor_RemoveAuthenticatorViaChallengeContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorServer).RemoveAuthenticatorViaChallengeContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TwoFactor/RemoveAuthenticatorViaChallengeContinue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorServer).RemoveAuthenticatorViaChallengeContinue(ctx, req.(*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoFactor_ServiceDesc is the grpc.ServiceDesc for TwoFactor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoFactor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TwoFactor",
	HandlerType: (*TwoFactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTime",
			Handler:    _TwoFactor_QueryTime_Handler,
		},
		{
			MethodName: "QueryStatus",
			Handler:    _TwoFactor_QueryStatus_Handler,
		},
		{
			MethodName: "AddAuthenticator",
			Handler:    _TwoFactor_AddAuthenticator_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _TwoFactor_SendEmail_Handler,
		},
		{
			MethodName: "FinalizeAddAuthenticator",
			Handler:    _TwoFactor_FinalizeAddAuthenticator_Handler,
		},
		{
			MethodName: "UpdateTokenVersion",
			Handler:    _TwoFactor_UpdateTokenVersion_Handler,
		},
		{
			MethodName: "RemoveAuthenticator",
			Handler:    _TwoFactor_RemoveAuthenticator_Handler,
		},
		{
			MethodName: "RemoveAuthenticatorViaChallengeStart",
			Handler:    _TwoFactor_RemoveAuthenticatorViaChallengeStart_Handler,
		},
		{
			MethodName: "RemoveAuthenticatorViaChallengeContinue",
			Handler:    _TwoFactor_RemoveAuthenticatorViaChallengeContinue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_twofactor.steamclient.proto",
}
