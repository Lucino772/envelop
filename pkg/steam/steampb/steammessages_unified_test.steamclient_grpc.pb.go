// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_unified_test.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestSteamClientClient is the client API for TestSteamClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestSteamClientClient interface {
	MessageToClient(ctx context.Context, in *CMsgTest_MessageToClient_Request, opts ...grpc.CallOption) (*CMsgTest_MessageToClient_Response, error)
	NotifyClient(ctx context.Context, in *CMsgTest_NotifyClient_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type testSteamClientClient struct {
	cc grpc.ClientConnInterface
}

func NewTestSteamClientClient(cc grpc.ClientConnInterface) TestSteamClientClient {
	return &testSteamClientClient{cc}
}

func (c *testSteamClientClient) MessageToClient(ctx context.Context, in *CMsgTest_MessageToClient_Request, opts ...grpc.CallOption) (*CMsgTest_MessageToClient_Response, error) {
	out := new(CMsgTest_MessageToClient_Response)
	err := c.cc.Invoke(ctx, "/TestSteamClient/MessageToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSteamClientClient) NotifyClient(ctx context.Context, in *CMsgTest_NotifyClient_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/TestSteamClient/NotifyClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestSteamClientServer is the server API for TestSteamClient service.
// All implementations must embed UnimplementedTestSteamClientServer
// for forward compatibility
type TestSteamClientServer interface {
	MessageToClient(context.Context, *CMsgTest_MessageToClient_Request) (*CMsgTest_MessageToClient_Response, error)
	NotifyClient(context.Context, *CMsgTest_NotifyClient_Notification) (*NoResponse, error)
	mustEmbedUnimplementedTestSteamClientServer()
}

// UnimplementedTestSteamClientServer must be embedded to have forward compatible implementations.
type UnimplementedTestSteamClientServer struct {
}

func (UnimplementedTestSteamClientServer) MessageToClient(context.Context, *CMsgTest_MessageToClient_Request) (*CMsgTest_MessageToClient_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageToClient not implemented")
}
func (UnimplementedTestSteamClientServer) NotifyClient(context.Context, *CMsgTest_NotifyClient_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClient not implemented")
}
func (UnimplementedTestSteamClientServer) mustEmbedUnimplementedTestSteamClientServer() {}

// UnsafeTestSteamClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestSteamClientServer will
// result in compilation errors.
type UnsafeTestSteamClientServer interface {
	mustEmbedUnimplementedTestSteamClientServer()
}

func RegisterTestSteamClientServer(s grpc.ServiceRegistrar, srv TestSteamClientServer) {
	s.RegisterService(&TestSteamClient_ServiceDesc, srv)
}

func _TestSteamClient_MessageToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMsgTest_MessageToClient_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSteamClientServer).MessageToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestSteamClient/MessageToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSteamClientServer).MessageToClient(ctx, req.(*CMsgTest_MessageToClient_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSteamClient_NotifyClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMsgTest_NotifyClient_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSteamClientServer).NotifyClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestSteamClient/NotifyClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSteamClientServer).NotifyClient(ctx, req.(*CMsgTest_NotifyClient_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// TestSteamClient_ServiceDesc is the grpc.ServiceDesc for TestSteamClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestSteamClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestSteamClient",
	HandlerType: (*TestSteamClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageToClient",
			Handler:    _TestSteamClient_MessageToClient_Handler,
		},
		{
			MethodName: "NotifyClient",
			Handler:    _TestSteamClient_NotifyClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_unified_test.steamclient.proto",
}

// TestServerFromClientClient is the client API for TestServerFromClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServerFromClientClient interface {
	MessageToServer(ctx context.Context, in *CMsgTest_MessageToServer_Request, opts ...grpc.CallOption) (*CMsgTest_MessageToServer_Response, error)
	NotifyServer(ctx context.Context, in *CMsgTest_NotifyServer_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type testServerFromClientClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServerFromClientClient(cc grpc.ClientConnInterface) TestServerFromClientClient {
	return &testServerFromClientClient{cc}
}

func (c *testServerFromClientClient) MessageToServer(ctx context.Context, in *CMsgTest_MessageToServer_Request, opts ...grpc.CallOption) (*CMsgTest_MessageToServer_Response, error) {
	out := new(CMsgTest_MessageToServer_Response)
	err := c.cc.Invoke(ctx, "/TestServerFromClient/MessageToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServerFromClientClient) NotifyServer(ctx context.Context, in *CMsgTest_NotifyServer_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/TestServerFromClient/NotifyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServerFromClientServer is the server API for TestServerFromClient service.
// All implementations must embed UnimplementedTestServerFromClientServer
// for forward compatibility
type TestServerFromClientServer interface {
	MessageToServer(context.Context, *CMsgTest_MessageToServer_Request) (*CMsgTest_MessageToServer_Response, error)
	NotifyServer(context.Context, *CMsgTest_NotifyServer_Notification) (*NoResponse, error)
	mustEmbedUnimplementedTestServerFromClientServer()
}

// UnimplementedTestServerFromClientServer must be embedded to have forward compatible implementations.
type UnimplementedTestServerFromClientServer struct {
}

func (UnimplementedTestServerFromClientServer) MessageToServer(context.Context, *CMsgTest_MessageToServer_Request) (*CMsgTest_MessageToServer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageToServer not implemented")
}
func (UnimplementedTestServerFromClientServer) NotifyServer(context.Context, *CMsgTest_NotifyServer_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyServer not implemented")
}
func (UnimplementedTestServerFromClientServer) mustEmbedUnimplementedTestServerFromClientServer() {}

// UnsafeTestServerFromClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServerFromClientServer will
// result in compilation errors.
type UnsafeTestServerFromClientServer interface {
	mustEmbedUnimplementedTestServerFromClientServer()
}

func RegisterTestServerFromClientServer(s grpc.ServiceRegistrar, srv TestServerFromClientServer) {
	s.RegisterService(&TestServerFromClient_ServiceDesc, srv)
}

func _TestServerFromClient_MessageToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMsgTest_MessageToServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServerFromClientServer).MessageToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestServerFromClient/MessageToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServerFromClientServer).MessageToServer(ctx, req.(*CMsgTest_MessageToServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServerFromClient_NotifyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMsgTest_NotifyServer_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServerFromClientServer).NotifyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestServerFromClient/NotifyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServerFromClientServer).NotifyServer(ctx, req.(*CMsgTest_NotifyServer_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// TestServerFromClient_ServiceDesc is the grpc.ServiceDesc for TestServerFromClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestServerFromClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestServerFromClient",
	HandlerType: (*TestServerFromClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageToServer",
			Handler:    _TestServerFromClient_MessageToServer_Handler,
		},
		{
			MethodName: "NotifyServer",
			Handler:    _TestServerFromClient_NotifyServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_unified_test.steamclient.proto",
}

// TestExternalPrivilegeClient is the client API for TestExternalPrivilege service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestExternalPrivilegeClient interface {
	CallClient(ctx context.Context, in *CMsgTest_NoBody_Request, opts ...grpc.CallOption) (*CMsgTest_CallClient_Response, error)
}

type testExternalPrivilegeClient struct {
	cc grpc.ClientConnInterface
}

func NewTestExternalPrivilegeClient(cc grpc.ClientConnInterface) TestExternalPrivilegeClient {
	return &testExternalPrivilegeClient{cc}
}

func (c *testExternalPrivilegeClient) CallClient(ctx context.Context, in *CMsgTest_NoBody_Request, opts ...grpc.CallOption) (*CMsgTest_CallClient_Response, error) {
	out := new(CMsgTest_CallClient_Response)
	err := c.cc.Invoke(ctx, "/TestExternalPrivilege/CallClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestExternalPrivilegeServer is the server API for TestExternalPrivilege service.
// All implementations must embed UnimplementedTestExternalPrivilegeServer
// for forward compatibility
type TestExternalPrivilegeServer interface {
	CallClient(context.Context, *CMsgTest_NoBody_Request) (*CMsgTest_CallClient_Response, error)
	mustEmbedUnimplementedTestExternalPrivilegeServer()
}

// UnimplementedTestExternalPrivilegeServer must be embedded to have forward compatible implementations.
type UnimplementedTestExternalPrivilegeServer struct {
}

func (UnimplementedTestExternalPrivilegeServer) CallClient(context.Context, *CMsgTest_NoBody_Request) (*CMsgTest_CallClient_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallClient not implemented")
}
func (UnimplementedTestExternalPrivilegeServer) mustEmbedUnimplementedTestExternalPrivilegeServer() {}

// UnsafeTestExternalPrivilegeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestExternalPrivilegeServer will
// result in compilation errors.
type UnsafeTestExternalPrivilegeServer interface {
	mustEmbedUnimplementedTestExternalPrivilegeServer()
}

func RegisterTestExternalPrivilegeServer(s grpc.ServiceRegistrar, srv TestExternalPrivilegeServer) {
	s.RegisterService(&TestExternalPrivilege_ServiceDesc, srv)
}

func _TestExternalPrivilege_CallClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMsgTest_NoBody_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestExternalPrivilegeServer).CallClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestExternalPrivilege/CallClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestExternalPrivilegeServer).CallClient(ctx, req.(*CMsgTest_NoBody_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TestExternalPrivilege_ServiceDesc is the grpc.ServiceDesc for TestExternalPrivilege service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestExternalPrivilege_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestExternalPrivilege",
	HandlerType: (*TestExternalPrivilegeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallClient",
			Handler:    _TestExternalPrivilege_CallClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_unified_test.steamclient.proto",
}
