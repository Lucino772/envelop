// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_vac.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileVerificationClient is the client API for FileVerification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileVerificationClient interface {
	SignatureCheck(ctx context.Context, in *CFileVerification_SignatureCheck_Request, opts ...grpc.CallOption) (*CFileVerification_SignatureCheck_Response, error)
	SteamServiceCheck(ctx context.Context, in *CFileVerification_SteamServiceCheck_Request, opts ...grpc.CallOption) (*CFileVerification_SteamServiceCheck_Response, error)
}

type fileVerificationClient struct {
	cc grpc.ClientConnInterface
}

func NewFileVerificationClient(cc grpc.ClientConnInterface) FileVerificationClient {
	return &fileVerificationClient{cc}
}

func (c *fileVerificationClient) SignatureCheck(ctx context.Context, in *CFileVerification_SignatureCheck_Request, opts ...grpc.CallOption) (*CFileVerification_SignatureCheck_Response, error) {
	out := new(CFileVerification_SignatureCheck_Response)
	err := c.cc.Invoke(ctx, "/FileVerification/SignatureCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileVerificationClient) SteamServiceCheck(ctx context.Context, in *CFileVerification_SteamServiceCheck_Request, opts ...grpc.CallOption) (*CFileVerification_SteamServiceCheck_Response, error) {
	out := new(CFileVerification_SteamServiceCheck_Response)
	err := c.cc.Invoke(ctx, "/FileVerification/SteamServiceCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileVerificationServer is the server API for FileVerification service.
// All implementations must embed UnimplementedFileVerificationServer
// for forward compatibility
type FileVerificationServer interface {
	SignatureCheck(context.Context, *CFileVerification_SignatureCheck_Request) (*CFileVerification_SignatureCheck_Response, error)
	SteamServiceCheck(context.Context, *CFileVerification_SteamServiceCheck_Request) (*CFileVerification_SteamServiceCheck_Response, error)
	mustEmbedUnimplementedFileVerificationServer()
}

// UnimplementedFileVerificationServer must be embedded to have forward compatible implementations.
type UnimplementedFileVerificationServer struct {
}

func (UnimplementedFileVerificationServer) SignatureCheck(context.Context, *CFileVerification_SignatureCheck_Request) (*CFileVerification_SignatureCheck_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureCheck not implemented")
}
func (UnimplementedFileVerificationServer) SteamServiceCheck(context.Context, *CFileVerification_SteamServiceCheck_Request) (*CFileVerification_SteamServiceCheck_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamServiceCheck not implemented")
}
func (UnimplementedFileVerificationServer) mustEmbedUnimplementedFileVerificationServer() {}

// UnsafeFileVerificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileVerificationServer will
// result in compilation errors.
type UnsafeFileVerificationServer interface {
	mustEmbedUnimplementedFileVerificationServer()
}

func RegisterFileVerificationServer(s grpc.ServiceRegistrar, srv FileVerificationServer) {
	s.RegisterService(&FileVerification_ServiceDesc, srv)
}

func _FileVerification_SignatureCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFileVerification_SignatureCheck_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileVerificationServer).SignatureCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileVerification/SignatureCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileVerificationServer).SignatureCheck(ctx, req.(*CFileVerification_SignatureCheck_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileVerification_SteamServiceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFileVerification_SteamServiceCheck_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileVerificationServer).SteamServiceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileVerification/SteamServiceCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileVerificationServer).SteamServiceCheck(ctx, req.(*CFileVerification_SteamServiceCheck_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FileVerification_ServiceDesc is the grpc.ServiceDesc for FileVerification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileVerification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileVerification",
	HandlerType: (*FileVerificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignatureCheck",
			Handler:    _FileVerification_SignatureCheck_Handler,
		},
		{
			MethodName: "SteamServiceCheck",
			Handler:    _FileVerification_SteamServiceCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_vac.steamclient.proto",
}
