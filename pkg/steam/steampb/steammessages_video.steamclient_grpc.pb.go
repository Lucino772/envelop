// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_video.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	ClientGetVideoURL(ctx context.Context, in *CVideo_ClientGetVideoURL_Request, opts ...grpc.CallOption) (*CVideo_ClientGetVideoURL_Response, error)
	SetVideoBookmark(ctx context.Context, in *CVideo_SetVideoBookmark_Notification, opts ...grpc.CallOption) (*NoResponse, error)
	GetVideoBookmarks(ctx context.Context, in *CVideo_GetVideoBookmarks_Request, opts ...grpc.CallOption) (*CVideo_GetVideoBookmarks_Response, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) ClientGetVideoURL(ctx context.Context, in *CVideo_ClientGetVideoURL_Request, opts ...grpc.CallOption) (*CVideo_ClientGetVideoURL_Response, error) {
	out := new(CVideo_ClientGetVideoURL_Response)
	err := c.cc.Invoke(ctx, "/Video/ClientGetVideoURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) SetVideoBookmark(ctx context.Context, in *CVideo_SetVideoBookmark_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/Video/SetVideoBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoBookmarks(ctx context.Context, in *CVideo_GetVideoBookmarks_Request, opts ...grpc.CallOption) (*CVideo_GetVideoBookmarks_Response, error) {
	out := new(CVideo_GetVideoBookmarks_Response)
	err := c.cc.Invoke(ctx, "/Video/GetVideoBookmarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	ClientGetVideoURL(context.Context, *CVideo_ClientGetVideoURL_Request) (*CVideo_ClientGetVideoURL_Response, error)
	SetVideoBookmark(context.Context, *CVideo_SetVideoBookmark_Notification) (*NoResponse, error)
	GetVideoBookmarks(context.Context, *CVideo_GetVideoBookmarks_Request) (*CVideo_GetVideoBookmarks_Response, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) ClientGetVideoURL(context.Context, *CVideo_ClientGetVideoURL_Request) (*CVideo_ClientGetVideoURL_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetVideoURL not implemented")
}
func (UnimplementedVideoServer) SetVideoBookmark(context.Context, *CVideo_SetVideoBookmark_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoBookmark not implemented")
}
func (UnimplementedVideoServer) GetVideoBookmarks(context.Context, *CVideo_GetVideoBookmarks_Request) (*CVideo_GetVideoBookmarks_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoBookmarks not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_ClientGetVideoURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVideo_ClientGetVideoURL_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).ClientGetVideoURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Video/ClientGetVideoURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).ClientGetVideoURL(ctx, req.(*CVideo_ClientGetVideoURL_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_SetVideoBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVideo_SetVideoBookmark_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).SetVideoBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Video/SetVideoBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).SetVideoBookmark(ctx, req.(*CVideo_SetVideoBookmark_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVideo_GetVideoBookmarks_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Video/GetVideoBookmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoBookmarks(ctx, req.(*CVideo_GetVideoBookmarks_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientGetVideoURL",
			Handler:    _Video_ClientGetVideoURL_Handler,
		},
		{
			MethodName: "SetVideoBookmark",
			Handler:    _Video_SetVideoBookmark_Handler,
		},
		{
			MethodName: "GetVideoBookmarks",
			Handler:    _Video_GetVideoBookmarks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_video.steamclient.proto",
}

// VideoClientClient is the client API for VideoClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClientClient interface {
	NotifyUnlockedH264(ctx context.Context, in *CVideo_UnlockedH264_Notification, opts ...grpc.CallOption) (*NoResponse, error)
}

type videoClientClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClientClient(cc grpc.ClientConnInterface) VideoClientClient {
	return &videoClientClient{cc}
}

func (c *videoClientClient) NotifyUnlockedH264(ctx context.Context, in *CVideo_UnlockedH264_Notification, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/VideoClient/NotifyUnlockedH264", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoClientServer is the server API for VideoClient service.
// All implementations must embed UnimplementedVideoClientServer
// for forward compatibility
type VideoClientServer interface {
	NotifyUnlockedH264(context.Context, *CVideo_UnlockedH264_Notification) (*NoResponse, error)
	mustEmbedUnimplementedVideoClientServer()
}

// UnimplementedVideoClientServer must be embedded to have forward compatible implementations.
type UnimplementedVideoClientServer struct {
}

func (UnimplementedVideoClientServer) NotifyUnlockedH264(context.Context, *CVideo_UnlockedH264_Notification) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUnlockedH264 not implemented")
}
func (UnimplementedVideoClientServer) mustEmbedUnimplementedVideoClientServer() {}

// UnsafeVideoClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoClientServer will
// result in compilation errors.
type UnsafeVideoClientServer interface {
	mustEmbedUnimplementedVideoClientServer()
}

func RegisterVideoClientServer(s grpc.ServiceRegistrar, srv VideoClientServer) {
	s.RegisterService(&VideoClient_ServiceDesc, srv)
}

func _VideoClient_NotifyUnlockedH264_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVideo_UnlockedH264_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoClientServer).NotifyUnlockedH264(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoClient/NotifyUnlockedH264",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoClientServer).NotifyUnlockedH264(ctx, req.(*CVideo_UnlockedH264_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoClient_ServiceDesc is the grpc.ServiceDesc for VideoClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoClient",
	HandlerType: (*VideoClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyUnlockedH264",
			Handler:    _VideoClient_NotifyUnlockedH264_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_video.steamclient.proto",
}

// FovasVideoClient is the client API for FovasVideo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FovasVideoClient interface {
	ClientGetOPFSettings(ctx context.Context, in *CFovasVideo_ClientGetOPFSettings_Request, opts ...grpc.CallOption) (*CFovasVideo_ClientGetOPFSettings_Response, error)
}

type fovasVideoClient struct {
	cc grpc.ClientConnInterface
}

func NewFovasVideoClient(cc grpc.ClientConnInterface) FovasVideoClient {
	return &fovasVideoClient{cc}
}

func (c *fovasVideoClient) ClientGetOPFSettings(ctx context.Context, in *CFovasVideo_ClientGetOPFSettings_Request, opts ...grpc.CallOption) (*CFovasVideo_ClientGetOPFSettings_Response, error) {
	out := new(CFovasVideo_ClientGetOPFSettings_Response)
	err := c.cc.Invoke(ctx, "/FovasVideo/ClientGetOPFSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FovasVideoServer is the server API for FovasVideo service.
// All implementations must embed UnimplementedFovasVideoServer
// for forward compatibility
type FovasVideoServer interface {
	ClientGetOPFSettings(context.Context, *CFovasVideo_ClientGetOPFSettings_Request) (*CFovasVideo_ClientGetOPFSettings_Response, error)
	mustEmbedUnimplementedFovasVideoServer()
}

// UnimplementedFovasVideoServer must be embedded to have forward compatible implementations.
type UnimplementedFovasVideoServer struct {
}

func (UnimplementedFovasVideoServer) ClientGetOPFSettings(context.Context, *CFovasVideo_ClientGetOPFSettings_Request) (*CFovasVideo_ClientGetOPFSettings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetOPFSettings not implemented")
}
func (UnimplementedFovasVideoServer) mustEmbedUnimplementedFovasVideoServer() {}

// UnsafeFovasVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FovasVideoServer will
// result in compilation errors.
type UnsafeFovasVideoServer interface {
	mustEmbedUnimplementedFovasVideoServer()
}

func RegisterFovasVideoServer(s grpc.ServiceRegistrar, srv FovasVideoServer) {
	s.RegisterService(&FovasVideo_ServiceDesc, srv)
}

func _FovasVideo_ClientGetOPFSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFovasVideo_ClientGetOPFSettings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FovasVideoServer).ClientGetOPFSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FovasVideo/ClientGetOPFSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FovasVideoServer).ClientGetOPFSettings(ctx, req.(*CFovasVideo_ClientGetOPFSettings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FovasVideo_ServiceDesc is the grpc.ServiceDesc for FovasVideo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FovasVideo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FovasVideo",
	HandlerType: (*FovasVideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientGetOPFSettings",
			Handler:    _FovasVideo_ClientGetOPFSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_video.steamclient.proto",
}
