// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: steammessages_workshop.steamclient.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkshopClient is the client API for Workshop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkshopClient interface {
	GetEULAStatus(ctx context.Context, in *CWorkshop_GetEULAStatus_Request, opts ...grpc.CallOption) (*CWorkshop_GetEULAStatus_Response, error)
}

type workshopClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkshopClient(cc grpc.ClientConnInterface) WorkshopClient {
	return &workshopClient{cc}
}

func (c *workshopClient) GetEULAStatus(ctx context.Context, in *CWorkshop_GetEULAStatus_Request, opts ...grpc.CallOption) (*CWorkshop_GetEULAStatus_Response, error) {
	out := new(CWorkshop_GetEULAStatus_Response)
	err := c.cc.Invoke(ctx, "/Workshop/GetEULAStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkshopServer is the server API for Workshop service.
// All implementations must embed UnimplementedWorkshopServer
// for forward compatibility
type WorkshopServer interface {
	GetEULAStatus(context.Context, *CWorkshop_GetEULAStatus_Request) (*CWorkshop_GetEULAStatus_Response, error)
	mustEmbedUnimplementedWorkshopServer()
}

// UnimplementedWorkshopServer must be embedded to have forward compatible implementations.
type UnimplementedWorkshopServer struct {
}

func (UnimplementedWorkshopServer) GetEULAStatus(context.Context, *CWorkshop_GetEULAStatus_Request) (*CWorkshop_GetEULAStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEULAStatus not implemented")
}
func (UnimplementedWorkshopServer) mustEmbedUnimplementedWorkshopServer() {}

// UnsafeWorkshopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkshopServer will
// result in compilation errors.
type UnsafeWorkshopServer interface {
	mustEmbedUnimplementedWorkshopServer()
}

func RegisterWorkshopServer(s grpc.ServiceRegistrar, srv WorkshopServer) {
	s.RegisterService(&Workshop_ServiceDesc, srv)
}

func _Workshop_GetEULAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CWorkshop_GetEULAStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServer).GetEULAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Workshop/GetEULAStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServer).GetEULAStatus(ctx, req.(*CWorkshop_GetEULAStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Workshop_ServiceDesc is the grpc.ServiceDesc for Workshop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workshop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Workshop",
	HandlerType: (*WorkshopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEULAStatus",
			Handler:    _Workshop_GetEULAStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steammessages_workshop.steamclient.proto",
}
