// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_achievements.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AchievementsClient is the client API for Achievements service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AchievementsClient interface {
	GetInfo(ctx context.Context, in *CAchievements_GetInfo_Request, opts ...grpc.CallOption) (*CAchievements_GetInfo_Response, error)
}

type achievementsClient struct {
	cc grpc.ClientConnInterface
}

func NewAchievementsClient(cc grpc.ClientConnInterface) AchievementsClient {
	return &achievementsClient{cc}
}

func (c *achievementsClient) GetInfo(ctx context.Context, in *CAchievements_GetInfo_Request, opts ...grpc.CallOption) (*CAchievements_GetInfo_Response, error) {
	out := new(CAchievements_GetInfo_Response)
	err := c.cc.Invoke(ctx, "/Achievements/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AchievementsServer is the server API for Achievements service.
// All implementations must embed UnimplementedAchievementsServer
// for forward compatibility
type AchievementsServer interface {
	GetInfo(context.Context, *CAchievements_GetInfo_Request) (*CAchievements_GetInfo_Response, error)
	mustEmbedUnimplementedAchievementsServer()
}

// UnimplementedAchievementsServer must be embedded to have forward compatible implementations.
type UnimplementedAchievementsServer struct {
}

func (UnimplementedAchievementsServer) GetInfo(context.Context, *CAchievements_GetInfo_Request) (*CAchievements_GetInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAchievementsServer) mustEmbedUnimplementedAchievementsServer() {}

// UnsafeAchievementsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AchievementsServer will
// result in compilation errors.
type UnsafeAchievementsServer interface {
	mustEmbedUnimplementedAchievementsServer()
}

func RegisterAchievementsServer(s grpc.ServiceRegistrar, srv AchievementsServer) {
	s.RegisterService(&Achievements_ServiceDesc, srv)
}

func _Achievements_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAchievements_GetInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementsServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Achievements/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementsServer).GetInfo(ctx, req.(*CAchievements_GetInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Achievements_ServiceDesc is the grpc.ServiceDesc for Achievements service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Achievements_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Achievements",
	HandlerType: (*AchievementsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Achievements_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_achievements.proto",
}
