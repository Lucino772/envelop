// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_bluetooth.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BluetoothManagerClient is the client API for BluetoothManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluetoothManagerClient interface {
	GetState(ctx context.Context, in *CBluetoothManager_GetState_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetState_Response, error)
	GetAdapterDetails(ctx context.Context, in *CBluetoothManager_GetAdapterDetails_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetAdapterDetails_Response, error)
	GetDeviceDetails(ctx context.Context, in *CBluetoothManager_GetDeviceDetails_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetDeviceDetails_Response, error)
	NotifyStateChanged(ctx context.Context, in *CBluetoothManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	SetDiscovering(ctx context.Context, in *CBluetoothManager_SetDiscovering_Request, opts ...grpc.CallOption) (*CBluetoothManager_SetDiscovering_Response, error)
	Pair(ctx context.Context, in *CBluetoothManager_Pair_Request, opts ...grpc.CallOption) (*CBluetoothManager_Pair_Response, error)
	CancelPair(ctx context.Context, in *CBluetoothManager_CancelPair_Request, opts ...grpc.CallOption) (*CBluetoothManager_CancelPair_Response, error)
	Forget(ctx context.Context, in *CBluetoothManager_Forget_Request, opts ...grpc.CallOption) (*CBluetoothManager_Forget_Response, error)
	Connect(ctx context.Context, in *CBluetoothManager_Connect_Request, opts ...grpc.CallOption) (*CBluetoothManager_Connect_Response, error)
	Disconnect(ctx context.Context, in *CBluetoothManager_Disconnect_Request, opts ...grpc.CallOption) (*CBluetoothManager_Disconnect_Response, error)
	SetWakeAllowed(ctx context.Context, in *CBluetoothManager_SetWakeAllowed_Request, opts ...grpc.CallOption) (*CBluetoothManager_SetWakeAllowed_Response, error)
}

type bluetoothManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBluetoothManagerClient(cc grpc.ClientConnInterface) BluetoothManagerClient {
	return &bluetoothManagerClient{cc}
}

func (c *bluetoothManagerClient) GetState(ctx context.Context, in *CBluetoothManager_GetState_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetState_Response, error) {
	out := new(CBluetoothManager_GetState_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) GetAdapterDetails(ctx context.Context, in *CBluetoothManager_GetAdapterDetails_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetAdapterDetails_Response, error) {
	out := new(CBluetoothManager_GetAdapterDetails_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/GetAdapterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) GetDeviceDetails(ctx context.Context, in *CBluetoothManager_GetDeviceDetails_Request, opts ...grpc.CallOption) (*CBluetoothManager_GetDeviceDetails_Response, error) {
	out := new(CBluetoothManager_GetDeviceDetails_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/GetDeviceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) NotifyStateChanged(ctx context.Context, in *CBluetoothManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/BluetoothManager/NotifyStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) SetDiscovering(ctx context.Context, in *CBluetoothManager_SetDiscovering_Request, opts ...grpc.CallOption) (*CBluetoothManager_SetDiscovering_Response, error) {
	out := new(CBluetoothManager_SetDiscovering_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/SetDiscovering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) Pair(ctx context.Context, in *CBluetoothManager_Pair_Request, opts ...grpc.CallOption) (*CBluetoothManager_Pair_Response, error) {
	out := new(CBluetoothManager_Pair_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/Pair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) CancelPair(ctx context.Context, in *CBluetoothManager_CancelPair_Request, opts ...grpc.CallOption) (*CBluetoothManager_CancelPair_Response, error) {
	out := new(CBluetoothManager_CancelPair_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/CancelPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) Forget(ctx context.Context, in *CBluetoothManager_Forget_Request, opts ...grpc.CallOption) (*CBluetoothManager_Forget_Response, error) {
	out := new(CBluetoothManager_Forget_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/Forget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) Connect(ctx context.Context, in *CBluetoothManager_Connect_Request, opts ...grpc.CallOption) (*CBluetoothManager_Connect_Response, error) {
	out := new(CBluetoothManager_Connect_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) Disconnect(ctx context.Context, in *CBluetoothManager_Disconnect_Request, opts ...grpc.CallOption) (*CBluetoothManager_Disconnect_Response, error) {
	out := new(CBluetoothManager_Disconnect_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothManagerClient) SetWakeAllowed(ctx context.Context, in *CBluetoothManager_SetWakeAllowed_Request, opts ...grpc.CallOption) (*CBluetoothManager_SetWakeAllowed_Response, error) {
	out := new(CBluetoothManager_SetWakeAllowed_Response)
	err := c.cc.Invoke(ctx, "/BluetoothManager/SetWakeAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothManagerServer is the server API for BluetoothManager service.
// All implementations must embed UnimplementedBluetoothManagerServer
// for forward compatibility
type BluetoothManagerServer interface {
	GetState(context.Context, *CBluetoothManager_GetState_Request) (*CBluetoothManager_GetState_Response, error)
	GetAdapterDetails(context.Context, *CBluetoothManager_GetAdapterDetails_Request) (*CBluetoothManager_GetAdapterDetails_Response, error)
	GetDeviceDetails(context.Context, *CBluetoothManager_GetDeviceDetails_Request) (*CBluetoothManager_GetDeviceDetails_Response, error)
	NotifyStateChanged(context.Context, *CBluetoothManager_StateChanged_Notification) (*WebUINoResponse, error)
	SetDiscovering(context.Context, *CBluetoothManager_SetDiscovering_Request) (*CBluetoothManager_SetDiscovering_Response, error)
	Pair(context.Context, *CBluetoothManager_Pair_Request) (*CBluetoothManager_Pair_Response, error)
	CancelPair(context.Context, *CBluetoothManager_CancelPair_Request) (*CBluetoothManager_CancelPair_Response, error)
	Forget(context.Context, *CBluetoothManager_Forget_Request) (*CBluetoothManager_Forget_Response, error)
	Connect(context.Context, *CBluetoothManager_Connect_Request) (*CBluetoothManager_Connect_Response, error)
	Disconnect(context.Context, *CBluetoothManager_Disconnect_Request) (*CBluetoothManager_Disconnect_Response, error)
	SetWakeAllowed(context.Context, *CBluetoothManager_SetWakeAllowed_Request) (*CBluetoothManager_SetWakeAllowed_Response, error)
	mustEmbedUnimplementedBluetoothManagerServer()
}

// UnimplementedBluetoothManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBluetoothManagerServer struct {
}

func (UnimplementedBluetoothManagerServer) GetState(context.Context, *CBluetoothManager_GetState_Request) (*CBluetoothManager_GetState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedBluetoothManagerServer) GetAdapterDetails(context.Context, *CBluetoothManager_GetAdapterDetails_Request) (*CBluetoothManager_GetAdapterDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdapterDetails not implemented")
}
func (UnimplementedBluetoothManagerServer) GetDeviceDetails(context.Context, *CBluetoothManager_GetDeviceDetails_Request) (*CBluetoothManager_GetDeviceDetails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDetails not implemented")
}
func (UnimplementedBluetoothManagerServer) NotifyStateChanged(context.Context, *CBluetoothManager_StateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStateChanged not implemented")
}
func (UnimplementedBluetoothManagerServer) SetDiscovering(context.Context, *CBluetoothManager_SetDiscovering_Request) (*CBluetoothManager_SetDiscovering_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDiscovering not implemented")
}
func (UnimplementedBluetoothManagerServer) Pair(context.Context, *CBluetoothManager_Pair_Request) (*CBluetoothManager_Pair_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pair not implemented")
}
func (UnimplementedBluetoothManagerServer) CancelPair(context.Context, *CBluetoothManager_CancelPair_Request) (*CBluetoothManager_CancelPair_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPair not implemented")
}
func (UnimplementedBluetoothManagerServer) Forget(context.Context, *CBluetoothManager_Forget_Request) (*CBluetoothManager_Forget_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedBluetoothManagerServer) Connect(context.Context, *CBluetoothManager_Connect_Request) (*CBluetoothManager_Connect_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedBluetoothManagerServer) Disconnect(context.Context, *CBluetoothManager_Disconnect_Request) (*CBluetoothManager_Disconnect_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedBluetoothManagerServer) SetWakeAllowed(context.Context, *CBluetoothManager_SetWakeAllowed_Request) (*CBluetoothManager_SetWakeAllowed_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWakeAllowed not implemented")
}
func (UnimplementedBluetoothManagerServer) mustEmbedUnimplementedBluetoothManagerServer() {}

// UnsafeBluetoothManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluetoothManagerServer will
// result in compilation errors.
type UnsafeBluetoothManagerServer interface {
	mustEmbedUnimplementedBluetoothManagerServer()
}

func RegisterBluetoothManagerServer(s grpc.ServiceRegistrar, srv BluetoothManagerServer) {
	s.RegisterService(&BluetoothManager_ServiceDesc, srv)
}

func _BluetoothManager_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_GetState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).GetState(ctx, req.(*CBluetoothManager_GetState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_GetAdapterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_GetAdapterDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).GetAdapterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/GetAdapterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).GetAdapterDetails(ctx, req.(*CBluetoothManager_GetAdapterDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_GetDeviceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_GetDeviceDetails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).GetDeviceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/GetDeviceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).GetDeviceDetails(ctx, req.(*CBluetoothManager_GetDeviceDetails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_NotifyStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_StateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).NotifyStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/NotifyStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).NotifyStateChanged(ctx, req.(*CBluetoothManager_StateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_SetDiscovering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_SetDiscovering_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).SetDiscovering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/SetDiscovering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).SetDiscovering(ctx, req.(*CBluetoothManager_SetDiscovering_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_Pair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_Pair_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).Pair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/Pair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).Pair(ctx, req.(*CBluetoothManager_Pair_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_CancelPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_CancelPair_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).CancelPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/CancelPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).CancelPair(ctx, req.(*CBluetoothManager_CancelPair_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_Forget_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/Forget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).Forget(ctx, req.(*CBluetoothManager_Forget_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_Connect_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).Connect(ctx, req.(*CBluetoothManager_Connect_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_Disconnect_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).Disconnect(ctx, req.(*CBluetoothManager_Disconnect_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothManager_SetWakeAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBluetoothManager_SetWakeAllowed_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothManagerServer).SetWakeAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BluetoothManager/SetWakeAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothManagerServer).SetWakeAllowed(ctx, req.(*CBluetoothManager_SetWakeAllowed_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BluetoothManager_ServiceDesc is the grpc.ServiceDesc for BluetoothManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BluetoothManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BluetoothManager",
	HandlerType: (*BluetoothManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _BluetoothManager_GetState_Handler,
		},
		{
			MethodName: "GetAdapterDetails",
			Handler:    _BluetoothManager_GetAdapterDetails_Handler,
		},
		{
			MethodName: "GetDeviceDetails",
			Handler:    _BluetoothManager_GetDeviceDetails_Handler,
		},
		{
			MethodName: "NotifyStateChanged",
			Handler:    _BluetoothManager_NotifyStateChanged_Handler,
		},
		{
			MethodName: "SetDiscovering",
			Handler:    _BluetoothManager_SetDiscovering_Handler,
		},
		{
			MethodName: "Pair",
			Handler:    _BluetoothManager_Pair_Handler,
		},
		{
			MethodName: "CancelPair",
			Handler:    _BluetoothManager_CancelPair_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _BluetoothManager_Forget_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BluetoothManager_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _BluetoothManager_Disconnect_Handler,
		},
		{
			MethodName: "SetWakeAllowed",
			Handler:    _BluetoothManager_SetWakeAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_bluetooth.proto",
}
