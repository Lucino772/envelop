// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_gamerecording.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameRecordingClient is the client API for GameRecording service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameRecordingClient interface {
	GetActiveTimelineApps(ctx context.Context, in *CGameRecording_GetActiveTimelineApps_Request, opts ...grpc.CallOption) (*CGameRecording_GetActiveTimelineApps_Response, error)
	GetTimelinesForApp(ctx context.Context, in *CGameRecording_GetTimelinesForApp_Request, opts ...grpc.CallOption) (*CGameRecording_GetTimelinesForApp_Response, error)
	GetTimelinesForClip(ctx context.Context, in *CGameRecording_GetTimelinesForClip_Request, opts ...grpc.CallOption) (*CGameRecording_GetTimelinesForClip_Response, error)
	GetEnoughDiskSpace(ctx context.Context, in *CGameRecording_GetEnoughDiskSpace_Request, opts ...grpc.CallOption) (*CGameRecording_GetEnoughDiskSpace_Response, error)
	GetAvailableDiskSpace(ctx context.Context, in *CGameRecording_GetAvailableDiskSpace_Request, opts ...grpc.CallOption) (*CGameRecording_GetAvailableDiskSpace_Response, error)
	SaveClip(ctx context.Context, in *CGameRecording_SaveClip_Request, opts ...grpc.CallOption) (*CGameRecording_SaveClip_Response, error)
	DeleteClip(ctx context.Context, in *CGameRecording_DeleteClip_Request, opts ...grpc.CallOption) (*CGameRecording_DeleteClip_Response, error)
	GetClips(ctx context.Context, in *CGameRecording_GetClips_Request, opts ...grpc.CallOption) (*CGameRecording_GetClips_Response, error)
	UploadClipToSteam(ctx context.Context, in *CGameRecording_UploadClipToSteam_Request, opts ...grpc.CallOption) (*CGameRecording_UploadClipToSteam_Response, error)
	ExportClip(ctx context.Context, in *CGameRecording_ExportClip_Request, opts ...grpc.CallOption) (*CGameRecording_ExportClip_Response, error)
	ZipClip(ctx context.Context, in *CGameRecording_ZipClip_Request, opts ...grpc.CallOption) (*CGameRecording_ZipClip_Response, error)
	StartRecording(ctx context.Context, in *CGameRecording_StartRecording_Request, opts ...grpc.CallOption) (*CGameRecording_StartRecording_Response, error)
	StopRecording(ctx context.Context, in *CGameRecording_StopRecording_Request, opts ...grpc.CallOption) (*CGameRecording_StopRecording_Response, error)
	GetBackgroundRecordingFileSize(ctx context.Context, in *CGameRecording_GetRecordingSize_Request, opts ...grpc.CallOption) (*CGameRecording_GetRecordingSize_Response, error)
	CleanupBackgroundRecordings(ctx context.Context, in *CGameRecording_CleanupBackgroundRecordings_Request, opts ...grpc.CallOption) (*CGameRecording_CleanupBackgroundRecordings_Response, error)
	GetAndTrimPostGameHighlights(ctx context.Context, in *CGameRecording_GetAndTrimPostGameHighlights_Request, opts ...grpc.CallOption) (*CGameRecording_GetAndTrimPostGameHighlights_Response, error)
	GetThumbnails(ctx context.Context, in *CGameRecording_GetThumbnails_Request, opts ...grpc.CallOption) (*CGameRecording_GetThumbnails_Response, error)
	GetPlatformCapabilities(ctx context.Context, in *CGameRecording_GetPlatformCapabilities_Request, opts ...grpc.CallOption) (*CGameRecording_GetPlatformCapabilities_Response, error)
	NotifyTimelineChanged(ctx context.Context, in *CGameRecording_TimelineChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyRecordingSessionChanged(ctx context.Context, in *CGameRecording_RecordingSessionChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyTimelineEntryChanged(ctx context.Context, in *CGameRecording_TimelineEntryChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyClipCreated(ctx context.Context, in *CGameRecording_ClipCreated_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyClipDeleted(ctx context.Context, in *CGameRecording_ClipDeleted_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyExportProgress(ctx context.Context, in *CGameRecording_ExportProgress_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyUploadProgress(ctx context.Context, in *CGameRecording_UploadProgress_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyLowDiskSpace(ctx context.Context, in *CGameRecording_LowDiskSpace_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyPostGameHighlightsChanged(ctx context.Context, in *CGameRecording_PostGameHighlightsChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	UserAddTimelineEntry(ctx context.Context, in *CGameRecording_UserAddTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserAddTimelineEntry_Response, error)
	UserUpdateTimelineEntry(ctx context.Context, in *CGameRecording_UserUpdateTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserUpdateTimelineEntry_Response, error)
	UserRemoveTimelineEntry(ctx context.Context, in *CGameRecording_UserRemoveTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserRemoveTimelineEntry_Response, error)
	ManuallyDeleteRecordingsForApps(ctx context.Context, in *CGameRecording_ManuallyDeleteRecordingsForApps_Request, opts ...grpc.CallOption) (*CGameRecording_ManuallyDeleteRecordingsForApps_Response, error)
	GetTotalDiskSpaceUsage(ctx context.Context, in *CGameRecording_GetTotalDiskSpaceUsage_Request, opts ...grpc.CallOption) (*CGameRecording_GetTotalDiskSpaceUsage_Response, error)
	SwitchBackgroundRecordingGame(ctx context.Context, in *CGameRecording_SwitchBackgroundRecordingGame_Request, opts ...grpc.CallOption) (*CGameRecording_SwitchBackgroundRecordingGame_Response, error)
}

type gameRecordingClient struct {
	cc grpc.ClientConnInterface
}

func NewGameRecordingClient(cc grpc.ClientConnInterface) GameRecordingClient {
	return &gameRecordingClient{cc}
}

func (c *gameRecordingClient) GetActiveTimelineApps(ctx context.Context, in *CGameRecording_GetActiveTimelineApps_Request, opts ...grpc.CallOption) (*CGameRecording_GetActiveTimelineApps_Response, error) {
	out := new(CGameRecording_GetActiveTimelineApps_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetActiveTimelineApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetTimelinesForApp(ctx context.Context, in *CGameRecording_GetTimelinesForApp_Request, opts ...grpc.CallOption) (*CGameRecording_GetTimelinesForApp_Response, error) {
	out := new(CGameRecording_GetTimelinesForApp_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetTimelinesForApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetTimelinesForClip(ctx context.Context, in *CGameRecording_GetTimelinesForClip_Request, opts ...grpc.CallOption) (*CGameRecording_GetTimelinesForClip_Response, error) {
	out := new(CGameRecording_GetTimelinesForClip_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetTimelinesForClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetEnoughDiskSpace(ctx context.Context, in *CGameRecording_GetEnoughDiskSpace_Request, opts ...grpc.CallOption) (*CGameRecording_GetEnoughDiskSpace_Response, error) {
	out := new(CGameRecording_GetEnoughDiskSpace_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetEnoughDiskSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetAvailableDiskSpace(ctx context.Context, in *CGameRecording_GetAvailableDiskSpace_Request, opts ...grpc.CallOption) (*CGameRecording_GetAvailableDiskSpace_Response, error) {
	out := new(CGameRecording_GetAvailableDiskSpace_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetAvailableDiskSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) SaveClip(ctx context.Context, in *CGameRecording_SaveClip_Request, opts ...grpc.CallOption) (*CGameRecording_SaveClip_Response, error) {
	out := new(CGameRecording_SaveClip_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/SaveClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) DeleteClip(ctx context.Context, in *CGameRecording_DeleteClip_Request, opts ...grpc.CallOption) (*CGameRecording_DeleteClip_Response, error) {
	out := new(CGameRecording_DeleteClip_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/DeleteClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetClips(ctx context.Context, in *CGameRecording_GetClips_Request, opts ...grpc.CallOption) (*CGameRecording_GetClips_Response, error) {
	out := new(CGameRecording_GetClips_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetClips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) UploadClipToSteam(ctx context.Context, in *CGameRecording_UploadClipToSteam_Request, opts ...grpc.CallOption) (*CGameRecording_UploadClipToSteam_Response, error) {
	out := new(CGameRecording_UploadClipToSteam_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/UploadClipToSteam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) ExportClip(ctx context.Context, in *CGameRecording_ExportClip_Request, opts ...grpc.CallOption) (*CGameRecording_ExportClip_Response, error) {
	out := new(CGameRecording_ExportClip_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/ExportClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) ZipClip(ctx context.Context, in *CGameRecording_ZipClip_Request, opts ...grpc.CallOption) (*CGameRecording_ZipClip_Response, error) {
	out := new(CGameRecording_ZipClip_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/ZipClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) StartRecording(ctx context.Context, in *CGameRecording_StartRecording_Request, opts ...grpc.CallOption) (*CGameRecording_StartRecording_Response, error) {
	out := new(CGameRecording_StartRecording_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) StopRecording(ctx context.Context, in *CGameRecording_StopRecording_Request, opts ...grpc.CallOption) (*CGameRecording_StopRecording_Response, error) {
	out := new(CGameRecording_StopRecording_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetBackgroundRecordingFileSize(ctx context.Context, in *CGameRecording_GetRecordingSize_Request, opts ...grpc.CallOption) (*CGameRecording_GetRecordingSize_Response, error) {
	out := new(CGameRecording_GetRecordingSize_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetBackgroundRecordingFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) CleanupBackgroundRecordings(ctx context.Context, in *CGameRecording_CleanupBackgroundRecordings_Request, opts ...grpc.CallOption) (*CGameRecording_CleanupBackgroundRecordings_Response, error) {
	out := new(CGameRecording_CleanupBackgroundRecordings_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/CleanupBackgroundRecordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetAndTrimPostGameHighlights(ctx context.Context, in *CGameRecording_GetAndTrimPostGameHighlights_Request, opts ...grpc.CallOption) (*CGameRecording_GetAndTrimPostGameHighlights_Response, error) {
	out := new(CGameRecording_GetAndTrimPostGameHighlights_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetAndTrimPostGameHighlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetThumbnails(ctx context.Context, in *CGameRecording_GetThumbnails_Request, opts ...grpc.CallOption) (*CGameRecording_GetThumbnails_Response, error) {
	out := new(CGameRecording_GetThumbnails_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetThumbnails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetPlatformCapabilities(ctx context.Context, in *CGameRecording_GetPlatformCapabilities_Request, opts ...grpc.CallOption) (*CGameRecording_GetPlatformCapabilities_Response, error) {
	out := new(CGameRecording_GetPlatformCapabilities_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetPlatformCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyTimelineChanged(ctx context.Context, in *CGameRecording_TimelineChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyTimelineChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyRecordingSessionChanged(ctx context.Context, in *CGameRecording_RecordingSessionChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyRecordingSessionChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyTimelineEntryChanged(ctx context.Context, in *CGameRecording_TimelineEntryChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyTimelineEntryChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyClipCreated(ctx context.Context, in *CGameRecording_ClipCreated_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyClipCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyClipDeleted(ctx context.Context, in *CGameRecording_ClipDeleted_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyClipDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyExportProgress(ctx context.Context, in *CGameRecording_ExportProgress_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyExportProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyUploadProgress(ctx context.Context, in *CGameRecording_UploadProgress_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyUploadProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyLowDiskSpace(ctx context.Context, in *CGameRecording_LowDiskSpace_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyLowDiskSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) NotifyPostGameHighlightsChanged(ctx context.Context, in *CGameRecording_PostGameHighlightsChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/GameRecording/NotifyPostGameHighlightsChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) UserAddTimelineEntry(ctx context.Context, in *CGameRecording_UserAddTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserAddTimelineEntry_Response, error) {
	out := new(CGameRecording_UserAddTimelineEntry_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/UserAddTimelineEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) UserUpdateTimelineEntry(ctx context.Context, in *CGameRecording_UserUpdateTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserUpdateTimelineEntry_Response, error) {
	out := new(CGameRecording_UserUpdateTimelineEntry_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/UserUpdateTimelineEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) UserRemoveTimelineEntry(ctx context.Context, in *CGameRecording_UserRemoveTimelineEntry_Request, opts ...grpc.CallOption) (*CGameRecording_UserRemoveTimelineEntry_Response, error) {
	out := new(CGameRecording_UserRemoveTimelineEntry_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/UserRemoveTimelineEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) ManuallyDeleteRecordingsForApps(ctx context.Context, in *CGameRecording_ManuallyDeleteRecordingsForApps_Request, opts ...grpc.CallOption) (*CGameRecording_ManuallyDeleteRecordingsForApps_Response, error) {
	out := new(CGameRecording_ManuallyDeleteRecordingsForApps_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/ManuallyDeleteRecordingsForApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) GetTotalDiskSpaceUsage(ctx context.Context, in *CGameRecording_GetTotalDiskSpaceUsage_Request, opts ...grpc.CallOption) (*CGameRecording_GetTotalDiskSpaceUsage_Response, error) {
	out := new(CGameRecording_GetTotalDiskSpaceUsage_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/GetTotalDiskSpaceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingClient) SwitchBackgroundRecordingGame(ctx context.Context, in *CGameRecording_SwitchBackgroundRecordingGame_Request, opts ...grpc.CallOption) (*CGameRecording_SwitchBackgroundRecordingGame_Response, error) {
	out := new(CGameRecording_SwitchBackgroundRecordingGame_Response)
	err := c.cc.Invoke(ctx, "/GameRecording/SwitchBackgroundRecordingGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRecordingServer is the server API for GameRecording service.
// All implementations must embed UnimplementedGameRecordingServer
// for forward compatibility
type GameRecordingServer interface {
	GetActiveTimelineApps(context.Context, *CGameRecording_GetActiveTimelineApps_Request) (*CGameRecording_GetActiveTimelineApps_Response, error)
	GetTimelinesForApp(context.Context, *CGameRecording_GetTimelinesForApp_Request) (*CGameRecording_GetTimelinesForApp_Response, error)
	GetTimelinesForClip(context.Context, *CGameRecording_GetTimelinesForClip_Request) (*CGameRecording_GetTimelinesForClip_Response, error)
	GetEnoughDiskSpace(context.Context, *CGameRecording_GetEnoughDiskSpace_Request) (*CGameRecording_GetEnoughDiskSpace_Response, error)
	GetAvailableDiskSpace(context.Context, *CGameRecording_GetAvailableDiskSpace_Request) (*CGameRecording_GetAvailableDiskSpace_Response, error)
	SaveClip(context.Context, *CGameRecording_SaveClip_Request) (*CGameRecording_SaveClip_Response, error)
	DeleteClip(context.Context, *CGameRecording_DeleteClip_Request) (*CGameRecording_DeleteClip_Response, error)
	GetClips(context.Context, *CGameRecording_GetClips_Request) (*CGameRecording_GetClips_Response, error)
	UploadClipToSteam(context.Context, *CGameRecording_UploadClipToSteam_Request) (*CGameRecording_UploadClipToSteam_Response, error)
	ExportClip(context.Context, *CGameRecording_ExportClip_Request) (*CGameRecording_ExportClip_Response, error)
	ZipClip(context.Context, *CGameRecording_ZipClip_Request) (*CGameRecording_ZipClip_Response, error)
	StartRecording(context.Context, *CGameRecording_StartRecording_Request) (*CGameRecording_StartRecording_Response, error)
	StopRecording(context.Context, *CGameRecording_StopRecording_Request) (*CGameRecording_StopRecording_Response, error)
	GetBackgroundRecordingFileSize(context.Context, *CGameRecording_GetRecordingSize_Request) (*CGameRecording_GetRecordingSize_Response, error)
	CleanupBackgroundRecordings(context.Context, *CGameRecording_CleanupBackgroundRecordings_Request) (*CGameRecording_CleanupBackgroundRecordings_Response, error)
	GetAndTrimPostGameHighlights(context.Context, *CGameRecording_GetAndTrimPostGameHighlights_Request) (*CGameRecording_GetAndTrimPostGameHighlights_Response, error)
	GetThumbnails(context.Context, *CGameRecording_GetThumbnails_Request) (*CGameRecording_GetThumbnails_Response, error)
	GetPlatformCapabilities(context.Context, *CGameRecording_GetPlatformCapabilities_Request) (*CGameRecording_GetPlatformCapabilities_Response, error)
	NotifyTimelineChanged(context.Context, *CGameRecording_TimelineChanged_Notification) (*WebUINoResponse, error)
	NotifyRecordingSessionChanged(context.Context, *CGameRecording_RecordingSessionChanged_Notification) (*WebUINoResponse, error)
	NotifyTimelineEntryChanged(context.Context, *CGameRecording_TimelineEntryChanged_Notification) (*WebUINoResponse, error)
	NotifyClipCreated(context.Context, *CGameRecording_ClipCreated_Notification) (*WebUINoResponse, error)
	NotifyClipDeleted(context.Context, *CGameRecording_ClipDeleted_Notification) (*WebUINoResponse, error)
	NotifyExportProgress(context.Context, *CGameRecording_ExportProgress_Notification) (*WebUINoResponse, error)
	NotifyUploadProgress(context.Context, *CGameRecording_UploadProgress_Notification) (*WebUINoResponse, error)
	NotifyLowDiskSpace(context.Context, *CGameRecording_LowDiskSpace_Notification) (*WebUINoResponse, error)
	NotifyPostGameHighlightsChanged(context.Context, *CGameRecording_PostGameHighlightsChanged_Notification) (*WebUINoResponse, error)
	UserAddTimelineEntry(context.Context, *CGameRecording_UserAddTimelineEntry_Request) (*CGameRecording_UserAddTimelineEntry_Response, error)
	UserUpdateTimelineEntry(context.Context, *CGameRecording_UserUpdateTimelineEntry_Request) (*CGameRecording_UserUpdateTimelineEntry_Response, error)
	UserRemoveTimelineEntry(context.Context, *CGameRecording_UserRemoveTimelineEntry_Request) (*CGameRecording_UserRemoveTimelineEntry_Response, error)
	ManuallyDeleteRecordingsForApps(context.Context, *CGameRecording_ManuallyDeleteRecordingsForApps_Request) (*CGameRecording_ManuallyDeleteRecordingsForApps_Response, error)
	GetTotalDiskSpaceUsage(context.Context, *CGameRecording_GetTotalDiskSpaceUsage_Request) (*CGameRecording_GetTotalDiskSpaceUsage_Response, error)
	SwitchBackgroundRecordingGame(context.Context, *CGameRecording_SwitchBackgroundRecordingGame_Request) (*CGameRecording_SwitchBackgroundRecordingGame_Response, error)
	mustEmbedUnimplementedGameRecordingServer()
}

// UnimplementedGameRecordingServer must be embedded to have forward compatible implementations.
type UnimplementedGameRecordingServer struct {
}

func (UnimplementedGameRecordingServer) GetActiveTimelineApps(context.Context, *CGameRecording_GetActiveTimelineApps_Request) (*CGameRecording_GetActiveTimelineApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTimelineApps not implemented")
}
func (UnimplementedGameRecordingServer) GetTimelinesForApp(context.Context, *CGameRecording_GetTimelinesForApp_Request) (*CGameRecording_GetTimelinesForApp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimelinesForApp not implemented")
}
func (UnimplementedGameRecordingServer) GetTimelinesForClip(context.Context, *CGameRecording_GetTimelinesForClip_Request) (*CGameRecording_GetTimelinesForClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimelinesForClip not implemented")
}
func (UnimplementedGameRecordingServer) GetEnoughDiskSpace(context.Context, *CGameRecording_GetEnoughDiskSpace_Request) (*CGameRecording_GetEnoughDiskSpace_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnoughDiskSpace not implemented")
}
func (UnimplementedGameRecordingServer) GetAvailableDiskSpace(context.Context, *CGameRecording_GetAvailableDiskSpace_Request) (*CGameRecording_GetAvailableDiskSpace_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDiskSpace not implemented")
}
func (UnimplementedGameRecordingServer) SaveClip(context.Context, *CGameRecording_SaveClip_Request) (*CGameRecording_SaveClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClip not implemented")
}
func (UnimplementedGameRecordingServer) DeleteClip(context.Context, *CGameRecording_DeleteClip_Request) (*CGameRecording_DeleteClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClip not implemented")
}
func (UnimplementedGameRecordingServer) GetClips(context.Context, *CGameRecording_GetClips_Request) (*CGameRecording_GetClips_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClips not implemented")
}
func (UnimplementedGameRecordingServer) UploadClipToSteam(context.Context, *CGameRecording_UploadClipToSteam_Request) (*CGameRecording_UploadClipToSteam_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadClipToSteam not implemented")
}
func (UnimplementedGameRecordingServer) ExportClip(context.Context, *CGameRecording_ExportClip_Request) (*CGameRecording_ExportClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportClip not implemented")
}
func (UnimplementedGameRecordingServer) ZipClip(context.Context, *CGameRecording_ZipClip_Request) (*CGameRecording_ZipClip_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZipClip not implemented")
}
func (UnimplementedGameRecordingServer) StartRecording(context.Context, *CGameRecording_StartRecording_Request) (*CGameRecording_StartRecording_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedGameRecordingServer) StopRecording(context.Context, *CGameRecording_StopRecording_Request) (*CGameRecording_StopRecording_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedGameRecordingServer) GetBackgroundRecordingFileSize(context.Context, *CGameRecording_GetRecordingSize_Request) (*CGameRecording_GetRecordingSize_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackgroundRecordingFileSize not implemented")
}
func (UnimplementedGameRecordingServer) CleanupBackgroundRecordings(context.Context, *CGameRecording_CleanupBackgroundRecordings_Request) (*CGameRecording_CleanupBackgroundRecordings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupBackgroundRecordings not implemented")
}
func (UnimplementedGameRecordingServer) GetAndTrimPostGameHighlights(context.Context, *CGameRecording_GetAndTrimPostGameHighlights_Request) (*CGameRecording_GetAndTrimPostGameHighlights_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndTrimPostGameHighlights not implemented")
}
func (UnimplementedGameRecordingServer) GetThumbnails(context.Context, *CGameRecording_GetThumbnails_Request) (*CGameRecording_GetThumbnails_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbnails not implemented")
}
func (UnimplementedGameRecordingServer) GetPlatformCapabilities(context.Context, *CGameRecording_GetPlatformCapabilities_Request) (*CGameRecording_GetPlatformCapabilities_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformCapabilities not implemented")
}
func (UnimplementedGameRecordingServer) NotifyTimelineChanged(context.Context, *CGameRecording_TimelineChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTimelineChanged not implemented")
}
func (UnimplementedGameRecordingServer) NotifyRecordingSessionChanged(context.Context, *CGameRecording_RecordingSessionChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRecordingSessionChanged not implemented")
}
func (UnimplementedGameRecordingServer) NotifyTimelineEntryChanged(context.Context, *CGameRecording_TimelineEntryChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTimelineEntryChanged not implemented")
}
func (UnimplementedGameRecordingServer) NotifyClipCreated(context.Context, *CGameRecording_ClipCreated_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClipCreated not implemented")
}
func (UnimplementedGameRecordingServer) NotifyClipDeleted(context.Context, *CGameRecording_ClipDeleted_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClipDeleted not implemented")
}
func (UnimplementedGameRecordingServer) NotifyExportProgress(context.Context, *CGameRecording_ExportProgress_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyExportProgress not implemented")
}
func (UnimplementedGameRecordingServer) NotifyUploadProgress(context.Context, *CGameRecording_UploadProgress_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUploadProgress not implemented")
}
func (UnimplementedGameRecordingServer) NotifyLowDiskSpace(context.Context, *CGameRecording_LowDiskSpace_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLowDiskSpace not implemented")
}
func (UnimplementedGameRecordingServer) NotifyPostGameHighlightsChanged(context.Context, *CGameRecording_PostGameHighlightsChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPostGameHighlightsChanged not implemented")
}
func (UnimplementedGameRecordingServer) UserAddTimelineEntry(context.Context, *CGameRecording_UserAddTimelineEntry_Request) (*CGameRecording_UserAddTimelineEntry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddTimelineEntry not implemented")
}
func (UnimplementedGameRecordingServer) UserUpdateTimelineEntry(context.Context, *CGameRecording_UserUpdateTimelineEntry_Request) (*CGameRecording_UserUpdateTimelineEntry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateTimelineEntry not implemented")
}
func (UnimplementedGameRecordingServer) UserRemoveTimelineEntry(context.Context, *CGameRecording_UserRemoveTimelineEntry_Request) (*CGameRecording_UserRemoveTimelineEntry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRemoveTimelineEntry not implemented")
}
func (UnimplementedGameRecordingServer) ManuallyDeleteRecordingsForApps(context.Context, *CGameRecording_ManuallyDeleteRecordingsForApps_Request) (*CGameRecording_ManuallyDeleteRecordingsForApps_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManuallyDeleteRecordingsForApps not implemented")
}
func (UnimplementedGameRecordingServer) GetTotalDiskSpaceUsage(context.Context, *CGameRecording_GetTotalDiskSpaceUsage_Request) (*CGameRecording_GetTotalDiskSpaceUsage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalDiskSpaceUsage not implemented")
}
func (UnimplementedGameRecordingServer) SwitchBackgroundRecordingGame(context.Context, *CGameRecording_SwitchBackgroundRecordingGame_Request) (*CGameRecording_SwitchBackgroundRecordingGame_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchBackgroundRecordingGame not implemented")
}
func (UnimplementedGameRecordingServer) mustEmbedUnimplementedGameRecordingServer() {}

// UnsafeGameRecordingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameRecordingServer will
// result in compilation errors.
type UnsafeGameRecordingServer interface {
	mustEmbedUnimplementedGameRecordingServer()
}

func RegisterGameRecordingServer(s grpc.ServiceRegistrar, srv GameRecordingServer) {
	s.RegisterService(&GameRecording_ServiceDesc, srv)
}

func _GameRecording_GetActiveTimelineApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetActiveTimelineApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetActiveTimelineApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetActiveTimelineApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetActiveTimelineApps(ctx, req.(*CGameRecording_GetActiveTimelineApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetTimelinesForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetTimelinesForApp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetTimelinesForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetTimelinesForApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetTimelinesForApp(ctx, req.(*CGameRecording_GetTimelinesForApp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetTimelinesForClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetTimelinesForClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetTimelinesForClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetTimelinesForClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetTimelinesForClip(ctx, req.(*CGameRecording_GetTimelinesForClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetEnoughDiskSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetEnoughDiskSpace_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetEnoughDiskSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetEnoughDiskSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetEnoughDiskSpace(ctx, req.(*CGameRecording_GetEnoughDiskSpace_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetAvailableDiskSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetAvailableDiskSpace_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetAvailableDiskSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetAvailableDiskSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetAvailableDiskSpace(ctx, req.(*CGameRecording_GetAvailableDiskSpace_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_SaveClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_SaveClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).SaveClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/SaveClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).SaveClip(ctx, req.(*CGameRecording_SaveClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_DeleteClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_DeleteClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).DeleteClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/DeleteClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).DeleteClip(ctx, req.(*CGameRecording_DeleteClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetClips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetClips_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetClips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetClips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetClips(ctx, req.(*CGameRecording_GetClips_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_UploadClipToSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_UploadClipToSteam_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).UploadClipToSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/UploadClipToSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).UploadClipToSteam(ctx, req.(*CGameRecording_UploadClipToSteam_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_ExportClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ExportClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).ExportClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/ExportClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).ExportClip(ctx, req.(*CGameRecording_ExportClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_ZipClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ZipClip_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).ZipClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/ZipClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).ZipClip(ctx, req.(*CGameRecording_ZipClip_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_StartRecording_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).StartRecording(ctx, req.(*CGameRecording_StartRecording_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_StopRecording_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).StopRecording(ctx, req.(*CGameRecording_StopRecording_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetBackgroundRecordingFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetRecordingSize_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetBackgroundRecordingFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetBackgroundRecordingFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetBackgroundRecordingFileSize(ctx, req.(*CGameRecording_GetRecordingSize_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_CleanupBackgroundRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_CleanupBackgroundRecordings_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).CleanupBackgroundRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/CleanupBackgroundRecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).CleanupBackgroundRecordings(ctx, req.(*CGameRecording_CleanupBackgroundRecordings_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetAndTrimPostGameHighlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetAndTrimPostGameHighlights_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetAndTrimPostGameHighlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetAndTrimPostGameHighlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetAndTrimPostGameHighlights(ctx, req.(*CGameRecording_GetAndTrimPostGameHighlights_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetThumbnails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetThumbnails_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetThumbnails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetThumbnails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetThumbnails(ctx, req.(*CGameRecording_GetThumbnails_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetPlatformCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetPlatformCapabilities_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetPlatformCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetPlatformCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetPlatformCapabilities(ctx, req.(*CGameRecording_GetPlatformCapabilities_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyTimelineChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_TimelineChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyTimelineChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyTimelineChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyTimelineChanged(ctx, req.(*CGameRecording_TimelineChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyRecordingSessionChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_RecordingSessionChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyRecordingSessionChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyRecordingSessionChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyRecordingSessionChanged(ctx, req.(*CGameRecording_RecordingSessionChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyTimelineEntryChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_TimelineEntryChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyTimelineEntryChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyTimelineEntryChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyTimelineEntryChanged(ctx, req.(*CGameRecording_TimelineEntryChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyClipCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ClipCreated_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyClipCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyClipCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyClipCreated(ctx, req.(*CGameRecording_ClipCreated_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyClipDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ClipDeleted_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyClipDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyClipDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyClipDeleted(ctx, req.(*CGameRecording_ClipDeleted_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyExportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ExportProgress_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyExportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyExportProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyExportProgress(ctx, req.(*CGameRecording_ExportProgress_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyUploadProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_UploadProgress_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyUploadProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyUploadProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyUploadProgress(ctx, req.(*CGameRecording_UploadProgress_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyLowDiskSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_LowDiskSpace_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyLowDiskSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyLowDiskSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyLowDiskSpace(ctx, req.(*CGameRecording_LowDiskSpace_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_NotifyPostGameHighlightsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_PostGameHighlightsChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).NotifyPostGameHighlightsChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/NotifyPostGameHighlightsChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).NotifyPostGameHighlightsChanged(ctx, req.(*CGameRecording_PostGameHighlightsChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_UserAddTimelineEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_UserAddTimelineEntry_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).UserAddTimelineEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/UserAddTimelineEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).UserAddTimelineEntry(ctx, req.(*CGameRecording_UserAddTimelineEntry_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_UserUpdateTimelineEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_UserUpdateTimelineEntry_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).UserUpdateTimelineEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/UserUpdateTimelineEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).UserUpdateTimelineEntry(ctx, req.(*CGameRecording_UserUpdateTimelineEntry_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_UserRemoveTimelineEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_UserRemoveTimelineEntry_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).UserRemoveTimelineEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/UserRemoveTimelineEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).UserRemoveTimelineEntry(ctx, req.(*CGameRecording_UserRemoveTimelineEntry_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_ManuallyDeleteRecordingsForApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_ManuallyDeleteRecordingsForApps_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).ManuallyDeleteRecordingsForApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/ManuallyDeleteRecordingsForApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).ManuallyDeleteRecordingsForApps(ctx, req.(*CGameRecording_ManuallyDeleteRecordingsForApps_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_GetTotalDiskSpaceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_GetTotalDiskSpaceUsage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).GetTotalDiskSpaceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/GetTotalDiskSpaceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).GetTotalDiskSpaceUsage(ctx, req.(*CGameRecording_GetTotalDiskSpaceUsage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecording_SwitchBackgroundRecordingGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecording_SwitchBackgroundRecordingGame_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingServer).SwitchBackgroundRecordingGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecording/SwitchBackgroundRecordingGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingServer).SwitchBackgroundRecordingGame(ctx, req.(*CGameRecording_SwitchBackgroundRecordingGame_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameRecording_ServiceDesc is the grpc.ServiceDesc for GameRecording service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameRecording_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameRecording",
	HandlerType: (*GameRecordingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveTimelineApps",
			Handler:    _GameRecording_GetActiveTimelineApps_Handler,
		},
		{
			MethodName: "GetTimelinesForApp",
			Handler:    _GameRecording_GetTimelinesForApp_Handler,
		},
		{
			MethodName: "GetTimelinesForClip",
			Handler:    _GameRecording_GetTimelinesForClip_Handler,
		},
		{
			MethodName: "GetEnoughDiskSpace",
			Handler:    _GameRecording_GetEnoughDiskSpace_Handler,
		},
		{
			MethodName: "GetAvailableDiskSpace",
			Handler:    _GameRecording_GetAvailableDiskSpace_Handler,
		},
		{
			MethodName: "SaveClip",
			Handler:    _GameRecording_SaveClip_Handler,
		},
		{
			MethodName: "DeleteClip",
			Handler:    _GameRecording_DeleteClip_Handler,
		},
		{
			MethodName: "GetClips",
			Handler:    _GameRecording_GetClips_Handler,
		},
		{
			MethodName: "UploadClipToSteam",
			Handler:    _GameRecording_UploadClipToSteam_Handler,
		},
		{
			MethodName: "ExportClip",
			Handler:    _GameRecording_ExportClip_Handler,
		},
		{
			MethodName: "ZipClip",
			Handler:    _GameRecording_ZipClip_Handler,
		},
		{
			MethodName: "StartRecording",
			Handler:    _GameRecording_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _GameRecording_StopRecording_Handler,
		},
		{
			MethodName: "GetBackgroundRecordingFileSize",
			Handler:    _GameRecording_GetBackgroundRecordingFileSize_Handler,
		},
		{
			MethodName: "CleanupBackgroundRecordings",
			Handler:    _GameRecording_CleanupBackgroundRecordings_Handler,
		},
		{
			MethodName: "GetAndTrimPostGameHighlights",
			Handler:    _GameRecording_GetAndTrimPostGameHighlights_Handler,
		},
		{
			MethodName: "GetThumbnails",
			Handler:    _GameRecording_GetThumbnails_Handler,
		},
		{
			MethodName: "GetPlatformCapabilities",
			Handler:    _GameRecording_GetPlatformCapabilities_Handler,
		},
		{
			MethodName: "NotifyTimelineChanged",
			Handler:    _GameRecording_NotifyTimelineChanged_Handler,
		},
		{
			MethodName: "NotifyRecordingSessionChanged",
			Handler:    _GameRecording_NotifyRecordingSessionChanged_Handler,
		},
		{
			MethodName: "NotifyTimelineEntryChanged",
			Handler:    _GameRecording_NotifyTimelineEntryChanged_Handler,
		},
		{
			MethodName: "NotifyClipCreated",
			Handler:    _GameRecording_NotifyClipCreated_Handler,
		},
		{
			MethodName: "NotifyClipDeleted",
			Handler:    _GameRecording_NotifyClipDeleted_Handler,
		},
		{
			MethodName: "NotifyExportProgress",
			Handler:    _GameRecording_NotifyExportProgress_Handler,
		},
		{
			MethodName: "NotifyUploadProgress",
			Handler:    _GameRecording_NotifyUploadProgress_Handler,
		},
		{
			MethodName: "NotifyLowDiskSpace",
			Handler:    _GameRecording_NotifyLowDiskSpace_Handler,
		},
		{
			MethodName: "NotifyPostGameHighlightsChanged",
			Handler:    _GameRecording_NotifyPostGameHighlightsChanged_Handler,
		},
		{
			MethodName: "UserAddTimelineEntry",
			Handler:    _GameRecording_UserAddTimelineEntry_Handler,
		},
		{
			MethodName: "UserUpdateTimelineEntry",
			Handler:    _GameRecording_UserUpdateTimelineEntry_Handler,
		},
		{
			MethodName: "UserRemoveTimelineEntry",
			Handler:    _GameRecording_UserRemoveTimelineEntry_Handler,
		},
		{
			MethodName: "ManuallyDeleteRecordingsForApps",
			Handler:    _GameRecording_ManuallyDeleteRecordingsForApps_Handler,
		},
		{
			MethodName: "GetTotalDiskSpaceUsage",
			Handler:    _GameRecording_GetTotalDiskSpaceUsage_Handler,
		},
		{
			MethodName: "SwitchBackgroundRecordingGame",
			Handler:    _GameRecording_SwitchBackgroundRecordingGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_gamerecording.proto",
}

// GameRecordingDebugClient is the client API for GameRecordingDebug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameRecordingDebugClient interface {
	AddTimelineHighlightMarker(ctx context.Context, in *CGameRecordingDebug_AddTimelineHighlightMarker_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineHighlightMarker_Response, error)
	AddTimelineTimestamp(ctx context.Context, in *CGameRecordingDebug_AddTimelineTimestamp_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineTimestamp_Response, error)
	AddTimelineRangeStart(ctx context.Context, in *CGameRecordingDebug_AddTimelineRangeStart_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineRangeStart_Response, error)
	AddTimelineRangeEnd(ctx context.Context, in *CGameRecordingDebug_AddTimelineRangeEnd_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineRangeEnd_Response, error)
	SetTimelineGameMode(ctx context.Context, in *CGameRecordingDebug_SetTimelineGameMode_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_SetTimelineGameMode_Response, error)
}

type gameRecordingDebugClient struct {
	cc grpc.ClientConnInterface
}

func NewGameRecordingDebugClient(cc grpc.ClientConnInterface) GameRecordingDebugClient {
	return &gameRecordingDebugClient{cc}
}

func (c *gameRecordingDebugClient) AddTimelineHighlightMarker(ctx context.Context, in *CGameRecordingDebug_AddTimelineHighlightMarker_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineHighlightMarker_Response, error) {
	out := new(CGameRecordingDebug_AddTimelineHighlightMarker_Response)
	err := c.cc.Invoke(ctx, "/GameRecordingDebug/AddTimelineHighlightMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingDebugClient) AddTimelineTimestamp(ctx context.Context, in *CGameRecordingDebug_AddTimelineTimestamp_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineTimestamp_Response, error) {
	out := new(CGameRecordingDebug_AddTimelineTimestamp_Response)
	err := c.cc.Invoke(ctx, "/GameRecordingDebug/AddTimelineTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingDebugClient) AddTimelineRangeStart(ctx context.Context, in *CGameRecordingDebug_AddTimelineRangeStart_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineRangeStart_Response, error) {
	out := new(CGameRecordingDebug_AddTimelineRangeStart_Response)
	err := c.cc.Invoke(ctx, "/GameRecordingDebug/AddTimelineRangeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingDebugClient) AddTimelineRangeEnd(ctx context.Context, in *CGameRecordingDebug_AddTimelineRangeEnd_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_AddTimelineRangeEnd_Response, error) {
	out := new(CGameRecordingDebug_AddTimelineRangeEnd_Response)
	err := c.cc.Invoke(ctx, "/GameRecordingDebug/AddTimelineRangeEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRecordingDebugClient) SetTimelineGameMode(ctx context.Context, in *CGameRecordingDebug_SetTimelineGameMode_Request, opts ...grpc.CallOption) (*CGameRecordingDebug_SetTimelineGameMode_Response, error) {
	out := new(CGameRecordingDebug_SetTimelineGameMode_Response)
	err := c.cc.Invoke(ctx, "/GameRecordingDebug/SetTimelineGameMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRecordingDebugServer is the server API for GameRecordingDebug service.
// All implementations must embed UnimplementedGameRecordingDebugServer
// for forward compatibility
type GameRecordingDebugServer interface {
	AddTimelineHighlightMarker(context.Context, *CGameRecordingDebug_AddTimelineHighlightMarker_Request) (*CGameRecordingDebug_AddTimelineHighlightMarker_Response, error)
	AddTimelineTimestamp(context.Context, *CGameRecordingDebug_AddTimelineTimestamp_Request) (*CGameRecordingDebug_AddTimelineTimestamp_Response, error)
	AddTimelineRangeStart(context.Context, *CGameRecordingDebug_AddTimelineRangeStart_Request) (*CGameRecordingDebug_AddTimelineRangeStart_Response, error)
	AddTimelineRangeEnd(context.Context, *CGameRecordingDebug_AddTimelineRangeEnd_Request) (*CGameRecordingDebug_AddTimelineRangeEnd_Response, error)
	SetTimelineGameMode(context.Context, *CGameRecordingDebug_SetTimelineGameMode_Request) (*CGameRecordingDebug_SetTimelineGameMode_Response, error)
	mustEmbedUnimplementedGameRecordingDebugServer()
}

// UnimplementedGameRecordingDebugServer must be embedded to have forward compatible implementations.
type UnimplementedGameRecordingDebugServer struct {
}

func (UnimplementedGameRecordingDebugServer) AddTimelineHighlightMarker(context.Context, *CGameRecordingDebug_AddTimelineHighlightMarker_Request) (*CGameRecordingDebug_AddTimelineHighlightMarker_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimelineHighlightMarker not implemented")
}
func (UnimplementedGameRecordingDebugServer) AddTimelineTimestamp(context.Context, *CGameRecordingDebug_AddTimelineTimestamp_Request) (*CGameRecordingDebug_AddTimelineTimestamp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimelineTimestamp not implemented")
}
func (UnimplementedGameRecordingDebugServer) AddTimelineRangeStart(context.Context, *CGameRecordingDebug_AddTimelineRangeStart_Request) (*CGameRecordingDebug_AddTimelineRangeStart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimelineRangeStart not implemented")
}
func (UnimplementedGameRecordingDebugServer) AddTimelineRangeEnd(context.Context, *CGameRecordingDebug_AddTimelineRangeEnd_Request) (*CGameRecordingDebug_AddTimelineRangeEnd_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimelineRangeEnd not implemented")
}
func (UnimplementedGameRecordingDebugServer) SetTimelineGameMode(context.Context, *CGameRecordingDebug_SetTimelineGameMode_Request) (*CGameRecordingDebug_SetTimelineGameMode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimelineGameMode not implemented")
}
func (UnimplementedGameRecordingDebugServer) mustEmbedUnimplementedGameRecordingDebugServer() {}

// UnsafeGameRecordingDebugServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameRecordingDebugServer will
// result in compilation errors.
type UnsafeGameRecordingDebugServer interface {
	mustEmbedUnimplementedGameRecordingDebugServer()
}

func RegisterGameRecordingDebugServer(s grpc.ServiceRegistrar, srv GameRecordingDebugServer) {
	s.RegisterService(&GameRecordingDebug_ServiceDesc, srv)
}

func _GameRecordingDebug_AddTimelineHighlightMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecordingDebug_AddTimelineHighlightMarker_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingDebugServer).AddTimelineHighlightMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecordingDebug/AddTimelineHighlightMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingDebugServer).AddTimelineHighlightMarker(ctx, req.(*CGameRecordingDebug_AddTimelineHighlightMarker_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecordingDebug_AddTimelineTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecordingDebug_AddTimelineTimestamp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingDebugServer).AddTimelineTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecordingDebug/AddTimelineTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingDebugServer).AddTimelineTimestamp(ctx, req.(*CGameRecordingDebug_AddTimelineTimestamp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecordingDebug_AddTimelineRangeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecordingDebug_AddTimelineRangeStart_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingDebugServer).AddTimelineRangeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecordingDebug/AddTimelineRangeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingDebugServer).AddTimelineRangeStart(ctx, req.(*CGameRecordingDebug_AddTimelineRangeStart_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecordingDebug_AddTimelineRangeEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecordingDebug_AddTimelineRangeEnd_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingDebugServer).AddTimelineRangeEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecordingDebug/AddTimelineRangeEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingDebugServer).AddTimelineRangeEnd(ctx, req.(*CGameRecordingDebug_AddTimelineRangeEnd_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRecordingDebug_SetTimelineGameMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGameRecordingDebug_SetTimelineGameMode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRecordingDebugServer).SetTimelineGameMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameRecordingDebug/SetTimelineGameMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRecordingDebugServer).SetTimelineGameMode(ctx, req.(*CGameRecordingDebug_SetTimelineGameMode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameRecordingDebug_ServiceDesc is the grpc.ServiceDesc for GameRecordingDebug service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameRecordingDebug_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameRecordingDebug",
	HandlerType: (*GameRecordingDebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTimelineHighlightMarker",
			Handler:    _GameRecordingDebug_AddTimelineHighlightMarker_Handler,
		},
		{
			MethodName: "AddTimelineTimestamp",
			Handler:    _GameRecordingDebug_AddTimelineTimestamp_Handler,
		},
		{
			MethodName: "AddTimelineRangeStart",
			Handler:    _GameRecordingDebug_AddTimelineRangeStart_Handler,
		},
		{
			MethodName: "AddTimelineRangeEnd",
			Handler:    _GameRecordingDebug_AddTimelineRangeEnd_Handler,
		},
		{
			MethodName: "SetTimelineGameMode",
			Handler:    _GameRecordingDebug_SetTimelineGameMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_gamerecording.proto",
}
