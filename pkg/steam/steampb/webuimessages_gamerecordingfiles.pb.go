// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: webuimessages_gamerecordingfiles.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameRecordingFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timelines      []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
	PostgameEvents []*CGameRecordingPostGameSummary  `protobuf:"bytes,2,rep,name=postgame_events,json=postgameEvents" json:"postgame_events,omitempty"`
	TemporaryClips []string                          `protobuf:"bytes,3,rep,name=temporary_clips,json=temporaryClips" json:"temporary_clips,omitempty"`
}

func (x *CGameRecordingFile) Reset() {
	*x = CGameRecordingFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingFile) ProtoMessage() {}

func (x *CGameRecordingFile) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingFile.ProtoReflect.Descriptor instead.
func (*CGameRecordingFile) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{0}
}

func (x *CGameRecordingFile) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecordingFile) GetPostgameEvents() []*CGameRecordingPostGameSummary {
	if x != nil {
		return x.PostgameEvents
	}
	return nil
}

func (x *CGameRecordingFile) GetTemporaryClips() []string {
	if x != nil {
		return x.TemporaryClips
	}
	return nil
}

type CGameRecordingClipFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timelines                  []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
	FirstTimelineStartOffsetMs *uint64                           `protobuf:"varint,2,opt,name=first_timeline_start_offset_ms,json=firstTimelineStartOffsetMs" json:"first_timeline_start_offset_ms,omitempty"`
	DateRecorded               *uint32                           `protobuf:"varint,3,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	GameId                     *uint64                           `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	PublishedFileId            *uint64                           `protobuf:"fixed64,5,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	SizeInBytes                *uint64                           `protobuf:"varint,6,opt,name=size_in_bytes,json=sizeInBytes" json:"size_in_bytes,omitempty"`
	Name                       *string                           `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Temporary                  *bool                             `protobuf:"varint,8,opt,name=temporary" json:"temporary,omitempty"`
	OriginalDevice             *string                           `protobuf:"bytes,9,opt,name=original_device,json=originalDevice" json:"original_device,omitempty"`
	OriginalGamingDeviceType   *uint32                           `protobuf:"varint,10,opt,name=original_gaming_device_type,json=originalGamingDeviceType" json:"original_gaming_device_type,omitempty"`
	DateDownloaded             *uint32                           `protobuf:"varint,11,opt,name=date_downloaded,json=dateDownloaded" json:"date_downloaded,omitempty"`
	ThumbnailWidth             *uint32                           `protobuf:"varint,12,opt,name=thumbnail_width,json=thumbnailWidth" json:"thumbnail_width,omitempty"`
	ThumbnailHeight            *uint32                           `protobuf:"varint,13,opt,name=thumbnail_height,json=thumbnailHeight" json:"thumbnail_height,omitempty"`
}

func (x *CGameRecordingClipFile) Reset() {
	*x = CGameRecordingClipFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingClipFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingClipFile) ProtoMessage() {}

func (x *CGameRecordingClipFile) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingClipFile.ProtoReflect.Descriptor instead.
func (*CGameRecordingClipFile) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{1}
}

func (x *CGameRecordingClipFile) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecordingClipFile) GetFirstTimelineStartOffsetMs() uint64 {
	if x != nil && x.FirstTimelineStartOffsetMs != nil {
		return *x.FirstTimelineStartOffsetMs
	}
	return 0
}

func (x *CGameRecordingClipFile) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingClipFile) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingClipFile) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CGameRecordingClipFile) GetSizeInBytes() uint64 {
	if x != nil && x.SizeInBytes != nil {
		return *x.SizeInBytes
	}
	return 0
}

func (x *CGameRecordingClipFile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecordingClipFile) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *CGameRecordingClipFile) GetOriginalDevice() string {
	if x != nil && x.OriginalDevice != nil {
		return *x.OriginalDevice
	}
	return ""
}

func (x *CGameRecordingClipFile) GetOriginalGamingDeviceType() uint32 {
	if x != nil && x.OriginalGamingDeviceType != nil {
		return *x.OriginalGamingDeviceType
	}
	return 0
}

func (x *CGameRecordingClipFile) GetDateDownloaded() uint32 {
	if x != nil && x.DateDownloaded != nil {
		return *x.DateDownloaded
	}
	return 0
}

func (x *CGameRecordingClipFile) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *CGameRecordingClipFile) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

type CGameRecordingTimelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimelineId   *string                                     `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId       *uint64                                     `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DateRecorded *uint32                                     `protobuf:"varint,3,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	DurationMs   *uint64                                     `protobuf:"varint,4,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Recordings   []*CGameRecordingTimelineMetadata_Recording `protobuf:"bytes,5,rep,name=recordings" json:"recordings,omitempty"`
}

func (x *CGameRecordingTimelineMetadata) Reset() {
	*x = CGameRecordingTimelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingTimelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{2}
}

func (x *CGameRecordingTimelineMetadata) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetRecordings() []*CGameRecordingTimelineMetadata_Recording {
	if x != nil {
		return x.Recordings
	}
	return nil
}

type CGameRecordingPostGameSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64                        `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Events []*CGameRecordingTimelineEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (x *CGameRecordingPostGameSummary) Reset() {
	*x = CGameRecordingPostGameSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingPostGameSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPostGameSummary) ProtoMessage() {}

func (x *CGameRecordingPostGameSummary) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPostGameSummary.ProtoReflect.Descriptor instead.
func (*CGameRecordingPostGameSummary) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{3}
}

func (x *CGameRecordingPostGameSummary) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingPostGameSummary) GetEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CGameRecordingTimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId           *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	RtCreated        *uint32 `protobuf:"varint,2,opt,name=rt_created,json=rtCreated" json:"rt_created,omitempty"`
	PossibleClip     *int32  `protobuf:"varint,3,opt,name=possible_clip,json=possibleClip" json:"possible_clip,omitempty"`
	TimelineId       *string `protobuf:"bytes,4,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId          *uint64 `protobuf:"varint,5,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	TimelineOffsetMs *uint64 `protobuf:"varint,6,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
	DurationMs       *uint64 `protobuf:"varint,7,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	MarkerIcon       *string `protobuf:"bytes,8,opt,name=marker_icon,json=markerIcon" json:"marker_icon,omitempty"`
	MarkerTitle      *string `protobuf:"bytes,9,opt,name=marker_title,json=markerTitle" json:"marker_title,omitempty"`
	UserMarker       *bool   `protobuf:"varint,10,opt,name=user_marker,json=userMarker" json:"user_marker,omitempty"`
}

func (x *CGameRecordingTimelineEvent) Reset() {
	*x = CGameRecordingTimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineEvent) ProtoMessage() {}

func (x *CGameRecordingTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineEvent.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineEvent) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{4}
}

func (x *CGameRecordingTimelineEvent) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetRtCreated() uint32 {
	if x != nil && x.RtCreated != nil {
		return *x.RtCreated
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetPossibleClip() int32 {
	if x != nil && x.PossibleClip != nil {
		return *x.PossibleClip
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetMarkerIcon() string {
	if x != nil && x.MarkerIcon != nil {
		return *x.MarkerIcon
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetMarkerTitle() string {
	if x != nil && x.MarkerTitle != nil {
		return *x.MarkerTitle
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetUserMarker() bool {
	if x != nil && x.UserMarker != nil {
		return *x.UserMarker
	}
	return false
}

type CGameRecordingTimelineMetadata_Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId                   *string             `protobuf:"bytes,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	StartOffsetMs                 *uint64             `protobuf:"varint,2,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
	DurationMs                    *uint64             `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	RecordingType                 *EGameRecordingType `protobuf:"varint,4,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
	DeleteOnCleanup               *bool               `protobuf:"varint,5,opt,name=delete_on_cleanup,json=deleteOnCleanup" json:"delete_on_cleanup,omitempty"`
	VideoManagerClipId            *uint64             `protobuf:"varint,6,opt,name=video_manager_clip_id,json=videoManagerClipId" json:"video_manager_clip_id,omitempty"`
	VideoManagerVideoId           *uint64             `protobuf:"varint,7,opt,name=video_manager_video_id,json=videoManagerVideoId" json:"video_manager_video_id,omitempty"`
	CdnManifestUrl                *string             `protobuf:"bytes,8,opt,name=cdn_manifest_url,json=cdnManifestUrl" json:"cdn_manifest_url,omitempty"`
	FileSize                      *uint64             `protobuf:"varint,9,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RecordingZeroTimelineOffsetMs *uint64             `protobuf:"varint,10,opt,name=recording_zero_timeline_offset_ms,json=recordingZeroTimelineOffsetMs" json:"recording_zero_timeline_offset_ms,omitempty"`
}

// Default values for CGameRecordingTimelineMetadata_Recording fields.
const (
	Default_CGameRecordingTimelineMetadata_Recording_RecordingType = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CGameRecordingTimelineMetadata_Recording) Reset() {
	*x = CGameRecordingTimelineMetadata_Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingTimelineMetadata_Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata_Recording) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata_Recording) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata_Recording.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata_Recording) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingId() string {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetStartOffsetMs() uint64 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CGameRecordingTimelineMetadata_Recording_RecordingType
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDeleteOnCleanup() bool {
	if x != nil && x.DeleteOnCleanup != nil {
		return *x.DeleteOnCleanup
	}
	return false
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerClipId() uint64 {
	if x != nil && x.VideoManagerClipId != nil {
		return *x.VideoManagerClipId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerVideoId() uint64 {
	if x != nil && x.VideoManagerVideoId != nil {
		return *x.VideoManagerVideoId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetCdnManifestUrl() string {
	if x != nil && x.CdnManifestUrl != nil {
		return *x.CdnManifestUrl
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingZeroTimelineOffsetMs() uint64 {
	if x != nil && x.RecordingZeroTimelineOffsetMs != nil {
		return *x.RecordingZeroTimelineOffsetMs
	}
	return 0
}

var File_webuimessages_gamerecordingfiles_proto protoreflect.FileDescriptor

var file_webuimessages_gamerecordingfiles_proto_rawDesc = []byte{
	0x0a, 0x26, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x70,
	0x73, 0x22, 0xc0, 0x04, 0x0a, 0x16, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xe4, 0x05, 0x0a, 0x1e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0xf6, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x58, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x64,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x64, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22, 0x6e, 0x0a, 0x1d, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x1b,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6c, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x35, 0x48, 0x01, 0x5a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x63, 0x69, 0x6e, 0x6f, 0x37,
	0x37, 0x32, 0x2f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x80, 0x01, 0x01,
}

var (
	file_webuimessages_gamerecordingfiles_proto_rawDescOnce sync.Once
	file_webuimessages_gamerecordingfiles_proto_rawDescData = file_webuimessages_gamerecordingfiles_proto_rawDesc
)

func file_webuimessages_gamerecordingfiles_proto_rawDescGZIP() []byte {
	file_webuimessages_gamerecordingfiles_proto_rawDescOnce.Do(func() {
		file_webuimessages_gamerecordingfiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_webuimessages_gamerecordingfiles_proto_rawDescData)
	})
	return file_webuimessages_gamerecordingfiles_proto_rawDescData
}

var file_webuimessages_gamerecordingfiles_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_webuimessages_gamerecordingfiles_proto_goTypes = []interface{}{
	(*CGameRecordingFile)(nil),                       // 0: CGameRecordingFile
	(*CGameRecordingClipFile)(nil),                   // 1: CGameRecordingClipFile
	(*CGameRecordingTimelineMetadata)(nil),           // 2: CGameRecordingTimelineMetadata
	(*CGameRecordingPostGameSummary)(nil),            // 3: CGameRecordingPostGameSummary
	(*CGameRecordingTimelineEvent)(nil),              // 4: CGameRecordingTimelineEvent
	(*CGameRecordingTimelineMetadata_Recording)(nil), // 5: CGameRecordingTimelineMetadata.Recording
	(EGameRecordingType)(0),                          // 6: EGameRecordingType
}
var file_webuimessages_gamerecordingfiles_proto_depIdxs = []int32{
	2, // 0: CGameRecordingFile.timelines:type_name -> CGameRecordingTimelineMetadata
	3, // 1: CGameRecordingFile.postgame_events:type_name -> CGameRecordingPostGameSummary
	2, // 2: CGameRecordingClipFile.timelines:type_name -> CGameRecordingTimelineMetadata
	5, // 3: CGameRecordingTimelineMetadata.recordings:type_name -> CGameRecordingTimelineMetadata.Recording
	4, // 4: CGameRecordingPostGameSummary.events:type_name -> CGameRecordingTimelineEvent
	6, // 5: CGameRecordingTimelineMetadata.Recording.recording_type:type_name -> EGameRecordingType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_webuimessages_gamerecordingfiles_proto_init() }
func file_webuimessages_gamerecordingfiles_proto_init() {
	if File_webuimessages_gamerecordingfiles_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_base_proto_init()
	file_webuimessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_webuimessages_gamerecordingfiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecordingfiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingClipFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecordingfiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingTimelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecordingfiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingPostGameSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecordingfiles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingTimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecordingfiles_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameRecordingTimelineMetadata_Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webuimessages_gamerecordingfiles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webuimessages_gamerecordingfiles_proto_goTypes,
		DependencyIndexes: file_webuimessages_gamerecordingfiles_proto_depIdxs,
		MessageInfos:      file_webuimessages_gamerecordingfiles_proto_msgTypes,
	}.Build()
	File_webuimessages_gamerecordingfiles_proto = out.File
	file_webuimessages_gamerecordingfiles_proto_rawDesc = nil
	file_webuimessages_gamerecordingfiles_proto_goTypes = nil
	file_webuimessages_gamerecordingfiles_proto_depIdxs = nil
}
