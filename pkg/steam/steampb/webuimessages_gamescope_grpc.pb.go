// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_gamescope.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamescopeClient is the client API for Gamescope service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamescopeClient interface {
	GetState(ctx context.Context, in *CGamescope_GetState_Request, opts ...grpc.CallOption) (*CGamescope_GetState_Response, error)
	NotifyStateChanged(ctx context.Context, in *CGamescope_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	SetBlurParams(ctx context.Context, in *CGamescope_SetBlurParams_Request, opts ...grpc.CallOption) (*CGamescope_SetBlurParams_Response, error)
}

type gamescopeClient struct {
	cc grpc.ClientConnInterface
}

func NewGamescopeClient(cc grpc.ClientConnInterface) GamescopeClient {
	return &gamescopeClient{cc}
}

func (c *gamescopeClient) GetState(ctx context.Context, in *CGamescope_GetState_Request, opts ...grpc.CallOption) (*CGamescope_GetState_Response, error) {
	out := new(CGamescope_GetState_Response)
	err := c.cc.Invoke(ctx, "/Gamescope/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamescopeClient) NotifyStateChanged(ctx context.Context, in *CGamescope_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/Gamescope/NotifyStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamescopeClient) SetBlurParams(ctx context.Context, in *CGamescope_SetBlurParams_Request, opts ...grpc.CallOption) (*CGamescope_SetBlurParams_Response, error) {
	out := new(CGamescope_SetBlurParams_Response)
	err := c.cc.Invoke(ctx, "/Gamescope/SetBlurParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamescopeServer is the server API for Gamescope service.
// All implementations must embed UnimplementedGamescopeServer
// for forward compatibility
type GamescopeServer interface {
	GetState(context.Context, *CGamescope_GetState_Request) (*CGamescope_GetState_Response, error)
	NotifyStateChanged(context.Context, *CGamescope_StateChanged_Notification) (*WebUINoResponse, error)
	SetBlurParams(context.Context, *CGamescope_SetBlurParams_Request) (*CGamescope_SetBlurParams_Response, error)
	mustEmbedUnimplementedGamescopeServer()
}

// UnimplementedGamescopeServer must be embedded to have forward compatible implementations.
type UnimplementedGamescopeServer struct {
}

func (UnimplementedGamescopeServer) GetState(context.Context, *CGamescope_GetState_Request) (*CGamescope_GetState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedGamescopeServer) NotifyStateChanged(context.Context, *CGamescope_StateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStateChanged not implemented")
}
func (UnimplementedGamescopeServer) SetBlurParams(context.Context, *CGamescope_SetBlurParams_Request) (*CGamescope_SetBlurParams_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlurParams not implemented")
}
func (UnimplementedGamescopeServer) mustEmbedUnimplementedGamescopeServer() {}

// UnsafeGamescopeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamescopeServer will
// result in compilation errors.
type UnsafeGamescopeServer interface {
	mustEmbedUnimplementedGamescopeServer()
}

func RegisterGamescopeServer(s grpc.ServiceRegistrar, srv GamescopeServer) {
	s.RegisterService(&Gamescope_ServiceDesc, srv)
}

func _Gamescope_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGamescope_GetState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamescopeServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gamescope/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamescopeServer).GetState(ctx, req.(*CGamescope_GetState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gamescope_NotifyStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGamescope_StateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamescopeServer).NotifyStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gamescope/NotifyStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamescopeServer).NotifyStateChanged(ctx, req.(*CGamescope_StateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gamescope_SetBlurParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGamescope_SetBlurParams_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamescopeServer).SetBlurParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gamescope/SetBlurParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamescopeServer).SetBlurParams(ctx, req.(*CGamescope_SetBlurParams_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Gamescope_ServiceDesc is the grpc.ServiceDesc for Gamescope service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gamescope_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gamescope",
	HandlerType: (*GamescopeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Gamescope_GetState_Handler,
		},
		{
			MethodName: "NotifyStateChanged",
			Handler:    _Gamescope_NotifyStateChanged_Handler,
		},
		{
			MethodName: "SetBlurParams",
			Handler:    _Gamescope_SetBlurParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_gamescope.proto",
}
