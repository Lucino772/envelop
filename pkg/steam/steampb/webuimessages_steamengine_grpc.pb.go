// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_steamengine.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SteamEngineClient is the client API for SteamEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteamEngineClient interface {
	UpdateTextFilterDictionary(ctx context.Context, in *CSteamEngine_UpdateTextFilterDictionary_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	GetTextFilterDictionary(ctx context.Context, in *CSteamEngine_GetTextFilterDictionary_Request, opts ...grpc.CallOption) (*CSteamEngine_GetTextFilterDictionary_Response, error)
	NotifyTextFilterDictionaryChanged(ctx context.Context, in *CSteamEngine_TextFilterDictionaryChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	GetGameIDForPID(ctx context.Context, in *CSteamEngine_GetGameIDForPID_Request, opts ...grpc.CallOption) (*CSteamEngine_GetGameIDForPID_Response, error)
}

type steamEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamEngineClient(cc grpc.ClientConnInterface) SteamEngineClient {
	return &steamEngineClient{cc}
}

func (c *steamEngineClient) UpdateTextFilterDictionary(ctx context.Context, in *CSteamEngine_UpdateTextFilterDictionary_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamEngine/UpdateTextFilterDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamEngineClient) GetTextFilterDictionary(ctx context.Context, in *CSteamEngine_GetTextFilterDictionary_Request, opts ...grpc.CallOption) (*CSteamEngine_GetTextFilterDictionary_Response, error) {
	out := new(CSteamEngine_GetTextFilterDictionary_Response)
	err := c.cc.Invoke(ctx, "/SteamEngine/GetTextFilterDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamEngineClient) NotifyTextFilterDictionaryChanged(ctx context.Context, in *CSteamEngine_TextFilterDictionaryChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamEngine/NotifyTextFilterDictionaryChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamEngineClient) GetGameIDForPID(ctx context.Context, in *CSteamEngine_GetGameIDForPID_Request, opts ...grpc.CallOption) (*CSteamEngine_GetGameIDForPID_Response, error) {
	out := new(CSteamEngine_GetGameIDForPID_Response)
	err := c.cc.Invoke(ctx, "/SteamEngine/GetGameIDForPID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamEngineServer is the server API for SteamEngine service.
// All implementations must embed UnimplementedSteamEngineServer
// for forward compatibility
type SteamEngineServer interface {
	UpdateTextFilterDictionary(context.Context, *CSteamEngine_UpdateTextFilterDictionary_Notification) (*WebUINoResponse, error)
	GetTextFilterDictionary(context.Context, *CSteamEngine_GetTextFilterDictionary_Request) (*CSteamEngine_GetTextFilterDictionary_Response, error)
	NotifyTextFilterDictionaryChanged(context.Context, *CSteamEngine_TextFilterDictionaryChanged_Notification) (*WebUINoResponse, error)
	GetGameIDForPID(context.Context, *CSteamEngine_GetGameIDForPID_Request) (*CSteamEngine_GetGameIDForPID_Response, error)
	mustEmbedUnimplementedSteamEngineServer()
}

// UnimplementedSteamEngineServer must be embedded to have forward compatible implementations.
type UnimplementedSteamEngineServer struct {
}

func (UnimplementedSteamEngineServer) UpdateTextFilterDictionary(context.Context, *CSteamEngine_UpdateTextFilterDictionary_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextFilterDictionary not implemented")
}
func (UnimplementedSteamEngineServer) GetTextFilterDictionary(context.Context, *CSteamEngine_GetTextFilterDictionary_Request) (*CSteamEngine_GetTextFilterDictionary_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextFilterDictionary not implemented")
}
func (UnimplementedSteamEngineServer) NotifyTextFilterDictionaryChanged(context.Context, *CSteamEngine_TextFilterDictionaryChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTextFilterDictionaryChanged not implemented")
}
func (UnimplementedSteamEngineServer) GetGameIDForPID(context.Context, *CSteamEngine_GetGameIDForPID_Request) (*CSteamEngine_GetGameIDForPID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameIDForPID not implemented")
}
func (UnimplementedSteamEngineServer) mustEmbedUnimplementedSteamEngineServer() {}

// UnsafeSteamEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamEngineServer will
// result in compilation errors.
type UnsafeSteamEngineServer interface {
	mustEmbedUnimplementedSteamEngineServer()
}

func RegisterSteamEngineServer(s grpc.ServiceRegistrar, srv SteamEngineServer) {
	s.RegisterService(&SteamEngine_ServiceDesc, srv)
}

func _SteamEngine_UpdateTextFilterDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamEngine_UpdateTextFilterDictionary_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamEngineServer).UpdateTextFilterDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamEngine/UpdateTextFilterDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamEngineServer).UpdateTextFilterDictionary(ctx, req.(*CSteamEngine_UpdateTextFilterDictionary_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamEngine_GetTextFilterDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamEngine_GetTextFilterDictionary_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamEngineServer).GetTextFilterDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamEngine/GetTextFilterDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamEngineServer).GetTextFilterDictionary(ctx, req.(*CSteamEngine_GetTextFilterDictionary_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamEngine_NotifyTextFilterDictionaryChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamEngine_TextFilterDictionaryChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamEngineServer).NotifyTextFilterDictionaryChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamEngine/NotifyTextFilterDictionaryChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamEngineServer).NotifyTextFilterDictionaryChanged(ctx, req.(*CSteamEngine_TextFilterDictionaryChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamEngine_GetGameIDForPID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamEngine_GetGameIDForPID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamEngineServer).GetGameIDForPID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamEngine/GetGameIDForPID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamEngineServer).GetGameIDForPID(ctx, req.(*CSteamEngine_GetGameIDForPID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamEngine_ServiceDesc is the grpc.ServiceDesc for SteamEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SteamEngine",
	HandlerType: (*SteamEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTextFilterDictionary",
			Handler:    _SteamEngine_UpdateTextFilterDictionary_Handler,
		},
		{
			MethodName: "GetTextFilterDictionary",
			Handler:    _SteamEngine_GetTextFilterDictionary_Handler,
		},
		{
			MethodName: "NotifyTextFilterDictionaryChanged",
			Handler:    _SteamEngine_NotifyTextFilterDictionaryChanged_Handler,
		},
		{
			MethodName: "GetGameIDForPID",
			Handler:    _SteamEngine_GetGameIDForPID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_steamengine.proto",
}
