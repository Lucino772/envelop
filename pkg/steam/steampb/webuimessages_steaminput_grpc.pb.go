// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_steaminput.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SteamInputManagerClient is the client API for SteamInputManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteamInputManagerClient interface {
	NotifyButtonStateChanged(ctx context.Context, in *CSteamInputService_ControllerButtonStateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyAxesStateChanged(ctx context.Context, in *CSteamInputService_ControllerAxesStateChange_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyGyroQuaternionStateChanged(ctx context.Context, in *CSteamInputService_GyroQuaternionChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyGyroSpeedStateChanged(ctx context.Context, in *CSteamInputService_GyroSpeedChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyGyroAccelerometerStateChanged(ctx context.Context, in *CSteamInputService_GyroAccelerometerChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	NotifyGyroCalibrationStateChanged(ctx context.Context, in *CSteamInputService_GyroCalibration_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	StartControllerStateFlow(ctx context.Context, in *CSteamInputService_ControllerStateFlow_Request, opts ...grpc.CallOption) (*CSteamInputService_ControllerStateFlow_Response, error)
	EndControllerStateFlow(ctx context.Context, in *CSteamInputService_ControllerStateFlow_Request, opts ...grpc.CallOption) (*CSteamInputService_ControllerStateFlow_Response, error)
}

type steamInputManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamInputManagerClient(cc grpc.ClientConnInterface) SteamInputManagerClient {
	return &steamInputManagerClient{cc}
}

func (c *steamInputManagerClient) NotifyButtonStateChanged(ctx context.Context, in *CSteamInputService_ControllerButtonStateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyButtonStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) NotifyAxesStateChanged(ctx context.Context, in *CSteamInputService_ControllerAxesStateChange_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyAxesStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) NotifyGyroQuaternionStateChanged(ctx context.Context, in *CSteamInputService_GyroQuaternionChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyGyroQuaternionStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) NotifyGyroSpeedStateChanged(ctx context.Context, in *CSteamInputService_GyroSpeedChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyGyroSpeedStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) NotifyGyroAccelerometerStateChanged(ctx context.Context, in *CSteamInputService_GyroAccelerometerChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyGyroAccelerometerStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) NotifyGyroCalibrationStateChanged(ctx context.Context, in *CSteamInputService_GyroCalibration_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamInputManager/NotifyGyroCalibrationStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) StartControllerStateFlow(ctx context.Context, in *CSteamInputService_ControllerStateFlow_Request, opts ...grpc.CallOption) (*CSteamInputService_ControllerStateFlow_Response, error) {
	out := new(CSteamInputService_ControllerStateFlow_Response)
	err := c.cc.Invoke(ctx, "/SteamInputManager/StartControllerStateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamInputManagerClient) EndControllerStateFlow(ctx context.Context, in *CSteamInputService_ControllerStateFlow_Request, opts ...grpc.CallOption) (*CSteamInputService_ControllerStateFlow_Response, error) {
	out := new(CSteamInputService_ControllerStateFlow_Response)
	err := c.cc.Invoke(ctx, "/SteamInputManager/EndControllerStateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamInputManagerServer is the server API for SteamInputManager service.
// All implementations must embed UnimplementedSteamInputManagerServer
// for forward compatibility
type SteamInputManagerServer interface {
	NotifyButtonStateChanged(context.Context, *CSteamInputService_ControllerButtonStateChanged_Notification) (*WebUINoResponse, error)
	NotifyAxesStateChanged(context.Context, *CSteamInputService_ControllerAxesStateChange_Notification) (*WebUINoResponse, error)
	NotifyGyroQuaternionStateChanged(context.Context, *CSteamInputService_GyroQuaternionChanged_Notification) (*WebUINoResponse, error)
	NotifyGyroSpeedStateChanged(context.Context, *CSteamInputService_GyroSpeedChanged_Notification) (*WebUINoResponse, error)
	NotifyGyroAccelerometerStateChanged(context.Context, *CSteamInputService_GyroAccelerometerChanged_Notification) (*WebUINoResponse, error)
	NotifyGyroCalibrationStateChanged(context.Context, *CSteamInputService_GyroCalibration_Notification) (*WebUINoResponse, error)
	StartControllerStateFlow(context.Context, *CSteamInputService_ControllerStateFlow_Request) (*CSteamInputService_ControllerStateFlow_Response, error)
	EndControllerStateFlow(context.Context, *CSteamInputService_ControllerStateFlow_Request) (*CSteamInputService_ControllerStateFlow_Response, error)
	mustEmbedUnimplementedSteamInputManagerServer()
}

// UnimplementedSteamInputManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSteamInputManagerServer struct {
}

func (UnimplementedSteamInputManagerServer) NotifyButtonStateChanged(context.Context, *CSteamInputService_ControllerButtonStateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyButtonStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) NotifyAxesStateChanged(context.Context, *CSteamInputService_ControllerAxesStateChange_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAxesStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) NotifyGyroQuaternionStateChanged(context.Context, *CSteamInputService_GyroQuaternionChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyGyroQuaternionStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) NotifyGyroSpeedStateChanged(context.Context, *CSteamInputService_GyroSpeedChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyGyroSpeedStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) NotifyGyroAccelerometerStateChanged(context.Context, *CSteamInputService_GyroAccelerometerChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyGyroAccelerometerStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) NotifyGyroCalibrationStateChanged(context.Context, *CSteamInputService_GyroCalibration_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyGyroCalibrationStateChanged not implemented")
}
func (UnimplementedSteamInputManagerServer) StartControllerStateFlow(context.Context, *CSteamInputService_ControllerStateFlow_Request) (*CSteamInputService_ControllerStateFlow_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartControllerStateFlow not implemented")
}
func (UnimplementedSteamInputManagerServer) EndControllerStateFlow(context.Context, *CSteamInputService_ControllerStateFlow_Request) (*CSteamInputService_ControllerStateFlow_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndControllerStateFlow not implemented")
}
func (UnimplementedSteamInputManagerServer) mustEmbedUnimplementedSteamInputManagerServer() {}

// UnsafeSteamInputManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamInputManagerServer will
// result in compilation errors.
type UnsafeSteamInputManagerServer interface {
	mustEmbedUnimplementedSteamInputManagerServer()
}

func RegisterSteamInputManagerServer(s grpc.ServiceRegistrar, srv SteamInputManagerServer) {
	s.RegisterService(&SteamInputManager_ServiceDesc, srv)
}

func _SteamInputManager_NotifyButtonStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_ControllerButtonStateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyButtonStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyButtonStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyButtonStateChanged(ctx, req.(*CSteamInputService_ControllerButtonStateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_NotifyAxesStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_ControllerAxesStateChange_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyAxesStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyAxesStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyAxesStateChanged(ctx, req.(*CSteamInputService_ControllerAxesStateChange_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_NotifyGyroQuaternionStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_GyroQuaternionChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyGyroQuaternionStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyGyroQuaternionStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyGyroQuaternionStateChanged(ctx, req.(*CSteamInputService_GyroQuaternionChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_NotifyGyroSpeedStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_GyroSpeedChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyGyroSpeedStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyGyroSpeedStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyGyroSpeedStateChanged(ctx, req.(*CSteamInputService_GyroSpeedChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_NotifyGyroAccelerometerStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_GyroAccelerometerChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyGyroAccelerometerStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyGyroAccelerometerStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyGyroAccelerometerStateChanged(ctx, req.(*CSteamInputService_GyroAccelerometerChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_NotifyGyroCalibrationStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_GyroCalibration_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).NotifyGyroCalibrationStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/NotifyGyroCalibrationStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).NotifyGyroCalibrationStateChanged(ctx, req.(*CSteamInputService_GyroCalibration_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_StartControllerStateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_ControllerStateFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).StartControllerStateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/StartControllerStateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).StartControllerStateFlow(ctx, req.(*CSteamInputService_ControllerStateFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamInputManager_EndControllerStateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamInputService_ControllerStateFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamInputManagerServer).EndControllerStateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamInputManager/EndControllerStateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamInputManagerServer).EndControllerStateFlow(ctx, req.(*CSteamInputService_ControllerStateFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamInputManager_ServiceDesc is the grpc.ServiceDesc for SteamInputManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamInputManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SteamInputManager",
	HandlerType: (*SteamInputManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyButtonStateChanged",
			Handler:    _SteamInputManager_NotifyButtonStateChanged_Handler,
		},
		{
			MethodName: "NotifyAxesStateChanged",
			Handler:    _SteamInputManager_NotifyAxesStateChanged_Handler,
		},
		{
			MethodName: "NotifyGyroQuaternionStateChanged",
			Handler:    _SteamInputManager_NotifyGyroQuaternionStateChanged_Handler,
		},
		{
			MethodName: "NotifyGyroSpeedStateChanged",
			Handler:    _SteamInputManager_NotifyGyroSpeedStateChanged_Handler,
		},
		{
			MethodName: "NotifyGyroAccelerometerStateChanged",
			Handler:    _SteamInputManager_NotifyGyroAccelerometerStateChanged_Handler,
		},
		{
			MethodName: "NotifyGyroCalibrationStateChanged",
			Handler:    _SteamInputManager_NotifyGyroCalibrationStateChanged_Handler,
		},
		{
			MethodName: "StartControllerStateFlow",
			Handler:    _SteamInputManager_StartControllerStateFlow_Handler,
		},
		{
			MethodName: "EndControllerStateFlow",
			Handler:    _SteamInputManager_EndControllerStateFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_steaminput.proto",
}
