// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_steamos.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SteamOSManagerClient is the client API for SteamOSManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteamOSManagerClient interface {
	GetState(ctx context.Context, in *CSteamOSManager_GetState_Request, opts ...grpc.CallOption) (*CSteamOSManager_GetState_Response, error)
	NotifyStateChanged(ctx context.Context, in *CSteamOSManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	OptOutOfSideloadedClient(ctx context.Context, in *CSteamOSManager_OptOutOfSideloadedClient_Request, opts ...grpc.CallOption) (*CSteamOSManager_OptOutOfSideloadedClient_Response, error)
	ApplyMandatoryUpdate(ctx context.Context, in *CSteamOSManager_ApplyMandatoryUpdate_Request, opts ...grpc.CallOption) (*CSteamOSManager_ApplyMandatoryUpdate_Response, error)
	FactoryReset(ctx context.Context, in *CSteamOSManager_FactoryReset_Request, opts ...grpc.CallOption) (*CSteamOSManager_FactoryReset_Response, error)
}

type steamOSManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamOSManagerClient(cc grpc.ClientConnInterface) SteamOSManagerClient {
	return &steamOSManagerClient{cc}
}

func (c *steamOSManagerClient) GetState(ctx context.Context, in *CSteamOSManager_GetState_Request, opts ...grpc.CallOption) (*CSteamOSManager_GetState_Response, error) {
	out := new(CSteamOSManager_GetState_Response)
	err := c.cc.Invoke(ctx, "/SteamOSManager/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSManagerClient) NotifyStateChanged(ctx context.Context, in *CSteamOSManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamOSManager/NotifyStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSManagerClient) OptOutOfSideloadedClient(ctx context.Context, in *CSteamOSManager_OptOutOfSideloadedClient_Request, opts ...grpc.CallOption) (*CSteamOSManager_OptOutOfSideloadedClient_Response, error) {
	out := new(CSteamOSManager_OptOutOfSideloadedClient_Response)
	err := c.cc.Invoke(ctx, "/SteamOSManager/OptOutOfSideloadedClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSManagerClient) ApplyMandatoryUpdate(ctx context.Context, in *CSteamOSManager_ApplyMandatoryUpdate_Request, opts ...grpc.CallOption) (*CSteamOSManager_ApplyMandatoryUpdate_Response, error) {
	out := new(CSteamOSManager_ApplyMandatoryUpdate_Response)
	err := c.cc.Invoke(ctx, "/SteamOSManager/ApplyMandatoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSManagerClient) FactoryReset(ctx context.Context, in *CSteamOSManager_FactoryReset_Request, opts ...grpc.CallOption) (*CSteamOSManager_FactoryReset_Response, error) {
	out := new(CSteamOSManager_FactoryReset_Response)
	err := c.cc.Invoke(ctx, "/SteamOSManager/FactoryReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamOSManagerServer is the server API for SteamOSManager service.
// All implementations must embed UnimplementedSteamOSManagerServer
// for forward compatibility
type SteamOSManagerServer interface {
	GetState(context.Context, *CSteamOSManager_GetState_Request) (*CSteamOSManager_GetState_Response, error)
	NotifyStateChanged(context.Context, *CSteamOSManager_StateChanged_Notification) (*WebUINoResponse, error)
	OptOutOfSideloadedClient(context.Context, *CSteamOSManager_OptOutOfSideloadedClient_Request) (*CSteamOSManager_OptOutOfSideloadedClient_Response, error)
	ApplyMandatoryUpdate(context.Context, *CSteamOSManager_ApplyMandatoryUpdate_Request) (*CSteamOSManager_ApplyMandatoryUpdate_Response, error)
	FactoryReset(context.Context, *CSteamOSManager_FactoryReset_Request) (*CSteamOSManager_FactoryReset_Response, error)
	mustEmbedUnimplementedSteamOSManagerServer()
}

// UnimplementedSteamOSManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSteamOSManagerServer struct {
}

func (UnimplementedSteamOSManagerServer) GetState(context.Context, *CSteamOSManager_GetState_Request) (*CSteamOSManager_GetState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedSteamOSManagerServer) NotifyStateChanged(context.Context, *CSteamOSManager_StateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStateChanged not implemented")
}
func (UnimplementedSteamOSManagerServer) OptOutOfSideloadedClient(context.Context, *CSteamOSManager_OptOutOfSideloadedClient_Request) (*CSteamOSManager_OptOutOfSideloadedClient_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptOutOfSideloadedClient not implemented")
}
func (UnimplementedSteamOSManagerServer) ApplyMandatoryUpdate(context.Context, *CSteamOSManager_ApplyMandatoryUpdate_Request) (*CSteamOSManager_ApplyMandatoryUpdate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMandatoryUpdate not implemented")
}
func (UnimplementedSteamOSManagerServer) FactoryReset(context.Context, *CSteamOSManager_FactoryReset_Request) (*CSteamOSManager_FactoryReset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FactoryReset not implemented")
}
func (UnimplementedSteamOSManagerServer) mustEmbedUnimplementedSteamOSManagerServer() {}

// UnsafeSteamOSManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamOSManagerServer will
// result in compilation errors.
type UnsafeSteamOSManagerServer interface {
	mustEmbedUnimplementedSteamOSManagerServer()
}

func RegisterSteamOSManagerServer(s grpc.ServiceRegistrar, srv SteamOSManagerServer) {
	s.RegisterService(&SteamOSManager_ServiceDesc, srv)
}

func _SteamOSManager_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSManager_GetState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSManagerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSManager/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSManagerServer).GetState(ctx, req.(*CSteamOSManager_GetState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSManager_NotifyStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSManager_StateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSManagerServer).NotifyStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSManager/NotifyStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSManagerServer).NotifyStateChanged(ctx, req.(*CSteamOSManager_StateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSManager_OptOutOfSideloadedClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSManager_OptOutOfSideloadedClient_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSManagerServer).OptOutOfSideloadedClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSManager/OptOutOfSideloadedClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSManagerServer).OptOutOfSideloadedClient(ctx, req.(*CSteamOSManager_OptOutOfSideloadedClient_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSManager_ApplyMandatoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSManager_ApplyMandatoryUpdate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSManagerServer).ApplyMandatoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSManager/ApplyMandatoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSManagerServer).ApplyMandatoryUpdate(ctx, req.(*CSteamOSManager_ApplyMandatoryUpdate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSManager_FactoryReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSManager_FactoryReset_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSManagerServer).FactoryReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSManager/FactoryReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSManagerServer).FactoryReset(ctx, req.(*CSteamOSManager_FactoryReset_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamOSManager_ServiceDesc is the grpc.ServiceDesc for SteamOSManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamOSManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SteamOSManager",
	HandlerType: (*SteamOSManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _SteamOSManager_GetState_Handler,
		},
		{
			MethodName: "NotifyStateChanged",
			Handler:    _SteamOSManager_NotifyStateChanged_Handler,
		},
		{
			MethodName: "OptOutOfSideloadedClient",
			Handler:    _SteamOSManager_OptOutOfSideloadedClient_Handler,
		},
		{
			MethodName: "ApplyMandatoryUpdate",
			Handler:    _SteamOSManager_ApplyMandatoryUpdate_Handler,
		},
		{
			MethodName: "FactoryReset",
			Handler:    _SteamOSManager_FactoryReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_steamos.proto",
}

// SteamOSSLSClient is the client API for SteamOSSLS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteamOSSLSClient interface {
	GetState(ctx context.Context, in *CSteamOSSLS_GetState_Request, opts ...grpc.CallOption) (*CSteamOSSLS_GetState_Response, error)
	NotifyStateChanged(ctx context.Context, in *CSteamOSSLS_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	SetEnabled(ctx context.Context, in *CSteamOSSLS_SetEnabled_Request, opts ...grpc.CallOption) (*CSteamOSSLS_SetEnabled_Response, error)
	SetPluginEnabled(ctx context.Context, in *CSteamOSSLS_SetPluginEnabled_Request, opts ...grpc.CallOption) (*CSteamOSSLS_SetPluginEnabled_Response, error)
}

type steamOSSLSClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamOSSLSClient(cc grpc.ClientConnInterface) SteamOSSLSClient {
	return &steamOSSLSClient{cc}
}

func (c *steamOSSLSClient) GetState(ctx context.Context, in *CSteamOSSLS_GetState_Request, opts ...grpc.CallOption) (*CSteamOSSLS_GetState_Response, error) {
	out := new(CSteamOSSLS_GetState_Response)
	err := c.cc.Invoke(ctx, "/SteamOSSLS/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSSLSClient) NotifyStateChanged(ctx context.Context, in *CSteamOSSLS_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/SteamOSSLS/NotifyStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSSLSClient) SetEnabled(ctx context.Context, in *CSteamOSSLS_SetEnabled_Request, opts ...grpc.CallOption) (*CSteamOSSLS_SetEnabled_Response, error) {
	out := new(CSteamOSSLS_SetEnabled_Response)
	err := c.cc.Invoke(ctx, "/SteamOSSLS/SetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamOSSLSClient) SetPluginEnabled(ctx context.Context, in *CSteamOSSLS_SetPluginEnabled_Request, opts ...grpc.CallOption) (*CSteamOSSLS_SetPluginEnabled_Response, error) {
	out := new(CSteamOSSLS_SetPluginEnabled_Response)
	err := c.cc.Invoke(ctx, "/SteamOSSLS/SetPluginEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamOSSLSServer is the server API for SteamOSSLS service.
// All implementations must embed UnimplementedSteamOSSLSServer
// for forward compatibility
type SteamOSSLSServer interface {
	GetState(context.Context, *CSteamOSSLS_GetState_Request) (*CSteamOSSLS_GetState_Response, error)
	NotifyStateChanged(context.Context, *CSteamOSSLS_StateChanged_Notification) (*WebUINoResponse, error)
	SetEnabled(context.Context, *CSteamOSSLS_SetEnabled_Request) (*CSteamOSSLS_SetEnabled_Response, error)
	SetPluginEnabled(context.Context, *CSteamOSSLS_SetPluginEnabled_Request) (*CSteamOSSLS_SetPluginEnabled_Response, error)
	mustEmbedUnimplementedSteamOSSLSServer()
}

// UnimplementedSteamOSSLSServer must be embedded to have forward compatible implementations.
type UnimplementedSteamOSSLSServer struct {
}

func (UnimplementedSteamOSSLSServer) GetState(context.Context, *CSteamOSSLS_GetState_Request) (*CSteamOSSLS_GetState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedSteamOSSLSServer) NotifyStateChanged(context.Context, *CSteamOSSLS_StateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStateChanged not implemented")
}
func (UnimplementedSteamOSSLSServer) SetEnabled(context.Context, *CSteamOSSLS_SetEnabled_Request) (*CSteamOSSLS_SetEnabled_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnabled not implemented")
}
func (UnimplementedSteamOSSLSServer) SetPluginEnabled(context.Context, *CSteamOSSLS_SetPluginEnabled_Request) (*CSteamOSSLS_SetPluginEnabled_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPluginEnabled not implemented")
}
func (UnimplementedSteamOSSLSServer) mustEmbedUnimplementedSteamOSSLSServer() {}

// UnsafeSteamOSSLSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamOSSLSServer will
// result in compilation errors.
type UnsafeSteamOSSLSServer interface {
	mustEmbedUnimplementedSteamOSSLSServer()
}

func RegisterSteamOSSLSServer(s grpc.ServiceRegistrar, srv SteamOSSLSServer) {
	s.RegisterService(&SteamOSSLS_ServiceDesc, srv)
}

func _SteamOSSLS_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSSLS_GetState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSSLSServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSSLS/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSSLSServer).GetState(ctx, req.(*CSteamOSSLS_GetState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSSLS_NotifyStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSSLS_StateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSSLSServer).NotifyStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSSLS/NotifyStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSSLSServer).NotifyStateChanged(ctx, req.(*CSteamOSSLS_StateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSSLS_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSSLS_SetEnabled_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSSLSServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSSLS/SetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSSLSServer).SetEnabled(ctx, req.(*CSteamOSSLS_SetEnabled_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamOSSLS_SetPluginEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSteamOSSLS_SetPluginEnabled_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamOSSLSServer).SetPluginEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SteamOSSLS/SetPluginEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamOSSLSServer).SetPluginEnabled(ctx, req.(*CSteamOSSLS_SetPluginEnabled_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamOSSLS_ServiceDesc is the grpc.ServiceDesc for SteamOSSLS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamOSSLS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SteamOSSLS",
	HandlerType: (*SteamOSSLSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _SteamOSSLS_GetState_Handler,
		},
		{
			MethodName: "NotifyStateChanged",
			Handler:    _SteamOSSLS_NotifyStateChanged_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _SteamOSSLS_SetEnabled_Handler,
		},
		{
			MethodName: "SetPluginEnabled",
			Handler:    _SteamOSSLS_SetPluginEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_steamos.proto",
}
