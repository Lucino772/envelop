// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_storagedevicemanager.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageDeviceManagerClient is the client API for StorageDeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageDeviceManagerClient interface {
	IsServiceAvailable(ctx context.Context, in *CStorageDeviceManager_IsServiceAvailable_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_IsServiceAvailable_Response, error)
	GetState(ctx context.Context, in *CStorageDeviceManager_GetState_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_GetState_Response, error)
	NotifyStateChanged(ctx context.Context, in *CStorageDeviceManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
	Adopt(ctx context.Context, in *CStorageDeviceManager_Adopt_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Adopt_Response, error)
	Eject(ctx context.Context, in *CStorageDeviceManager_Eject_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Eject_Response, error)
	Format(ctx context.Context, in *CStorageDeviceManager_Format_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Format_Response, error)
	Unmount(ctx context.Context, in *CStorageDeviceManager_Unmount_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Unmount_Response, error)
	TrimAll(ctx context.Context, in *CStorageDeviceManager_TrimAll_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_TrimAll_Response, error)
}

type storageDeviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageDeviceManagerClient(cc grpc.ClientConnInterface) StorageDeviceManagerClient {
	return &storageDeviceManagerClient{cc}
}

func (c *storageDeviceManagerClient) IsServiceAvailable(ctx context.Context, in *CStorageDeviceManager_IsServiceAvailable_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_IsServiceAvailable_Response, error) {
	out := new(CStorageDeviceManager_IsServiceAvailable_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/IsServiceAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) GetState(ctx context.Context, in *CStorageDeviceManager_GetState_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_GetState_Response, error) {
	out := new(CStorageDeviceManager_GetState_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) NotifyStateChanged(ctx context.Context, in *CStorageDeviceManager_StateChanged_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/NotifyStateChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) Adopt(ctx context.Context, in *CStorageDeviceManager_Adopt_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Adopt_Response, error) {
	out := new(CStorageDeviceManager_Adopt_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/Adopt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) Eject(ctx context.Context, in *CStorageDeviceManager_Eject_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Eject_Response, error) {
	out := new(CStorageDeviceManager_Eject_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/Eject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) Format(ctx context.Context, in *CStorageDeviceManager_Format_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Format_Response, error) {
	out := new(CStorageDeviceManager_Format_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/Format", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) Unmount(ctx context.Context, in *CStorageDeviceManager_Unmount_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_Unmount_Response, error) {
	out := new(CStorageDeviceManager_Unmount_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageDeviceManagerClient) TrimAll(ctx context.Context, in *CStorageDeviceManager_TrimAll_Request, opts ...grpc.CallOption) (*CStorageDeviceManager_TrimAll_Response, error) {
	out := new(CStorageDeviceManager_TrimAll_Response)
	err := c.cc.Invoke(ctx, "/StorageDeviceManager/TrimAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageDeviceManagerServer is the server API for StorageDeviceManager service.
// All implementations must embed UnimplementedStorageDeviceManagerServer
// for forward compatibility
type StorageDeviceManagerServer interface {
	IsServiceAvailable(context.Context, *CStorageDeviceManager_IsServiceAvailable_Request) (*CStorageDeviceManager_IsServiceAvailable_Response, error)
	GetState(context.Context, *CStorageDeviceManager_GetState_Request) (*CStorageDeviceManager_GetState_Response, error)
	NotifyStateChanged(context.Context, *CStorageDeviceManager_StateChanged_Notification) (*WebUINoResponse, error)
	Adopt(context.Context, *CStorageDeviceManager_Adopt_Request) (*CStorageDeviceManager_Adopt_Response, error)
	Eject(context.Context, *CStorageDeviceManager_Eject_Request) (*CStorageDeviceManager_Eject_Response, error)
	Format(context.Context, *CStorageDeviceManager_Format_Request) (*CStorageDeviceManager_Format_Response, error)
	Unmount(context.Context, *CStorageDeviceManager_Unmount_Request) (*CStorageDeviceManager_Unmount_Response, error)
	TrimAll(context.Context, *CStorageDeviceManager_TrimAll_Request) (*CStorageDeviceManager_TrimAll_Response, error)
	mustEmbedUnimplementedStorageDeviceManagerServer()
}

// UnimplementedStorageDeviceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStorageDeviceManagerServer struct {
}

func (UnimplementedStorageDeviceManagerServer) IsServiceAvailable(context.Context, *CStorageDeviceManager_IsServiceAvailable_Request) (*CStorageDeviceManager_IsServiceAvailable_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsServiceAvailable not implemented")
}
func (UnimplementedStorageDeviceManagerServer) GetState(context.Context, *CStorageDeviceManager_GetState_Request) (*CStorageDeviceManager_GetState_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStorageDeviceManagerServer) NotifyStateChanged(context.Context, *CStorageDeviceManager_StateChanged_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStateChanged not implemented")
}
func (UnimplementedStorageDeviceManagerServer) Adopt(context.Context, *CStorageDeviceManager_Adopt_Request) (*CStorageDeviceManager_Adopt_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adopt not implemented")
}
func (UnimplementedStorageDeviceManagerServer) Eject(context.Context, *CStorageDeviceManager_Eject_Request) (*CStorageDeviceManager_Eject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eject not implemented")
}
func (UnimplementedStorageDeviceManagerServer) Format(context.Context, *CStorageDeviceManager_Format_Request) (*CStorageDeviceManager_Format_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Format not implemented")
}
func (UnimplementedStorageDeviceManagerServer) Unmount(context.Context, *CStorageDeviceManager_Unmount_Request) (*CStorageDeviceManager_Unmount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedStorageDeviceManagerServer) TrimAll(context.Context, *CStorageDeviceManager_TrimAll_Request) (*CStorageDeviceManager_TrimAll_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimAll not implemented")
}
func (UnimplementedStorageDeviceManagerServer) mustEmbedUnimplementedStorageDeviceManagerServer() {}

// UnsafeStorageDeviceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageDeviceManagerServer will
// result in compilation errors.
type UnsafeStorageDeviceManagerServer interface {
	mustEmbedUnimplementedStorageDeviceManagerServer()
}

func RegisterStorageDeviceManagerServer(s grpc.ServiceRegistrar, srv StorageDeviceManagerServer) {
	s.RegisterService(&StorageDeviceManager_ServiceDesc, srv)
}

func _StorageDeviceManager_IsServiceAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_IsServiceAvailable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).IsServiceAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/IsServiceAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).IsServiceAvailable(ctx, req.(*CStorageDeviceManager_IsServiceAvailable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_GetState_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).GetState(ctx, req.(*CStorageDeviceManager_GetState_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_NotifyStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_StateChanged_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).NotifyStateChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/NotifyStateChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).NotifyStateChanged(ctx, req.(*CStorageDeviceManager_StateChanged_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_Adopt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_Adopt_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).Adopt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/Adopt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).Adopt(ctx, req.(*CStorageDeviceManager_Adopt_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_Eject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_Eject_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).Eject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/Eject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).Eject(ctx, req.(*CStorageDeviceManager_Eject_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_Format_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_Format_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).Format(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/Format",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).Format(ctx, req.(*CStorageDeviceManager_Format_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_Unmount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).Unmount(ctx, req.(*CStorageDeviceManager_Unmount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageDeviceManager_TrimAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CStorageDeviceManager_TrimAll_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageDeviceManagerServer).TrimAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageDeviceManager/TrimAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageDeviceManagerServer).TrimAll(ctx, req.(*CStorageDeviceManager_TrimAll_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageDeviceManager_ServiceDesc is the grpc.ServiceDesc for StorageDeviceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageDeviceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StorageDeviceManager",
	HandlerType: (*StorageDeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsServiceAvailable",
			Handler:    _StorageDeviceManager_IsServiceAvailable_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _StorageDeviceManager_GetState_Handler,
		},
		{
			MethodName: "NotifyStateChanged",
			Handler:    _StorageDeviceManager_NotifyStateChanged_Handler,
		},
		{
			MethodName: "Adopt",
			Handler:    _StorageDeviceManager_Adopt_Handler,
		},
		{
			MethodName: "Eject",
			Handler:    _StorageDeviceManager_Eject_Handler,
		},
		{
			MethodName: "Format",
			Handler:    _StorageDeviceManager_Format_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _StorageDeviceManager_Unmount_Handler,
		},
		{
			MethodName: "TrimAll",
			Handler:    _StorageDeviceManager_TrimAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_storagedevicemanager.proto",
}
