// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_systemmanager.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemManagerClient is the client API for SystemManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemManagerClient interface {
	Hibernate(ctx context.Context, in *CSystemManager_Hibernate_Request, opts ...grpc.CallOption) (*CSystemManager_Hibernate_Response, error)
	WriteFile(ctx context.Context, in *CSystemManager_WriteFile_Request, opts ...grpc.CallOption) (*CSystemManager_WriteFile_Response, error)
}

type systemManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemManagerClient(cc grpc.ClientConnInterface) SystemManagerClient {
	return &systemManagerClient{cc}
}

func (c *systemManagerClient) Hibernate(ctx context.Context, in *CSystemManager_Hibernate_Request, opts ...grpc.CallOption) (*CSystemManager_Hibernate_Response, error) {
	out := new(CSystemManager_Hibernate_Response)
	err := c.cc.Invoke(ctx, "/SystemManager/Hibernate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagerClient) WriteFile(ctx context.Context, in *CSystemManager_WriteFile_Request, opts ...grpc.CallOption) (*CSystemManager_WriteFile_Response, error) {
	out := new(CSystemManager_WriteFile_Response)
	err := c.cc.Invoke(ctx, "/SystemManager/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemManagerServer is the server API for SystemManager service.
// All implementations must embed UnimplementedSystemManagerServer
// for forward compatibility
type SystemManagerServer interface {
	Hibernate(context.Context, *CSystemManager_Hibernate_Request) (*CSystemManager_Hibernate_Response, error)
	WriteFile(context.Context, *CSystemManager_WriteFile_Request) (*CSystemManager_WriteFile_Response, error)
	mustEmbedUnimplementedSystemManagerServer()
}

// UnimplementedSystemManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSystemManagerServer struct {
}

func (UnimplementedSystemManagerServer) Hibernate(context.Context, *CSystemManager_Hibernate_Request) (*CSystemManager_Hibernate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hibernate not implemented")
}
func (UnimplementedSystemManagerServer) WriteFile(context.Context, *CSystemManager_WriteFile_Request) (*CSystemManager_WriteFile_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedSystemManagerServer) mustEmbedUnimplementedSystemManagerServer() {}

// UnsafeSystemManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemManagerServer will
// result in compilation errors.
type UnsafeSystemManagerServer interface {
	mustEmbedUnimplementedSystemManagerServer()
}

func RegisterSystemManagerServer(s grpc.ServiceRegistrar, srv SystemManagerServer) {
	s.RegisterService(&SystemManager_ServiceDesc, srv)
}

func _SystemManager_Hibernate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSystemManager_Hibernate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagerServer).Hibernate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManager/Hibernate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagerServer).Hibernate(ctx, req.(*CSystemManager_Hibernate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManager_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSystemManager_WriteFile_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagerServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManager/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagerServer).WriteFile(ctx, req.(*CSystemManager_WriteFile_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemManager_ServiceDesc is the grpc.ServiceDesc for SystemManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SystemManager",
	HandlerType: (*SystemManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hibernate",
			Handler:    _SystemManager_Hibernate_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _SystemManager_WriteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_systemmanager.proto",
}
