// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: webuimessages_transport.proto

package steampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportAuthClient is the client API for TransportAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportAuthClient interface {
	Authenticate(ctx context.Context, in *CTransportAuth_Authenticate_Request, opts ...grpc.CallOption) (*CTransportAuth_Authenticate_Response, error)
	NotifyStartShutdown(ctx context.Context, in *CTransportAuth_StartShutdown_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error)
}

type transportAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportAuthClient(cc grpc.ClientConnInterface) TransportAuthClient {
	return &transportAuthClient{cc}
}

func (c *transportAuthClient) Authenticate(ctx context.Context, in *CTransportAuth_Authenticate_Request, opts ...grpc.CallOption) (*CTransportAuth_Authenticate_Response, error) {
	out := new(CTransportAuth_Authenticate_Response)
	err := c.cc.Invoke(ctx, "/TransportAuth/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAuthClient) NotifyStartShutdown(ctx context.Context, in *CTransportAuth_StartShutdown_Notification, opts ...grpc.CallOption) (*WebUINoResponse, error) {
	out := new(WebUINoResponse)
	err := c.cc.Invoke(ctx, "/TransportAuth/NotifyStartShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportAuthServer is the server API for TransportAuth service.
// All implementations must embed UnimplementedTransportAuthServer
// for forward compatibility
type TransportAuthServer interface {
	Authenticate(context.Context, *CTransportAuth_Authenticate_Request) (*CTransportAuth_Authenticate_Response, error)
	NotifyStartShutdown(context.Context, *CTransportAuth_StartShutdown_Notification) (*WebUINoResponse, error)
	mustEmbedUnimplementedTransportAuthServer()
}

// UnimplementedTransportAuthServer must be embedded to have forward compatible implementations.
type UnimplementedTransportAuthServer struct {
}

func (UnimplementedTransportAuthServer) Authenticate(context.Context, *CTransportAuth_Authenticate_Request) (*CTransportAuth_Authenticate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedTransportAuthServer) NotifyStartShutdown(context.Context, *CTransportAuth_StartShutdown_Notification) (*WebUINoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStartShutdown not implemented")
}
func (UnimplementedTransportAuthServer) mustEmbedUnimplementedTransportAuthServer() {}

// UnsafeTransportAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportAuthServer will
// result in compilation errors.
type UnsafeTransportAuthServer interface {
	mustEmbedUnimplementedTransportAuthServer()
}

func RegisterTransportAuthServer(s grpc.ServiceRegistrar, srv TransportAuthServer) {
	s.RegisterService(&TransportAuth_ServiceDesc, srv)
}

func _TransportAuth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTransportAuth_Authenticate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransportAuth/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAuthServer).Authenticate(ctx, req.(*CTransportAuth_Authenticate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAuth_NotifyStartShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTransportAuth_StartShutdown_Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAuthServer).NotifyStartShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransportAuth/NotifyStartShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAuthServer).NotifyStartShutdown(ctx, req.(*CTransportAuth_StartShutdown_Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportAuth_ServiceDesc is the grpc.ServiceDesc for TransportAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransportAuth",
	HandlerType: (*TransportAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _TransportAuth_Authenticate_Handler,
		},
		{
			MethodName: "NotifyStartShutdown",
			Handler:    _TransportAuth_NotifyStartShutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webuimessages_transport.proto",
}
